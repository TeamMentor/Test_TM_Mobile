<?xml version="1.0"?>
<ArrayOfTeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1692031576" Content_Hash="-1297638131">
    <Metadata>
      <Id>16c073b9-e951-4f25-a282-e867d2d808f7</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>AJAX Injection Attack</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Any</Phase>
      <Technology> Any</Technology>
      <Type>Attack</Type>
      <DirectLink>AJAX Injection Attack</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>1</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Applies To</h1>
  <p>
  </p>
  <ul>
    <li>Web Applications that use an AJAX implementation</li>
  </ul>
  <p />
  <h1>Description</h1>
  <p>AJAX (Asynchronous Javascript and XML) technology allows web pages to dynamically update specific content behind the scenes without the need to refresh the whole page. The ability to continually update the content of an AJAX page is done by calling an XmlHttpRequest
 (XHR) object with JavaScript to send HTTP requests to web servers. These requests typically send data in the form of XML or JSON (JavaScript Object Notation).
</p>
  <p>AJAX injection is a type of 
Cross Site Scripting Attack (XSS) that leverages the XML or JSON format of the input to the client browser. JSON is particularly popular because it is easy to parse JSON objects by simply passing them to the eval() function. Unfortunately, the use of eval()
 makes the application equivalently easy to exploit. Cleverly formatted strings containing malicious JavaScript may be stored as content on servers with weak validation or sent directly to the client browser using a spoofing or man in the middle attack. This JavaScript
 is then parsed and execute by the client's browser without their knowledge. Ultimately, this attack may be used to steal session cookies, send email on behalf of the victim.</p>
  <h1>Impact</h1>
  <ul>
    <li>
      <strong>Confidentiality:</strong> Since the code runs in the same domain as the trusted site any cookies or other confidential site data can be read by the malicious AJAX code.
</li>
    <li>
      <strong>JavaScript code injection:</strong> By using the XMLHttpRequest object attackers can download and install JavaScript code modules to be run on the local browser dynamically and send information from the computer to the attacker without the victim's knowledge.</li>
  </ul>
  <h1>Vulnerabilities</h1>
  <ul>
    <li>Failure to validate user input for script tags when that input is echoed back into a web page.&amp;nbsp;
</li>
    <li>Failure to encode user supplied input upon display of the data</li>
  </ul>
  <h1>Countermeasures</h1>
  <p>
    <strong>Constrain input:</strong> Use vigorous white-list style checking on any user input that may be reflected to a user's browser.
</p>
  <p>
    <strong>HTMLEncode all user input on display:</strong> Use white-list style HTMLEncoding libraries to ensure all possibly malicious characters are encoded before being echoed back to the user, regardless of whether they're loaded as part of the original
 page load or through later XMLHttpRequests.</p>
  <h1>Example</h1>
  <p>Suppose you use an AJAX based web mail client. Because these are the days of Web 2.0, your mail client displays a list of your favorite contacts and lets you know their status. By default this status is set to "Online" or "Away," but a custom message may also be set by each contact that is reflected in your client. In order for this to work, the web page periodically updates this status list by requesting the list of contacts from the server. The server returns this information to the client as the following
 JSON object:</p>
  <pre>{<br />   "numberOnline": "3",<br />   "nameAndStatus": [<br />   "Alice, Online",<br />   "Bob, Online",<br />   "Mallory, Away" ]<br />}</pre>
  <p>The following code shows the client JavaScript code which is called periodically to request the above object and update the DOM.</p>
  <pre>var contactStatusList;<br />var http_request = new XMLHttpRequest();<br />http_request.open("GET", url, true);<br />http_request.onreadystatechange = function ()<br /> {<br />    if (http_request.readyState == 4)<br /> {<br />        if (http_request.status == 200)<br /> {<br />            contactStatusList = eval("(" + http_request.responseText + ")");<br />        }        http_request = null;    }};http_request.send(null);</pre>
  <p>Now suppose that Mallory's status is set to a custom value. This may have been changed by Mallory herself or by a third party attacker. Either way, because the server providing the data to the mail client has poor validation, this status value is changed
 to include cleverly formatted malicious JavaScript. Suppose that instead of "Away" the value is changed to the following:</p>
  <pre>Away" ]};alert("Gotcha!");//</pre>
  <p>The first thing to notice is that the JSON object, which represents a the contact status list, is valid JavaScript. Because of this the eval() can be used to evaluate it. The above code completes the status object, inserts additional JavaScript, and comments
 out the rest of the line. When the code is passed as to the eval() function the additional JavaScript is run. Note that "alert("Gotcha!")" can be replaced with any malicious JavaScript and it will be run in the client's browser. Because the above code is an
 example, an alert message window will be displayed. In general, however, JavaScript could be downloaded and executed without the user's knowledge.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information on AJAX including common vulnerabilities that are associated with the technology, see "Ajax Security Basics":
<a href="http://www.securityfocus.com/infocus/1868">http://www.securityfocus.com/infocus/1868</a></li>
  </ul>
  <ul>
    <li>For information on AJAX attacks and JavaScript Hijacking, see "JavaScript Hijacking":<span style="color:rgb(17,17,17); font-family:Calibri,Arial,Helvetica,sans-serif; font-size:small">&amp;nbsp;</span><a href="http://www.net-security.org/dl/articles/JavaScript_Hijacking.pdf" style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; color:rgb(51,51,153); font-weight:bold; font-family:Calibri,Arial,Helvetica,sans-serif; font-size:small">http://www.net-security.org/dl/articles/JavaScript_Hijacking.pdf</a></li>
  </ul>
  <ul>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1245108050" Content_Hash="935317294">
    <Metadata>
      <Id>2b2a09fd-a10d-479f-a3df-8e28870319b6</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>File Name And Path Manipulation Attack</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Any</Phase>
      <Technology> Any</Technology>
      <Type>Attack</Type>
      <DirectLink>File Name And Path Manipulation Attack</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>1</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Applies To</h1>
  <p>
  </p>
  <ul>
    <li>All applications which use user input to construct the file name or path before accessing a file resource.</li>
  </ul>
  <p />
  <h1>Description</h1>
  <p>If user input is used to construct a filename or path it is possible for that input to be format so that an unintended or protected file is read, modified, or executed instead. This is commonly accomplished by exploiting canonicalization issues or alternate data streams. Command injection may also be possible and would allow the attacker to execute arbitrary commands. The impact of such vulnerabilities is compounded if the application is running with elevated privileges.</p>
  <h1>Impact</h1>
  <ul>
    <li>Command execution via command injection</li>
    <li>Reading data from or writing to protected files. Some examples: <ul><li>Making the application load/overwrite another user's configuration or data file. </li><li>Reading from or writing to protected application or system log files.</li></ul></li>
  </ul>
  <h1>Vulnerabilities</h1>
  <ul>
    <li>Lack of or improper validation of user supplied input.</li>
  </ul>
  <h1>Countermeasures</h1>
  <ul>
    <li>Use proper file permissions to ensure that only authorized users can access sensitive files. </li>
    <li>If granular file permissions is not an option, then resolve file names and paths completely and verify them for access. </li>
    <li>Avoid the problem by designing software that does not need user input for filenames. One simple solution is to generate unique random filenames and use a dictionary to associate them with a user supplied label.</li>
  </ul>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more inofrmation on path manipulation, see the <a href="http://www.owasp.org/index.php/Path_Manipulation">OWASP Path Manipulation</a> article.</li>
  </ul>
  <ul>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-225092352" Content_Hash="1676542906">
    <Metadata>
      <Id>46936d40-83f3-420e-8422-a7bd78f4e418</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Sniff Memory for Secrets Attack</Title>
      <Category>Encryption</Category>
      <Phase>Any</Phase>
      <Technology> Any</Technology>
      <Type>Attack</Type>
      <DirectLink>Sniff Memory for Secrets Attack</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Applies To</h1>
  <p>
  </p>
  <ul>
    <li>Local applications that deal with secret data such as passwords, encryption keys, etc.</li>
  </ul>
  <p />
  <h1>Description</h1>
  <p>Attackers often scan the memory space of a locally running application if they need to find certain secrets that the application contains. This is because developers are usually lax when dealing with sensitive data securely when the data is inside the application's own memory space.</p>
  <p>It is common knowledge that in most modern operating systems, an application's memory space is protected and is not accessible by other applications on the same system. However, reading and modifying another application's memory is also essential for debuggers to work. For this purpose, operating systems contain workarounds to accomodate reading and writing to another application's memory. This allows any application on the system to debug another process and read its memory content. Although operating systems do require the debugger process to have special permissions in order to debug another application, this still remains a problem in situations where users have administrative privileges on their local machines.</p>
  <h1>Impact</h1>
  <ul>
    <li>Disclosure of sensitive information to an attacker: This could be a an encryption key, another user's personal information or any other data that an attacker should not have access to.</li>
  </ul>
  <h1>Vulnerabilities</h1>
  <ul>
    <li>Storing clear-text sensitive information in memory. </li>
    <li>Using obfuscation techniques instead of stronger protection mechanisms for sensitive information in memory.</li>
  </ul>
  <h1>Countermeasures</h1>
  <ul>
    <li>
      <strong>Encrypt secret data</strong>: When sensitive data is present in application memory, it should be encrypted and the clear-text data should be overwritten as soon as possible. Freeing a variable does not clear the data it holds from memory; therefore it is important to remember to explicitly overwrite the memory segment where sensitive information was stored. </li>
    <li>
      <strong>Store sensitive data in mutable objects</strong>: Mutable objects allow the data in them to be overwritten. This is especially useful in managed languages as objects are required to be deallocated through the garbage collector. Therefore there is no certainty when the sensitive data will be deallocated from the current process space. </li>
    <li>
      <strong>Clear all sensitive data instances</strong>: Make sure that all memory locations, where sensitive data has been stored, are cleared/overwritten after their use. Losing a pointer to a sensitive data instance can result in not cleaning that particular memory and allowing the sensitive data to leak.</li>
  </ul>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information on secrets in memory, see: <a href="http://msdn2.microsoft.com/en-us/library/aa480477.aspx#pagguidelines0003_sens2">Minimize the exposure of secrets in memory</a></li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="52666007" Content_Hash="-1844136800">
    <Metadata>
      <Id>4e2f567c-e829-4710-9e2d-861757fb1854</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>SQL Injection Attack</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Any</Phase>
      <Technology> Any</Technology>
      <Type>Attack</Type>
      <DirectLink>SQL Injection Attack</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>1</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Applies To</h1>
  <p>
  </p>
  <ul>
    <li>Any application that interacts with a SQL database.</li>
  </ul>
  <p />
  <h1>Description</h1>
  <p>A SQL injection attack exploits vulnerabilities in input validation to run arbitrary commands in the database. It can occur when your application uses input to construct dynamic SQL statements to access the database. It can also occur if your code uses stored procedures that are passed strings that contain raw user input. Using the SQL injection attack, an attacker can execute arbitrary commands in your database, with all the privileges granted to the process being attacked. The issue is magnified if the application uses an over-privileged account to connect to the database. In this instance it is possible to use the database server to run operating system commands and potentially compromise other servers, in addition to being able to retrieve, manipulate, and destroy data. </p>
  <h1>Impact</h1>
  <ul>
    <li>
      <strong>Confidentiality</strong>: Since SQL databases generally hold sensitive data, loss of confidentiality is a frequent problem with SQL injection vulnerabilities. </li>
    <li>
      <strong>Authentication</strong>: If poor SQL commands are used to check user names and passwords, it may be possible to connect to a system as another user with no previous knowledge of the password. </li>
    <li>
      <strong>Authorization</strong>: If authorization information is held in an SQL database, it may be possible to change this information through the successful exploitation of an SQL injection vulnerability. </li>
    <li>
      <strong>Integrity</strong>: Just as it may be possible to read sensitive information, it is also possible to make changes or even delete this information with an SQL injection attack. </li>
  </ul>
  <p>The capabilities of an attacker are constrained by the permissions of the account you use to connect to the database. For this reason, your application should connect to the database with an account that has the minimum necessary set of privileges. </p>
  <h1>Vulnerabilities</h1>
  <ul>
    <li>Weak input validation. </li>
    <li>Dynamic construction of SQL statements without the use of type-safe parameters. </li>
    <li>Use of over-privileged database logins. </li>
  </ul>
  <h1>Countermeasures</h1>
  <ul>
    <li>
      <strong>Constrain input.</strong> Use vigorous white-list style checking and type checking on any user input that may be used in an SQL command. Rather than escape meta-characters, it is safest to avoid adding them to your white-list. Later use of data that has been entered in the database may neglect to escape meta-characters before use. </li>
    <li>
      <strong>Use Parameterized SQL statements and stored procedures. </strong>Parameterized SQL statements will process characters that have special meaning to SQL (like single quote) without negative security implications. </li>
    <li>
      <strong>Use escaping routines</strong>. If you cannot use parameters and must use dynamic SQL, use escaping routines to handle special characters that have meaning to the database. </li>
    <li>
      <strong>Use an account with limited permissions in the database</strong>. Ideally the account should only have execute permissions on the set of stored procedures that your application needs to use. It should have no direct table access.&amp;nbsp; </li>
    <li>
      <strong>Do not echo database errors</strong>. Catch exceptions on the server and return generic error messages to the client.</li>
  </ul>
  <h1>Example</h1>
  <p>While it is easier and more reliable to fix SQL injection by parameterization, it can be fixed without it. Suppose we have a PHP/MySQL application that has two tables: users and products. Each row in the USER table contains the users ID, name, password, credit card number, and address. Similarly, the product table has a column for the product ID, description, and price. The application contains a SQL Query that retrieves the description of a product given its ID.</p>
  <pre>$query = "SELECT description FROM products WHERE product_id = " + $prod_id + ";";$result = mysql_query($query);</pre>
  <p>So, if the value of $prod_id is 5 then $query reads:</p>
  <pre>SELECT description FROM products WHERE product_id = 5;</pre>
  <p>An attacker enters the following string where the application asks for the product ID (expecting a number):</p>
  <pre>5; SELECT * from users</pre>
  <p>Now $query has the following value which is a perfectly legitimate SQL query:</p>
  <pre>SELECT description FROM products WHERE product_id = 5; SELECT * from users;</pre>
  <p>The query is executed and the product description is returned along with every row in the User table and the attacker has all of the confidential information from the database.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>
      <a href="http://en.wikipedia.org/wiki/SQL_injection">http://en.wikipedia.org/wiki/SQL_injection</a>
    </li>
    <li>
      <a href="http://www.php.net/manual/en/security.database.sql-injection.php">http://www.php.net/manual/en/security.database.sql-injection.php</a>
    </li>
    <li>
      <a href="http://msdn2.microsoft.com/en-us/library/ms998271.aspx">http://msdn2.microsoft.com/en-us/library/ms998271.aspx</a>
    </li>
    <li>
      <a href="http://www.unixwiz.net/techtips/sql-injection.html">http://www.unixwiz.net/techtips/sql-injection.html</a>
    </li>
  </ul>
  <ul>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="133192392" Content_Hash="-1652802402">
    <Metadata>
      <Id>64a5d86e-5d3c-4afc-b0b0-3a711652e484</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Weak Keystore Protection Attack</Title>
      <Category>Encryption</Category>
      <Phase>Any</Phase>
      <Technology> Any</Technology>
      <Type>Attack</Type>
      <DirectLink>Weak Keystore Protection Attack</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Applies To</h1>
  <p>
  </p>
  <ul>
    <li>Applications using cryptography.</li>
  </ul>
  <p />
  <h1>Description</h1>
  <p>A keystore is a secure location on disk or in memory that can be used to store cryptographic keys or trusted certificates. Typically, these keys are bound to the machine and only available to a certain application. If the application uses a weak keystore, it may be possible to recover the keys and certificates from the keystore without proper credentials.</p>
  <h1>Impact</h1>
  <ul>
    <li>
      <strong>Information Disclosure:</strong> The attacker can gain access to the keys used by the application, allowing them to decrypt data the application attempts to protect with encryption, and to spoof the application to itself or other systems which trust data encrypted with those keys. </li>
    <li>
      <strong>Elevation of Privilege:</strong> The attacker may also be able to add new keys to the keystore or modify existing ones. This can result in the application trusting keys controlled by the attacker for sensitive operations or communicating with other systems.</li>
  </ul>
  <h1>Vulnerabilities</h1>
  <ul>
    <li>
      <strong>Using a Weak Keystore:</strong> Many operating environments provide a variety of key stores, some of which exist only for legacy reasons. Using an older version of a key store or a poorly implemented third party key store is likely to result in a key store compromise. </li>
    <li>
      <strong>Improperly Configuring a Strong Keystore:</strong> Many keystores support a variety of configuration options which allow for a wide range of security choices. Understanding the properties of your key store is essential to using it securely. </li>
    <li>
      <strong>Implementing a Custom or Homegrown Keystore:</strong> Strong keystores are both very tricky to write and require support from the operating environment. Attempting to write one should be considered on the same level as implementing a custom encryption algorithm or protocol, and should be avoided. </li>
    <li>
      <strong>Poor Key Handling:</strong> If the application isn't careful with how it manages keys when it adds them to the store or reads them out from the store for use, both key compromise and key disclosure are possible, even if the key store itself is strong.</li>
  </ul>
  <h1>Countermeasures</h1>
  <ul>
    <li>
      <p>
        <strong>Use a Strong Keystore:</strong> Which key store to use will vary by your platform. In Java, use the <strong>KeyStore</strong> class. On Windows, use DPAPI. Ensure that you are using the current version of the key store for your platform, including any patches.</p>
    </li>
    <li>
      <p>
        <strong>Configure Your Keystore Correctly:</strong> Ensure that you know how to properly configure the key store in your environment. Ensure that any ACLs on the key store are locked down as tightly as possible while still allowing your system to function. For instance, after the initial install, it is unlikely that your application will need rights to add keys to the key store, nor rights to change the permissions on the key store; if possible, make sure the application gives these up after installation. Ensure that, if possible, all cryptographic operations occur within the scope of the protected keystore, instead of manually exporting keys from the store or reading the bits out; if you can do this and you can lock your key store down even further, ensure that these operations cannot be performed on the key store. If you have a choice of keys or algorithms used to protect keys in the key store, ensure that they are appropriately strong.</p>
    </li>
    <li>
      <p>
        <strong>Ensure Proper Key Handling:</strong> Handle your key material very carefully. Place keys in the key store as soon as possible and read them out as late as possible. Do not leave keys in memory when you do not need them, and ensure that the memory that you load them into is properly zeroed out. Be careful with immutable objects and garbage collection when handling key data. Under no circumstances should cleartext keys be written out to disk; among other things, make sure that you pin memory with sensitive data so that it will not be written out to swap.</p>
    </li>
  </ul>
  <h1>Additional Resources</h1>
  <ul>
    <li>
      <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/security/KeyStore.html">http://java.sun.com/j2se/1.4.2/docs/api/java/security/KeyStore.html</a>
    </li>
    <li>
      <a href="http://msdn2.microsoft.com/en-us/library/ms995355.aspx">http://msdn2.microsoft.com/en-us/library/ms995355.aspx</a>
    </li>
  </ul>
  <ul>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1924693421" Content_Hash="14321161">
    <Metadata>
      <Id>73777936-5891-48b0-a3e8-71663e3429a1</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>XML Injection Attack</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Any</Phase>
      <Technology> Any</Technology>
      <Type>Attack</Type>
      <DirectLink>XML Injection Attack</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>1</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Applies To</h1>
  <p>
    <ul>
      <li>Any application that writes user input to an XML file on a server.</li>
    </ul>
  </p>
  <h1>Description</h1>
  <p>An XML injection vulnerability will allow an attacker to insert malicious data into XML which resides on the server. Depending on the type of XML parser used (SAX or DOM), this malicious data could be used to either overwrite the values in previous nodes or cause the XML parser to consume an excessive amount of memory on the server.</p>
  <h1>Impact</h1>
  <ul>
    <li>Modification of previous node values in the XML </li>
    <li>Denial of Service on the server </li>
    <li>Exposure of entire XML document to unauthorized users. </li>
    <li>Addition of new nodes or even entire documents. </li>
    <li>Ability to modify or remove data that should not be accessed.</li>
  </ul>
  <h1>Vulnerabilities</h1>
  <ul>
    <li>Dynamic XML generation using untrusted input </li>
    <li>Incorrectly defined schema </li>
    <li>Lack of schema validation </li>
    <li>Failure to validate input and properly encode any dangerous meta characters according to the context</li>
  </ul>
  <a name="Countermeasures">
  </a>
  <h1>Countermeasures</h1>
  <ul>
    <li>
      <p>
        <strong>When loading an XML file on the server validate it against a defined XSD</strong>.</p>
    </li>
    <li>
      <p>
        <strong>Perform context-sensitive encoding of untrusted input</strong>. As with encoding data to be output in HTML, a whitelist approach should be taken. For each context which data is going to be inserted in (element, attribute value, etc.) a set of known-safe characters should be constructed. The data to be added should be checked against the whitelist, and any characters not specifically listed should be encoded. CDATA sections should be used to further ensure that the parser ignores special characters. Ideally, only non-XML values should be accepted from untrusted sources. If an XML blob must be accepted from an untrusted source, it should be manually reassembled from values parsed out and encoded after checking the received blob against an XSD.</p>
    </li>
    <li>
      <p>
        <strong>Untrusted input should be validated against an inclusion list before use</strong>. For example, use a RegEx pattern, primitive type casting, a domain constraint, or another validator. See the Additional Resources for more information on data validation.</p>
    </li>
    <li>
      <p>
        <strong>Trim XML documents to include only the data that is necessary to the application</strong>.</p>
    </li>
    <li>
      <p>
        <strong>Use XML processing pipelines to make the flow of data clear and threats easier to identify</strong>.</p>
    </li>
    <li>
      <p>
        <strong>Remove DOCTYPE element from user input before creating XML objects</strong>.</p>
    </li>
  </ul>
  <h1>Example</h1>
  <p>Let us assume that a valid node in our server side XML looks like this:</p>
  <pre>&lt;UserRecord&gt;   &lt;UniqueID&gt;5&lt;/UniqueID&gt;   &lt;Name&gt;Gandalf&lt;/Name&gt;   &lt;Email&gt;Gandalf@MiddleEarth.com&lt;/Email&gt;   &lt;Address&gt;One Middle Earth Way, ME&lt;/Address&gt;   &lt;ZipCode&gt;10000&lt;/ZipCode&gt;   &lt;PhoneNumber&gt;123-456-7890&lt;/PhoneNumber&gt;&lt;/UserRecord&gt;</pre>
  <p>The UniqueID field here is assigned by the server. Now, if web server accepts input from the user and stores it in the XML file, what is the outcome of the parser when a user enters the following data for the Email field:</p>
  <pre>Gandalf@MiddleEarth.com&lt;/Email&gt;&lt;UniqueID&gt;0&lt;/UniqueID&gt;&lt;Name&gt;Gandalf&lt;/Name&gt;&lt;Email&gt;Gandalf@MiddleEarth.com</pre>
  <p>The resulting XML on the server will look like this:</p>
  <pre>&lt;UserRecord&gt;   &lt;UniqueID&gt;5&lt;/UniqueID&gt;   &lt;Name&gt;Gandalf&lt;/Name&gt;   &lt;Email&gt;Gandalf@MiddleEarth.com&lt;/Email&gt;&lt;UniqueID&gt;0&lt;/UniqueID&gt;               &lt;Name&gt;Gandalf&lt;/Name&gt;&lt;Email&gt;Gandalf@MiddleEarth.com&lt;/Email&gt;   &lt;Address&gt;One Middle Earth Way, ME&lt;/Address&gt;   &lt;ZipCode&gt;10000&lt;/ZipCode&gt;   &lt;PhoneNumber&gt;123-456-7890&lt;/PhoneNumber&gt;&lt;/UserRecord&gt;</pre>
  <p>We now have two fields and values for UniqueID, Name and Email. The outcome of parsing such data will depend upon the type of XML parser used:</p>
  <ul>
    <li>If a SAX parser is used, it will report the UniqueID for this node to be 0, so an attacker would have essentially overwritten the field value. </li>
    <li>If a DOM parser is used, it will report an error. However, the DOM parser can be abused by inserting additional nodes in the XML while still matching the schema, which will lead to excessive memory consumption by the parser and could potentially result in a Denial of Service.</li>
  </ul>
  <p>Also note that this is a simple example. It is possible to insert an entire new record among other issues. To fix the example above we can escape the markup delimiters to prevent the users input from being interpreted, replacing &amp; with &amp;, &lt; with &lt;, and so on as described in the Countermeasures section. This will prevent the users data from being interpreted in this case. In general, though, we don't know exactly what the input might look like, so the best plan is to have a white-list acceptable characters and do type checking as much as possible. Where type checking is not possible consider using CDATA to enforce that the string be treated strictly as data. For example:</p>
  <pre>$evil_input = "Gandalf@MiddleEarth.com&lt;/Email&gt;   &lt;UniqueID&gt;0&lt;/UniqueID&gt;&lt;Name&gt;Gandalf&lt;/Name&gt;&lt;Email&gt;Gandalf@MiddleEarth.com";$data = "&lt;![CDATA[" + $evil_input + "]]&gt;";</pre>
  <p>After we insert $data into the email field above the result will be the following acceptable XML:</p>
  <pre>&lt;UserRecord&gt;   &lt;UniqueID&gt;5&lt;/UniqueID&gt;   &lt;Name&gt;Gandalf&lt;/Name&gt;   &lt;Email&gt;&lt;![CDATA[Gandalf@MiddleEarth.com&lt;/Email&gt;&lt;UniqueID&gt;0&lt;/UniqueID&gt;             &lt;Name&gt;Gandalf&lt;/Name&gt;&lt;Email&gt;Gandalf@MiddleEarth.com]]&gt;   &lt;/Email&gt;   &lt;Address&gt;One Middle Earth Way, ME&lt;/Address&gt;   &lt;ZipCode&gt;10000&lt;/ZipCode&gt;   &lt;PhoneNumber&gt;123-456-7890&lt;/PhoneNumber&gt;&lt;/UserRecord&gt;</pre>
  <p>CDATA is very useful when used correctly but it has the same generic problem as we had before. An attacker can create a malicious string that uses "]]&gt;" to end the CDATA and insert malicious XML. Therefore, wherever we use CDATA we must also remove or escape ]]&gt; from the input string—at a certain point, it's easier to simply give up and encode everything by whitelist.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>
      <a href="http://www.w3.org/XML/Processing/">http://www.w3.org/XML/Processing/</a>
    </li>
    <li>
      <a href="http://www-128.ibm.com/developerworks/xml/library/x-think37/index.html">http://www-128.ibm.com/developerworks/xml/library/x-think37/index.html</a>
    </li>
    <li>
      <a href="http://www.owasp.org/index.php/Data_Validation">http://www.owasp.org/index.php/Data_Validation</a>
    </li>
    <li>
      <a href="http://www-128.ibm.com/developerworks/xml/library/x-tipcfsx.html">http://www-128.ibm.com/developerworks/xml/library/x-tipcfsx.html</a>
    </li>
    <li>
      <a href="http://www.w3schools.com/xml/xml_cdata.asp">http://www.w3schools.com/xml/xml_cdata.asp</a>
    </li>
  </ul>
  <ul>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1636416454" Content_Hash="611341393">
    <Metadata>
      <Id>9b3fc217-8a85-4d4d-8e13-3a0963be6703</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Phishing Attack</Title>
      <Category>Authorization</Category>
      <Phase>Any</Phase>
      <Technology> Any</Technology>
      <Type>Attack</Type>
      <DirectLink>Phishing Attack</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>1</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Applies To</h1>
  <ul>
    <li>Any web application that requires a user to login to use a service.</li>
  </ul>
  <h1>Description</h1>
  <p>Phishing is an attempt by an attacker to trick a legitimate user into entering personal information into an attacker's website. The attacker typically constructs a website that appears identical to a legitimate website but the data is posted to an illegitimate website. </p>
  <p>Most often, the attacker will send a mass e-mail to many users requesting them to update their information on the illegitimate website. The attacker may provide legitimate looking logos which have been harvested off the original website, or even text from past legitimate correspondences. The attacker will then provide a link to their malicious website, which has been setup to emulate every aspect of the valid site. The attacker may use a number of techniques to hide the true nature of the URL including URL redirection or known e-mail client or browser vulnerabilities. Once the victim browses to the malicious website and submits their information to the site the information is stored by the attacker and the user is redirected to the login site of the legitimate site. The malicious webpage may ask the user for any number of bits of sensitive information including: username, password, social security number, phone number, mother's maiden name, address, e-mail address, etc.</p>
  <h1>Impact</h1>
  <ul>
    <li>
      <strong>Confidentiality: </strong>This attack can be used by an attacker to obtain sensitive information about the victim user. </li>
    <li>
      <strong>Authentication: </strong>The sensitive information (username, passwords) obtained using this attack can be used to log in as another user and access more information such as bank account details.</li>
  </ul>
  <h1>Vulnerabilities</h1>
  <ul>
    <li>Web browsers failing to verify a website's security certificate. </li>
    <li>Lack of policy against request of such information. </li>
    <li>Failure to use modern anti-phishing techniques. </li>
    <li>Lack of education for users. </li>
    <li>Using multiple domains to host content within the same site, effectively priming users to ignore which domain they're currently talking to.</li>
  </ul>
  <h1>Countermeasures</h1>
  <ul>
    <li>
      <strong>Implement and use SSL: </strong>Getting a certificate for use in SSL from a trusted Certificate Authority will help the user to verify the server is legitimate. </li>
    <li>
      <strong>Create a policy:</strong> Publicly announce your company will never send a link in an e-mail to update information. Require your users to browse to your website manually. </li>
    <li>
      <strong>Use additional security measures: </strong>New anti-phishing mechanisms require a user to choose a personal image or theme. First, the user submits their username or a cookie (a form of loose identification), then the server responds by showing the user the image or theme they have chosen upon account creation, and finally, if the image or theme matches the theme the user remembers selecting, the user logs in completely. </li>
    <li>
      <strong>Support only modern browsers: </strong>Most modern web browsers include basic anti-phishing mechanisms that will help your users verify the legitimacy of the website they are browsing. Encourage your users to upgrade to the latest version of their browser software. </li>
    <li>
      <strong>Use a single domain for all parts of an application:</strong> This way, if an attacker attempts to create a fake site to harvest user information, users will be primed to expect all pages to come from the same URL.</li>
  </ul>
  <h1>Example</h1>
  <p>Attacker's may use variations on the legitimate website address, such as: </p>
  <ul>
    <li>
      <strong>Subdomains</strong>: http://www.abcbank.com.attack.com/ </li>
    <li>
      <strong>Similar domains</strong>: http://www.abcbank-security.com/ </li>
    <li>
      <strong>Off by one URLs</strong>: http://www.abcbonk.com/ </li>
    <li>
      <strong>Different languages or encodings</strong>: http://www.abcbànk.com </li>
    <li>
      <strong>Obscure URL features</strong>: Some browsers allow the user to provide credentials in the address bar. This is done by preceding the real address with the credentials and the @ (at) symbol, such as: http://www.abcbank.com@attacker.com. <p>In this example the user would be directed to attacker.com with the credentials of www.abcbank.com which can easily be disregarded by the attacker's website.</p></li>
  </ul>
  <h1>Additional Resources</h1>
  <ul>
    <li>Phishing: <a href="http://en.wikipedia.org/wiki/Phishing">http://en.wikipedia.org/wiki/Phishing</a></li>
    <li>Phishing: <a href="http://www.webopedia.com/DidYouKnow/Internet/2005/phishing.asp">http://www.webopedia.com/DidYouKnow/Internet/2005/phishing.asp</a></li>
    <li>URL redirection: <a href="http://en.wikipedia.org/wiki/URL_redirection">http://en.wikipedia.org/wiki/URL_redirection</a></li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="245575185" Content_Hash="-1570501964">
    <Metadata>
      <Id>aabf1365-8bcc-49bb-887b-272bf54520de</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Statistical Analysis Attack</Title>
      <Category>Encryption</Category>
      <Phase>Any</Phase>
      <Technology> Any</Technology>
      <Type>Attack</Type>
      <DirectLink>Statistical Analysis Attack</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1 class="section">Applies To</h1>
  <p>
  </p>
  <ul>
    <li>Applications that use encryption.</li>
  </ul>
  <p />
  <h1 class="section">Description</h1>
  <p>Given large sets of encrypted data an attacker may be able to discover sensitive data by comparing large sets of encrypted packets. An attacker will attempt to gather large amounts of packets to discern some information about a network or software system. The attacker may be able to do this by artificially injecting packets into the system to see how they are dealt with by the system or by passively listening to network traffic for interesting packets. </p>
  <h1 class="section">Impact</h1>
  <ul>
    <li>Discovery of encryption keys (WEP Key Attack) 
</li>
    <li>Discovery of packet meta-data such as origin, destination, time stamp, traffic patterns, physical location, network topology, and more 
</li>
    <li>Unencrypted data – an attack listening to all encrypted e-mail would still recover all unencrypted header information such as to, from, cc, timestamp, subject, etc.</li>
  </ul>
  <h1 class="section">Vulnerabilities</h1>
  <ul>
    <li>False sense of security when using encryption libraries</li>
  </ul>
  <h1 class="section">Countermeasures</h1>
  <ul>
    <li>Always be sure you know what is and what is not being encrypted 
</li>
    <li>Understand what bits of information can be discovered by analyzing packets or information being sent on the network 
</li>
    <li>Consider using a tool that will help hide some information commonly gathered by statistical analysis attacks</li>
  </ul>
  <ul>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-2017424498" Content_Hash="878683617">
    <Metadata>
      <Id>b0bbf434-dc63-49ac-a400-b6dc0c766316</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Chosen Ciphertext Attack</Title>
      <Category>Encryption</Category>
      <Phase>Any</Phase>
      <Technology> Any</Technology>
      <Type>Attack</Type>
      <DirectLink>Chosen Ciphertext Attack</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Applies To</h1>
  <p>
  </p>
  <ul>
    <li>Applications that use encryption.</li>
  </ul>
  <p />
  <h1>Description</h1>
  <p>In this attack the goal is to discover the key of a crypto system by controlling what ciphertext is decrypted. The attacker usually has access to a large number of encrypted messages and the equivalent of a tamperproof box that can do decryption. This type of attack is primarily applicable to asymmetric encryption algorithms but can also be applied to symmetric encryption algorithms as well. Another variant of this attack is the Adaptive chosen-ciphertext attack in which the attacker sends a number of ciphertexts to be decrypted then based on the plaintext that is returned the attacker chooses different ciphertext to be decrypted in the next round.</p>
  <h1>Impact</h1>
  <ul>
    <li>Discovery of the private key used in the system.</li>
  </ul>
  <h1>Vulnerabilities</h1>
  <ul>
    <li>Allowing anonymous users to decrypt chosen ciphertext. </li>
    <li>Using an encryption algorithm that does not protect against this type of attack.</li>
  </ul>
  <h1>Countermeasures</h1>
  <ul>
    <li>For RSA encryption use Optimal Asymmetric Encryption Padding. </li>
    <li>Deny anonymous users the ability to decrypt arbitrary ciphertext.</li>
  </ul>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information on chosen ciphertext attacks, see: <a href="http://en.wikipedia.org/wiki/Chosen_ciphertext_attack">http://en.wikipedia.org/wiki/Chosen_ciphertext_attack</a></li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="177143278" Content_Hash="1986034733">
    <Metadata>
      <Id>bb645071-1c9b-48cc-9622-ac3285e2c6d5</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Chosen Plaintext Attack</Title>
      <Category>Encryption</Category>
      <Phase>Any</Phase>
      <Technology> Any</Technology>
      <Type>Attack</Type>
      <DirectLink>Chosen Plaintext Attack</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Applies To</h1>
  <p>
  </p>
  <ul>
    <li>Applications that use encryption.</li>
  </ul>
  <p />
  <h1>Description</h1>
  <p>A chosen plaintext attack (CPA) is a form of cryptanalysis where it is assumed that the attacker has access to a device that provides her the capability to choose arbitrary plaintexts to be encrypted and obtain the corresponding ciphertexts.</p>
  <p>An attacker with such capabilities will perform the encryption of selected plaintexts and then analyze the resulting ciphertext in order to gain some further information that reduces the security of the encryption scheme. In the worst case, a chosen plaintext attack could reveal the scheme's secret key.</p>
  <h1>Impact</h1>
  <ul>
    <li>Disclosure of sensitive data </li>
  </ul>
  <h1>Vulnerabilities</h1>
  <ul>
    <li>Custom implementation of algorithm. </li>
    <li>Use of weak keys (e.g., a short key length). </li>
    <li>Exposing cipher text unnecesarily. </li>
    <li>Allowing an attacker to submit arbitrary data for encryption.</li>
  </ul>
  <h1>Countermeasures</h1>
  <ul>
    <li>Use well-known implementations of well-known cryptographic algorithms. </li>
    <li>Use cryptographically generated random keys. </li>
    <li>Use large keys (128-bit symmetric or 1024-bit asymmetric keys). </li>
    <li>Utilize platform supplied features to store secret keys. </li>
    <li>Follow principle of least privilege to provide limited access to the secret key. </li>
    <li>Maintain key outside of the application domain (e.g., for a Web server, keep the key outside of the webroot). </li>
    <li>If using a symmetric cipher, utilize a unique random IV to hide the underlying character pattern of the plain text and use a chaining mode to prevent the replacement of individual blocks of the cyphertext. </li>
    <li>If using a cryptographic hash algorithm, salt the hash value with a unique random bit stream.</li>
  </ul>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information on this attack, please see <a href="http://en.wikipedia.org/wiki/Chosen_plaintext_attack">http://en.wikipedia.org/wiki/Chosen_plaintext_attack</a></li>
  </ul>
  <ul>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-745112012" Content_Hash="-943817372">
    <Metadata>
      <Id>bfc48dfe-4235-4eaf-b290-f418a11ec876</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>URL Redirection Attack</Title>
      <Category>Session Management</Category>
      <Phase>Any</Phase>
      <Technology> Any</Technology>
      <Type>Attack</Type>
      <DirectLink>URL Redirection Attack</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Description</h1>
  <p>Many web applications use URL redirection as a feature to direct a user to another site or page on the same site. An attacker may be able to leverage this vulnerability to trick users into entering sensitive information into a malicious website while seemingly navigating within a trusted website.</p>
  <h1>Impact</h1>
  <ul>
    <li>
      <strong>Website forgery</strong>: If an attacker can redirect a user from one trusted site to another site, the victim may not notice the redirection and extend trust to a malicious web site.</li>
  </ul>
  <h1>Vulnerabilities</h1>
  <ul>
    <li>Improper use of redirection. </li>
    <li>Failure to properly alert the user when a redirection is about to occur.</li>
  </ul>
  <h1>Countermeasures</h1>
  <ul>
    <li>Never allow silent redirects to a user specified URL, even if the hostname is fixed.</li>
  </ul>
  <h1>Example</h1>
  <p>The login page for a web application has a feature that redirects the user, with a full query string, to a specified page within the site after the user logs in. This is used to allow pages to force the user to login before they are accessed, without losing track of the page the user was attempting to load. Unfortunately, this application also has pages, which alter the application state with a single get request. This combination allows an attacker to craft a single URL which will ask the user for their credentials on the legitimate login page, and subsequently perform some action as that user, without the user's knowledge. In order to fix this, the redirect links should be signed by the application in some way and protected against replay, thus guaranteeing that only legitimate uses of the feature will occur. Additionally, redirect strings should be passed as POST variables thus preventing attackers from crafting links that look like they are part of the legitimate site.</p>
  <p>In another example, a page has a utility function which allows developers to construct transparent redirects to other sites. This allows a phishing group to construct a seemingly legitimate URL on the application site which redirects silently to a malicious site. They can then pass this URL out to unsuspecting users, who can be tricked into visiting the malicious site while believing they're using the legitimate one.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>
      <a href="http://seclists.org/webappsec/2006/q1/0066.html">http://seclists.org/webappsec/2006/q1/0066.html</a>
    </li>
    <li>
      <a href="http://www.pc-help.org/obscure.htm">http://www.pc-help.org/obscure.htm</a>
    </li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1181787752" Content_Hash="-779411543">
    <Metadata>
      <Id>c491ef3a-b339-49ab-8291-f13de1f5187c</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Cross Site Request Forgery Attack</Title>
      <Category>Session Management</Category>
      <Phase>Any</Phase>
      <Technology> Any</Technology>
      <Type>Attack</Type>
      <DirectLink>Cross Site Request Forgery Attack</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>1</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Description</h1>
  <p>A Cross Site Request Forgery attack occurs when an attacker tricks a victim into loading a page that contains a malicious request. This request may be able to change the state of the web application and is possible because the request is sent in the context of the logged in victim. For many sites each request automatically sends the victim's credentials such as the session cookie or authentication credentials. Due to this fact there is no way to distinguish the false request from a legitimate request.</p>
  <p>Cross Site Request Forgery attacks are known by other names including XSRF, Session Riding, One-Click and Zero-Click attacks. </p>
  <p>A One-Click attack refers to a link that causes a malicious action to be performed when a victim clicks on it. A Zero-Click attack is automatically executed upon page load. A common way to perform a zero-click attack is to embed the request in the source of an image.</p>
  <h1>Impact</h1>
  <p>
    <strong>Elevation of privilege</strong> - the attacker can execute commands on the web application on behalf of the victim</p>
  <h1>Vulnerabilities</h1>
  <p>Executing single requests that can change the state of the application, such as add users, change account balances or passwords, etc.</p>
  <h1>Countermeasures</h1>
  <ul>
    <li>Add a session identifier or nonce value to each session and/or viewstate to track each request. </li>
    <li>Use "double submit" cookies (for Ajax requests only). </li>
    <li>Minimize single request GET commands. </li>
    <li>Never allow a single request to change the state of the web application.</li>
  </ul>
  <h1>Example</h1>
  <p>If the application allows a user to change the state of the application in a single request this attack is possible. In this example the web application allows a logged in administrator to create a new user sending a single GET request.</p>
  <p>This GET request looks like this:</p>
  <pre>GET http://teammentorexample.com/adduser.aspx?username=joe&amp;password=1234&amp;usertype=userHTTP/1.1</pre>
  <p>The attacker discovers that this request will create a new user and creates his own request which he embeds in an e-mail with the following image tag:</p>
  <pre>&lt;img src="http://teammentorexample.com/adduser.aspx?username=HACKER&amp;password=TEST&amp;usertype=admin" /&gt;</pre>
  <p>When the victim's e-mail client attempts to download the image located at the above source the request is made without the knowledge of the victim. </p>
  <p>The application should require a two step authorization mechanism for any change to server state. In this example the server should send the client a nonce value to verify the admin would indeed like to add this user. The admin would have to verify the action on a separate page and return the nonce value. Only after the server receives the action and verifies the nonce should the user be created. </p>
  <h1>Additional Resources</h1>
  <p>To learn more about CSRF attacks, see:</p>
  <ul>
    <li>
      <a href="http://www.owasp.org/index.php/Cross-Site_Request_Forgery">http://www.owasp.org/index.php/Cross-Site_Request_Forgery</a>
    </li>
    <li>
      <a href="http://www.cgisecurity.com/articles/csrf-faq.shtml">http://www.cgisecurity.com/articles/csrf-faq.shtml</a>
    </li>
    <li>
      <a href="http://www.owasp.org/index.php/Testing_for_CSRF">http://www.owasp.org/index.php/Testing_for_CSRF</a>
    </li>
  </ul>
  <ul>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-524600873" Content_Hash="-271722634">
    <Metadata>
      <Id>c97da133-1150-4789-9d18-73ba221a4fba</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Command Injection Attack</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Any</Phase>
      <Technology> Any</Technology>
      <Type>Attack</Type>
      <DirectLink>Command Injection Attack</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>1</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Applies To</h1>
  <p>
  </p>
  <ul>
    <li>All applications.</li>
  </ul>
  <p />
  <h1>Description</h1>
  <p>Command injection problems are a subset of injection problems in which the process is tricked into either executing code or calling external processes of the attacker's choice through the injection of control information into the data stream.</p>
  <h1>Impact</h1>
  <ul>
    <li>
      <strong>Elevation of Privilege:</strong> Command injection can allow for the execution of arbitrary commands and code by the attacker. </li>
  </ul>
  <h1>Vulnerabilities</h1>
  <ul>
    <li>
      <strong>Failure to Validate User Input:</strong> Situations where control information and data are mixed create opportunities for command injection.</li>
  </ul>
  <h1>Countermeasures</h1>
  <ul>
    <li>
      <strong>Validate user input</strong>. Prevent commands from being included in data by validating input for type, length, range, and format. Whitelist acceptable input and reject everything else. Escape meta characters and be aware of canonicalization issues. Remember that data may be changed as it flows through the program, so validating at multiple stages is often appropriate. </li>
    <li>
      <strong>Do not use input data in commands directly</strong>. Clever formatting may be used so that the user's input is treated as its own separate command instead of as data. Therefore, validate the input and explicitly type it as data so that it cannot be interpreted as a command even if it contains one. </li>
    <li>
      <strong>Avoid using command interpreters</strong>. Although not always practical, using a well maintained API will have better results than invoking commands through an interpreter or external process.</li>
  </ul>
  <h1>Example</h1>
  <p>The following code is a web wrapper around the ImageMagick command "convert":</p>
  <pre>&lt;?php
$filename=$_GET['file'];
$old_fmt=$_GET['old'];
$new_fmt=$_GET['new'];

$cmd = 'convert $filename.$old_fmt $filename.$new_fmt 2&gt;&amp;1';
echo `$cmd`;
?&gt;
</pre>
  <br />
  <br />This could be used as part of an image upload page where a user posts an image, it is saved to the file system, then this call is performed asynchronously. There are multiple issues with such a flow, but the most critical is the command injection vulnerability it introduces. Consider what a URL might look like under normal operation:<br /><br /><pre>http://example.com/convert.php?file=kittycat&amp;old=png&amp;new=jpg</pre><br /><br />This would construct a command that would look like the following:<br /><br /><pre>convert kittycat.png kittycat.jpg 2&gt;&amp;1</pre><br /><br />If the file exists the page would return nothing; if the file does not exist or there is another problem lack of error handling would disclose sensitive information about how the script works back to the user. Even worse than the information that an attacker could obtain through this is the fact that she can now execute arbitrary commands. Consider the following URL:<br /><br /><br /><pre>http://example.com/convert.php?file=kittycat&amp;old=png&amp;new=jpg%3bcat+%2fetc%2fpasswd</pre><br />This would construct a much more dangerous command:<br /><br /><pre>convert kittycat.png kittycat.jpg; cat /etc/passwd 2&gt;&amp;1</pre><br /><br />The <font face="Courier New">convert</font> command would likely silently succeed followed by the <font face="Courier New">cat</font> command which would dump the contents of <font face="Courier New">/etc/passwd</font> back to the attacker. Note that even though in this example the attacker sees feedback from the injection, methods exist for exploiting scenarios where injection displays no output. In such cases an attacker could, for example, use the <font face="Courier New">sleep</font> command to detect the existence of a blind injection issue. Once found, such a vulnerability is easily exploited. <br /><br />
Another example of this type of behavior can be seen with XSL, the style sheet language for XML. The primary purpose of XSL is to provide an easy and modular way to transform XML documents into other XML documents such as HTML. In particular, different XSL styles can be attached to the same XML and are sometimes supplied by the user. Microsoft extended the functionality of XSL to allow scripting code to be embedded in the style sheets with the &lt;msxsl:script&gt; tag. If an attacker has the ability to modify or replace the XSL style sheet in use, they can therefore inject any command to the system running the application simply by including it in the style sheet.
  <p>In many programming languages there is an eval() function that, as the name suggests, evaluates a string as an expression. Among the members of this list are the commonly used JavaScript, ASP, Python, Perl, Ruby, and PHP. Blurring the distinction between data and code presents a huge security risk; this case is no different. User input is sometimes used in eval() expressions allowing arbitrary code to be executed. Consider an example where eval() is used in a php to set variables equal to one based on GET parameters:</p><pre>$turn_on=explode('|', $_GET['var']);

foreach ($turn_on as $var){
    eval('$var = 1');
}
</pre><p>The developer may expect a URL that looks like the following:</p><pre>http://example.com/set.php?turn_on=foo|bar|baz</pre><br /><br /><font face="Arial">This would result in evaluations that could be represented with the following code:<br /><br /></font><pre>foo=1;
bar=1;
baz=1;
</pre><p>However, imagine instead that the user tried a different URL:</p><pre>http://example.com/set.php?turn_on=foo%3d1%3bphpinfo()%3bbar|baz</pre><p>The evaluated code would look a little different:</p><pre>foo=1; <br />phpinfo();<br />bar=1;<br />baz=1;<br /></pre><p>Rather than simply set variables to 1, the script now outputs to an attacker information about the installation and configuration of PHP on the system he is attacking. Any system command or external program in the path could be run in this fashion.</p><h1>Additional Resources</h1><ul><li>For more information on Command Injection, see the <a href="http://www.e-articles.info/e/a/title/Command-Injection/">Command Injection </a>article at e-articles.info. </li><li>For more information on the Javascript Eval function, see the Wikipedia Eval article at <a href="http://en.wikipedia.org/wiki/Eval">http://en.wikipedia.org/wiki/Eval</a>.</li></ul><ul></ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-101763803" Content_Hash="-1909224310">
    <Metadata>
      <Id>dfdb2801-2abe-44d3-93ff-9f6254197978</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Xpath-XQuery Attack</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Any</Phase>
      <Technology> Any</Technology>
      <Type>Attack</Type>
      <DirectLink>Xpath-XQuery Attack</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>1</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Applies To</h1>
  <p>Any application that can manipulate XML documents through Xpath/XQuery </p>
  <h1>Description</h1>
  <p>An Xpath/XQuery attack exploits vulnerabilities in input validation to run arbitrary commands in XML databases. This attack works in much the same way as a SQL injection attack but with an XML target instead of a SQL target. This attack can occur when your application uses input directly from a user to construct an Xpath/XQuery statement to access XML tables. Using the Xpath/XQuery attack the attacker can execute arbitrary Xpath/XQuery statements on an XML database. This attack is often more damaging than a SQL injection attack as permissions are not enforced and the attacker’s query can access every part of the XML document. With an Xpath/XQuery attack it is possible to retrieve, manipulate, and destroy any data stored in the XML document.</p>
  <h1>Impact</h1>
  <ul>
    <li>
      <strong>Confidentiality:</strong> Since XML generally holds sensitive data, loss of confidentiality is a frequent problem with XPath/XQuery injection vulnerabilities. </li>
    <li>
      <strong>Authentication:</strong> If poor XPath/XQuery commands are used to check user names and passwords, it may be possible to connect to a system as another user with no previous knowledge of the password. </li>
    <li>
      <strong>Authorization:</strong> If authorization information is held in an XML document, it may be possible to change this information through the successful exploitation of an XPath/XQuery injection vulnerability. </li>
    <li>
      <strong>Integrity:</strong> Just as it may be possible to read sensitive information, it is also possible to make changes or even delete this information with an XPath/XQuery injection attack. </li>
  </ul>
  <h1>Vulnerabilities</h1>
  <ul>
    <li>Weak input validation. </li>
    <li>Generating XPath expressions by dynamically concatenating strings with user supplied data. </li>
    <li>Failure to escape single quotes, double quotes, and other potentially dangerous characters.</li>
  </ul>
  <h1>Countermeasures</h1>
  <ul>
    <li>
      <strong>Constrain input.</strong> Use vigorous white-list style checking on any user input that may be used as part of an XQuery command. This will also help prevent meta characters from being added to your stored data set which will be used again. </li>
    <li>
      <strong>Use parameterized and precompiled XPath expressions in your XQuery instead of concatinating strings with user input.</strong> Parameterized Xpath statements will accept characters that have special meaning to Xpath (like single quote) without problems because they are strongly typed. </li>
    <li>
      <strong>Use escaping routines.</strong> If you cannot use parameters and must generate XPath expressions dynamically, use escaping routines to handle special characters that have meaning to the database. </li>
    <li>
      <strong>Do not echo XQuery errors.</strong> Catch any exceptions on the server and return generic error messages to the client.</li>
  </ul>
  <h1>Example</h1>
  <p>Consider the following XML file, being used by an application to log users into the application</p>
  <pre>&lt;?xml version="1.0" encoding="ISO-8859-1"?&gt; &lt;users&gt;    &lt;user&gt;       &lt;username&gt;admin&lt;/username&gt;       &lt;password&gt;8af2&amp;&lt;/password&gt;       &lt;account&gt;admin&lt;/account&gt;    &lt;/user&gt;    &lt;user&gt;       &lt;username&gt;user1&lt;/username&gt;       &lt;password&gt;password&lt;/password&gt;       &lt;account&gt;guest&lt;/account&gt;    &lt;/user&gt;    &lt;user&gt;       &lt;username&gt;user2&lt;/username&gt;       &lt;password&gt;1234&lt;/password&gt;       &lt;account&gt;guest&lt;/account&gt;    &lt;/user&gt; &lt;/users&gt;</pre>
  <p>A developer could use the following Xpath command to return all the users with the username</p>
  <pre>‘user1’ and password ‘password’string(//user[username/text()='user1'        and password/text()='password']/account/text())</pre>
  <p>However, without proper input validation the attacker could easily input a logic statement to manipulate the output of the query. An attacker could provide the following string to the Xpath statement above.</p>
  <pre>Username: user1Password: ' or '1' = '1</pre>
  <p>This will change the Xpath statement to look like this:</p>
  <pre>string(//user[username/text()='user1' and password/text()=''        or '1' = '1']/account/text())</pre>
  <p>The password portion of the query will always resolve to true which means that the application will authenticate the attacker as user1 even though no password was provided.</p>
  <p>A good way to fix this example is to use a parameterized query. The idea here is to create a precompiled query that gets values from parameters instead of dynamically creating an XPath expression by concatenation at run time. Let $username and $password be string variables that hold the users input. Then construct a query in the following way:</p>
  <pre>"//user[user[username/text()=$username and password/text()=$password]"</pre>
  <p>If you are using .NET see the Additional Resources below for another example of how this works.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>
      <a href="http://www.tkachenko.com/blog/archives/000385.html">http://www.tkachenko.com/blog/archives/000385.html</a>
    </li>
    <li>
      <a href="http://www.owasp.org/index.php/XML_Injection">http://www.owasp.org/index.php/XML_Injection</a>
    </li>
    <li>
      <a href="http://palisade.plynt.com/issues/2005Jul/xpath-injection/index.php">http://palisade.plynt.com/issues/2005Jul/xpath-injection/index.php</a>
    </li>
    <li>
      <a href="http://secureitalliance.org/blogs/watchfire/archive/2006/02/10/660.aspx">http://secureitalliance.org/blogs/watchfire/archive/2006/02/10/660.aspx</a>
    </li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-326735638" Content_Hash="7019034">
    <Metadata>
      <Id>ec178496-024d-4b3c-8381-8db94767e539</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Cross Site Scripting Attack</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Any</Phase>
      <Technology> Any</Technology>
      <Type>Attack</Type>
      <DirectLink>Cross Site Scripting Attack</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>1</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Description</h1>
  <p>A Cross Site Scripting (XSS) attack can cause arbitrary code to run in a user's browser while the browser is connected to a trusted Web site. The attack targets your application's users and not the application itself, but it uses your application as the vehicle for the attack. Because the script code is downloaded by the browser from a trusted site, the browser has no way of knowing that the code is not legitimate. Internet Explorer security zones provide no defense. As the attacker's code has access to the cookies associated with the trusted site and are stored on the user's local computer, a user's authentication cookies are typically the target of attack. </p>
  <p>There are two primary types of XSS, persistent and non-persistent. If the attacker is able to inject his malicious script to the web applications data store, then the script will be persistent and anyone who then loads a page with that content will run the script and become a victim of the attack. Forums and other web services that have user supplied HTML content are a classic example of this. If this content is not validated and encoded then anyone can leave a malicious script on the site. Non-Persistent XSS uses some reflective aspect of the page to deliver the payload. Web applications often echo user input back to them without altering it. Search engines are a good example of this type of behavior. Attackers can create and distribute URLs that contain a malicious script that gets reflected back to the user. The most common example of this is the "page not found" error page which echoes the requested page back to the user.</p>
  <ul>
    <li>Confidentiality: The most common attack performed with cross-site scripting involves the disclosure of information stored in user cookies. </li>
    <li>Access control: In some circumstances it may be possible to run arbitrary code on a victim's computer when cross-site scripting is combined with other flaws. </li>
    <li>Elevation of privilege: Even if an attacker cannot get at the authentication information of a user, they can act as that user.</li>
  </ul>
  <h1>Impact</h1>
  <ul>
    <li>Credential compromise </li>
    <li>Credential disclosure </li>
    <li>Information disclosure </li>
    <li>Execute code on client machine </li>
    <li>Elevation of Privilege </li>
    <li>Repudiation</li>
  </ul>
  <h1>Vulnerabilities</h1>
  <ul>
    <li>Failure to validate user input for script tags when that input can be echoed back into a web page. </li>
    <li>Trusting data retrieved from a shared database. </li>
    <li>Failing to encode any remotely provided data, including reverse DNS lookup, cookie contents, uploaded files, etc. </li>
    <li>Improperly converting "safe" tags to HTML. </li>
    <li>Displaying user input directly without encoding it appropriately for the context in which it is used. </li>
    <li>Checking user submitted data against a blacklist instead of a whitelist.</li>
  </ul>
  <h1>Countermeasures</h1>
  <ul>
    <li>Perform context sensitive encoding of untrusted input before it is echoed back to a browser by using an encoding library (e.g., the Microsoft Anti-Cross Site Scripting Library or OWASP Reform). The following language-specific functionality may be helpful, is not sufficient to properly protect against cross-site scripting; a whitelisting library should be used instead. Most of these libraries only convert the symbols ", &amp;, &lt;, and &gt; to safe HTML equivalents. <ul><li><strong>Python</strong>: cgi.escape (only escapes 3 characters by default, escaping " is optional) </li><li><strong>ASP</strong>: HttpUtility.HtmlEncode and HttpUtility.UrlEncode (only encodes 4 characters) </li><li><strong>Perl</strong>: HTML::Entities::encode (only escapes 4 characters by default, but it makes it easy to specify other unsafe characters) </li><li><strong>PHP</strong>: htmlentities and urlencode (only escapes 4 characters by default, and can optionally encode ' (single quote))</li></ul></li>
    <li>Untrusted input should be validated against an inclusion list before use. For example, use regular expressions to define acceptable character sequences and use it as a filter. If the input is meant to be a primitive type it can be cast appropriately to assure that it is the expected type (a type constraint) and then checked to ensure it's in appropriate range (a range constraint). In the case where there are only a limited number of acceptable inputs, then the input can be constrained to that set with simple if or switch control structures, or by matching against a fixed list of strings (a domain constraint).</li>
  </ul>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information on the Microsoft Anti-Cross Site Scripting Library, see the <a href="http://www.microsoft.com/downloads/details.aspx?familyid=9A2B9C92-7AD9-496C-9A89-AF08DE2E5982&amp;displaylang=en">Microsoft Downloads Site</a></li>
    <li>For more information on the "Reform" encoding project, see <a href="http://www.owasp.org/index.php/Category:OWASP_Encoding_Project">The OWASP Encoding Project site</a></li>
    <li>For more information on Cross Site Scripting, see <a href="http://www.owasp.org/index.php/Cross_site_scripting">Cross Site Scripting on the OWASP Site</a></li>
    <li>For more information on attacks used in Cross Site Scripting, see <a href="http://ha.ckers.org/xss.html">ha.ckers.org</a></li>
    <li>For more information on mitigations, see <a href="http://msdn2.microsoft.com/en-us/library/ms998274.aspx">How To: Prevent Cross-Site Scripting in ASP.NET</a></li>
  </ul>
  <ul>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-831716599" Content_Hash="-975828512">
    <Metadata>
      <Id>0176dd13-73b3-4cdd-8793-e9562382342f</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>URL Authorization Is Used for Page And Directory Access Control</Title>
      <Category>Authorization</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>URL Authorization Is Used for Page And Directory Access Control</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure URL Authorization is used&amp;nbsp;to control which users and groups of users have access to specific pages or the application itself.</p>
  <h1>Why</h1>
  <p>Rather than having to password-protect pages, URL Authorization allows you to tie page access to user accounts or roles.&amp;nbsp;&amp;nbsp;</p>
  <h1>How to Check</h1>
  <p>Use the following steps to check if your application uses URL Authorization:</p>
  <ol>
    <li>
      <div>Check if your application has an&amp;nbsp;&lt;<strong>authorization</strong>&gt; element in its Web.config file.</div>
    </li>
    <li>
      <div>Check to ensure that the users, roles and access rights listed in the &lt;<strong>authorization</strong>&gt; element match to your application's requirements.</div>
    </li>
  </ol>
  <p>Below is an example of the &lt;<strong>authorization</strong>&gt; element configured to deny access to all but a few chosen users and roles:</p>
  <pre>&lt;authorization&gt;<br />&amp;nbsp; &lt;allow users="DomainName\Bob, DomainName\Mary" /&gt;<br />&amp;nbsp; &lt;allow roles="BUILTIN\Administrators, DomainName\Manager" /&gt;<br />&amp;nbsp; &lt;deny users="*" /&gt;<br />&lt;/authorization&gt;<br /></pre>
  <h1>How to Fix</h1>
  <p>To configure URL authorization, use an &lt;<strong>authorization</strong>&gt; element in Web.config and specify which user and/or role names are allowed access to the current directory or the nominated directory or file. ASP.NET on Windows Server 2003 or later protects all files in a given directory, even those not mapped to ASP.NET, such as .html, .gif, and .jpg files. </p>
  <p>Authorization settings in Web.config refer to all of the files in the current directory and all subdirectories unless a subdirectory contains its own Web.config with an &lt;<strong>authorization</strong>&gt; element. In&amp;nbsp;such a&amp;nbsp;case, the settings in the subdirectory override the parent directory settings. </p>
  <p>URL authorization can be used for both forms authentication and Windows authentication. In the case of Windows authentication, user names take the form "DomainName\WindowsUserName" and role names take the form "DomainName\WindowsGroupName". The local administrators group is referred to as "BUILTIN\Administrators". The local users group is referred to as "BUILTIN\Users". </p>
  <p>The following example shows Windows users and Windows roles: </p>
  <pre>&lt;authorization&gt;<br />  &lt;allow users="DomainName\Bob, DomainName\Mary" /&gt;<br />  &lt;allow roles="BUILTIN\Administrators, DomainName\Manager" /&gt;<br />  &lt;deny users="*" /&gt;<br />&lt;/authorization&gt;  </pre>
  <p>The following example uses a custom role: </p>
  <pre>&lt;authorization&gt;<br />  &lt;allow roles="Manager"/&gt;<br />  &lt;deny users="*"/&gt;<br />&lt;/authorization&gt;  </pre>
  <p>To apply authorization rules to a specific file or folder, enclose the &lt;<strong>authorization</strong>&gt; element inside a &lt;<strong>location</strong>&gt; element as shown here: </p>
  <pre>&lt;location path="Secure" &gt;<br />  &lt;system.web&gt;<br />    &lt;authorization&gt;<br />      &lt;deny users="?" /&gt;<br />    &lt;/authorization&gt;<br />  &lt;/system.web&gt;<br />&lt;/location&gt;  </pre>
  <p>This example denies access to unauthenticated users and forces a redirect to the login page that is specified on the &lt;<strong>forms</strong>&gt; element. </p>
  <p>The following example shows how you can apply authorization to a specific file (Page.aspx). </p>
  <pre>&lt;location path="page.aspx"&gt;<br />    &lt;authorization&gt;<br />        ...<br />    &lt;/authorization&gt;<br />&lt;/location&gt;  </pre>
  <p>If necessary, you can apply different authorization rules for separate pages based on the identity, or more commonly, the role membership of the caller, by using multiple &lt;<strong>authorization</strong>&gt; elements within separate &lt;<strong>location</strong>&gt; elements. </p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1711762172" Content_Hash="-1102935153">
    <Metadata>
      <Id>086998bc-aaaa-4522-ac58-13980774d0aa</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Remote Logons Are Restricted</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Remote Logons Are Restricted</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>
      <div>Web Application</div>
    </li>
  </ul>
  <h1>What to Check For</h1>
  <p>Check to ensure that <strong>Access this computer from the network</strong> privilege is removed from the Everyone group to restrict who can log on to the server remotely.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-527768430" Content_Hash="-2115145468">
    <Metadata>
      <Id>0fa22cfd-0303-4b23-ad2c-1754ea368c7c</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>All Input Parameters Are Validated for Length, Range, Format, And Type</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>All Input Parameters Are Validated for Length, Range, Format, And Type</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that all input parameters from form fields, query strings, cookies, and HTTP headers are&amp;nbsp;validated.&amp;nbsp;Validation routines should check for length, range, format, and type. Validation should check first&amp;nbsp;for known valid and safe data and then for malicious, dangerous data.&amp;nbsp; </p>
  <h1>Why</h1>
  <p>An attacker passing malicious input can attempt SQL injection, cross-site scripting, and other injection attacks that aim to exploit your application's vulnerabilities. &amp;nbsp;</p>
  <h1>How to Check</h1>
  <p>To check for this problem, use the following steps:&amp;nbsp;</p>
  <ol>
    <li>
      <p>
        <strong>Find all input parameter sources.</strong> During design time identify all of the potential sources of input parameters to your application. Scour the source code to discover sources of input that may have been missed in the design.&amp;nbsp; Compile a list that you can use in the following steps. The most common sources are:</p>
    </li>
    <ul>
      <li>Form Fields </li>
      <li>Query Strings </li>
      <li>Cookies </li>
      <li>HTTP Headers</li>
    </ul>
    <li>
      <p>
        <strong>Trace data from source to sink.</strong> Trace each of source of input through your application until you find its ultimate destination.&amp;nbsp; The final sink may be in memory, on the hard drive, sent over the network or stored in a database.&amp;nbsp; </p>
    </li>
    <li>
      <p>
        <strong>Identify validation routines.</strong> Each input source should have a data validation routine associated with it.&amp;nbsp; Ideally the validation will occur as soon after the input reaches your application as possible.&amp;nbsp; Shared validation routines are better than creating many spread throughout your code base, check for consolidation of routines to aid testing and reduce the chance of one-off bugs.&amp;nbsp; If an input source does not have a validation routine associated with it, flag it for fixing.</p>
    </li>
    <li>
      <p>
        <strong>Ensure quality of validation routines.</strong> Validation routines&amp;nbsp;should check for length, range, format, and type. Validation should check first&amp;nbsp;for known valid and safe data and then for malicious, dangerous data.&amp;nbsp;Do not rely on filtering out all malicious data, it is too easy to miss something. Do not rely on client-side validation alone as it can be easily bypassed.</p>
    </li>
  </ol>
  <h1>How to Fix</h1>
  <p>Check for known good data and constrain input by validating it for type, length, format, and range.&amp;nbsp; For Web form applications that obtain input through server controls, use the ASP.NET validator controls, such as the RegularExpressionValidator, RangeValidator, and CustomValidator, to validate and constrain input.&amp;nbsp; Check all numeric fields for type and range. If you are not using server controls, you can use regular expressions and the Regex class, and you can validate numeric ranges by converting the input value to an integer or double and then performing a range check.&amp;nbsp; Validate your input against the least permissive expression possible that will accept all the input you expect for that field.&amp;nbsp; If you know that the field will have certain internal structure, check for it.&amp;nbsp; If your input has an internal checksum, like a credit card number, check that too. </p>
  <p>Most Web applications accept input from various sources, including HTML controls, server controls, query strings, and cookies.&amp;nbsp; Validate input from all of these sources to help prevent injection attacks.&amp;nbsp; Use regular expressions to help validate input.&amp;nbsp; The following example shows how to use the Regex class. </p>
  <pre>using System.Text.RegularExpressions;<br />...
// Instance method:
Regex reg = new Regex(@"^[a-zA-Z'.\s]{1,40}$");<br />Response.Write(reg.IsMatch(Request.QueryString["Name"]));<br />// Static method:<br />if (!Regex.IsMatch(Request.QueryString["Name"],@"^[a-zA-Z'.\s]{1,40}$"))<br />{<br />   // Name does not match expression<br />}</pre>
  <p>If you cannot cache your regular expression for frequent use, you should use the static IsMatch method where possible for performance reasons, to avoid unnecessary object creation. </p>
  <p>Remember that validating input does not remove the need to format output, parameterize queries, or otherwise handle user input carefully. </p>
  <h1>Problem Example</h1>
  <p>An ASP.NET application contains an order form for a web store which has several fields, specifically, a name, address, phone number, item number, and quantity.&amp;nbsp; Each item is simply added to the database, with any typecasting handled by the database.&amp;nbsp; While casting to the appropriate type helps a little, it happens too late to prevent SQL injection issues.&amp;nbsp; Furthermore, there are no guarantees about the quality of the data. </p>
  <h1>Solution Example</h1>
  <p>An ASP.NET application contains an order for a web store. Each of the form's fields are validated, giving stronger guarantees about the data gathered.&amp;nbsp; The phone number&amp;nbsp;is validated as a string of ten digits (after stripping all non-numeric characters), or a variable number of digits beginning with the character '+' if international numbers are allowed.&amp;nbsp; </p>
  <p>Validating a name, address, and item number can all be a bit more complicated.&amp;nbsp; The first order of business is determining the legal character set for each case.&amp;nbsp; For names, spaces, upper and lower case letters (including the accented forms for your current codepage), and possible numbers and periods are enough.&amp;nbsp; Addresses need to add commas, hyphens, and number signs, at a minimum.&amp;nbsp; Validating item numbers may be as simple as casting to an integer and checking that the result is in the right range, or it may mean a more complicated regular expression that checks for internal formatting in a string. </p>
  <p>The last, optional step of data validation is to ensure that the data refers to a valid things.&amp;nbsp; The data should be validated for format first, especially as further checks may require database queries.&amp;nbsp; Item numbers are an obvious thing to check for existence in the DB, and this would normally happen as part of the stored procedure which creates a new order, but names, addresses, and phone numbers can be similarly checked, some times.&amp;nbsp; For example, if the address field is broken up into components, state or province information, zip/post codes, and city names, at a minimum, can all be validated against existing lists.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-847166945" Content_Hash="-62162132">
    <Metadata>
      <Id>1494df6a-b049-42ae-bc76-8dbb4b026297</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Re-authentication Is Enforced When Executing Critical Functionality</Title>
      <Category>Authentication</Category>
      <Phase>Implementation</Phase>
      <Technology>Java</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Re-authentication Is Enforced When Executing Critical Functionality</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure your application forces the user to re-authenticate when executing security-critical functionality including, but not limited to change of password, account modifications and critical transactions</p>
  <h1>Why</h1>
  <p>Forcing the user to re-authenticate verifies the user's decision to execute the given functionality and preserves the application's integrity in the event that a user's account has been compromised via session hijacking.</p>
  <h1>How to Check</h1>
  <ol>
    <li>
      <p>
        <strong>Identify all critical functionality within your application. </strong>Locate all critical functionality within your application's code base. Common places to look include:</p>
      <ul>
        <li>Creating new accounts </li>
        <li>Changing passwords for existing users </li>
        <li>User transactions that are sensitive in nature </li>
        <li>Changing your application's global configuration </li>
        <li>Any operation affecting your application's overall wellness such as start-up and shutdown</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Ensure that your application has adopted a&amp;nbsp;re-authentication mechanism. </strong>Ensure that your application's design and requirements ask for re-authentication mechanisms. Common re-authentication mechanisms include:</p>
      <ul>
        <li>
          <strong>Current password:</strong> The user uses their current password to confirm the identity. This technique ensures that the given user is aware of the action to be performed and holds responsibility for executing it. </li>
        <li>
          <strong>CAPTCHA:</strong> CAPTCHA is a mechanism where alpha-numeric codes are embedded into displayed pictures. Forcing the user to confirm the embedded code ensures that the application is interacting with a human. If your application uses a CAPTCHA, ensure that the CAPTCHA generating software you are using is secure.</li>
        <li>
          <strong>2nd Factor:</strong> If your application supports a second factor of authentication such as a token, this could play a role in the re-authentication scheme.</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Verify that re-authentication is enforced. </strong>Ensure that the re-authentication procedures are positioned properly throughout your application's critical functionality. Verify that re-authentication is performed immediately upon entering a critical component. Example:</p>
      <blockquote>
        <pre>public boolean changePassword(String user, char[] oldPass, char[] newPass)<br />{<br />      // The application forces re-authentication<br />      if(!validateUser(user, oldPass))<br />      {<br />            return false;<br />      }<br />      // Logic to critical functionality<br /> }  </pre>
      </blockquote>
    </li>
  </ol>
  <h1>How to Fix</h1>
  <p>Follow these steps when forcing re-authentication:</p>
  <ol>
    <li>
      <p>
        <strong>Identify critical functionality.</strong> Evaluate your application's design and requirements and determine what parts and resources of your application are very important to your organization's business model or your application's security architecture. This could include activities such as financial transactions or resetting user passwords.</p>
    </li>
    <li>
      <p>
        <strong>Adopt re-authentication mechanism.</strong> Establish a mechanism that requires the user to verify their authenticity:</p>
      <ul>
        <li>
          <strong>Current password.</strong> The user uses their current password to confirm the identity. This technique ensures that the given user is aware of the action to be performed and holds responsibility for executing it. </li>
        <li>
          <strong>CAPTCHA.</strong> CAPTCHA are mechanisms designed to ensure that a human, not an automated script, is using the system. Using a CAPTCHA should be seen as a way of augmenting a password in this kind of situation, not a way of replacing it. Many CAPTCHA systems embed distorted letters or numbers into displayed images which the user must enter. There are a number of problems with many CAPTCHA systems, so they should not be relied on too heavily. First, many graphical CAPTCHAs can be trivially broken by optical character recognition systems, and ensuring that a CAPTCHA is sufficiently strong to be useful without having too high of a failure rate for real users is difficult. If CAPTCHAs are reused, the attacker can simply record the session IDs of CAPTCHAs with known values and replay them. CAPTCHAs can also be broken by using a man-in-the-middle technique where the image is saved and forwarded to another site controlled by the attacker. An unsuspecting user of that site solves the CAPTCHA and the attacker forwards the answer to the victim site. CAPTCHAs also create accessibility problems for users, as blind and sometimes even color-blind individuals can find them impossible. If you choose to implement a CAPTCHA, be aware of the trade-offs involved and ensure that the system you use is appropriately protected against the attacks you expect to see. </li>
        <li>
          <strong>2nd Factor.</strong> If your application supports a second factor of authentication such as a token, this could play a role in the re-authentication scheme.</li>
      </ul>
    </li>
    <li>
      <strong>Enforce the re-authentication mechanism.</strong> Once the critical functionality is identified and the re-authentication mechanism is established, enforce the re-authentication mechanism before all security-critical actions.</li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code allows a user to change their credentials. Unfortunately, the code enters the new credentials into the credentials repository without verifying that it is the actual user changing the credentials.</p>
  <pre>public boolean changePassword(String user, char[] newPass)<br />{<br />       // The application fails to re-authenticate the user<br />       // Verify that new password meets password requirements<br />       // Update the credential store with the new password<br />}</pre>
  <h1>Solution Example</h1>
  <p>The following code allows a user to change their credentials. Before entering the new credentials into the credentials repository, the code verifies that it is the actual user changing the credentials.</p>
  <pre>public boolean changePassword(String user, char[] oldPass, char[] newPass)<br />{<br />      // The application forces re-authentication<br />      if(!validateUser(user, oldPass))<br />      {<br />            return false;<br />      }<br />      // Verify that new password meets password requirements<br />      // Update the credential store with the new password<br />}</pre>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-324697249" Content_Hash="1129146907">
    <Metadata>
      <Id>1c6916b0-53e4-45a1-804a-0ab1173b3b6b</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Type Safe SQL Parameters Are Used</Title>
      <Category>Data Access</Category>
      <Phase>Implementation</Phase>
      <Technology>Java</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Type Safe SQL Parameters Are Used</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that type safe SQL parameters are used when performing database transactions.</p>
  <h1>Why</h1>
  <p>Attackers can use a SQL Injection Attack to manipulate the database in unforeseen ways. SQL injection allows an attacker to assume the credentials of the SQL account used to connect to the database, which may lead to arbitrary reading, writing, updating or deleting of data. In an improperly secured database, this can also lead to remote code execution through the use of certain stored procedures that allow for direct Operating System command injection.</p>
  <h1>How to Check</h1>
  <p>To check if parameterized queries are used:</p>
  <ol>
    <li>
      <p>
        <strong>Identify all database transactions. </strong>Locate all SQL queries throughout your application. Example:</p>
      <blockquote>
        <pre>"select user from myappUsers where user = ? and pass = ?;"</pre>
      </blockquote>
    </li>
    <li>
      <p>
        <strong>Verify that each transaction uses Stored Procedures. </strong>Verify that your application interacts with the backend database through the use of Stored Procedures. Ensure that all SQL queries look like:</p>
      <blockquote>
        <pre>Connection.prepareStatement("exec PlaceOrder(?, ?, ?);");</pre>
      </blockquote>
      <p>and not like:</p>
      <blockquote>
        <pre>Connection.prepareStatement("insert into PendingPurchases "<br />                          + "(customer, item, quantity) values (?, ?, ?);");</pre>
      </blockquote>
    </li>
    <li>
      <p>
        <strong>Verify that each transaction uses Prepared Statement. </strong>Verify that each SQL query is executed through the use of a <i>PreparedStatement </i>object. Example:</p>
      <blockquote>
        <pre>Connection cn = MyApp.getDBConnection();<br />PreparedStatement st = cn.prepareStatement("select user from myappUsers where user = ? and pass = ?;");<br />st.setString(1, user);<br />st.setString(2, new String(passDigest));<br />ResultSet rs = st.executeQuery();</pre>
      </blockquote>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code validates the user based on a given username and password. It hashes the password with a random salt. Then it compares the username and the produced hash against the data stored in the backend database. Unfortunately, the SQL query is dynamically crafted by using the user's input. If there is no proper input validation, an attacker can access the application's database server through the use of SQL injection.</p>
  <blockquote>
    <pre>public boolean validateUser(String user, char[] pass)<br />{<br />      // Hash the credentials before querying the credential store<br />      // The application crafts the SQL query based on user's input<br />      Connection cn = MyApp.getDBConnection();<br />      Statement st = cn.createStatement();<br />      String query = "select login_attempts from myappUsers where user = \""<br />                    + user + "\" and pass = \"" + passHash + "\";";<br />      ResultSet rs = st.executeQuery(query);<br />      // Execute the rest of the authentication steps<br />}</pre>
  </blockquote>
  <h1>Additional Resources</h1>
  <ul>
    <li>To learn more about using parameterized queries in Java, see: <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/sql/PreparedStatement.html">PreparedStatement</a>. </li>
    <li>For more information about preventing SQL injection attacks, visit: <a href="http://www.owasp.org/index.php/Reviewing_Code_for_SQL_Injection">Reviewing Code for SQL Injection</a>&amp;nbsp;from OWASP.</li>
  </ul>
  <ul>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="99910540" Content_Hash="1595091553">
    <Metadata>
      <Id>1da54486-ddf2-488b-a0c8-4e4c67b96b21</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>If Input File Names Are Required, They Are Well Formed And Are Verifiably Valid Within the Application Context</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>If Input File Names Are Required, They Are Well Formed And Are Verifiably Valid Within the Application Context</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that user-supplied filenames or paths are in the correct format and point to a valid location in the context of your application. </p>
  <h1>Why</h1>
  <p>Malicious file input can be used to coerce your application into accessing arbitrary files and resources. </p>
  <h1>How to Check</h1>
  <p>If your application accepts user supplied files or paths, ensure that they are passed through a validation routine. The validation routine should not only check for appropriate format, but also ensure that the file name is legitimate for your application.</p>
  <p>For more information on input validation, see the related checklist item All Input is Validated for Length, Range, Format, and Type, linked below. </p>
  <h1>How to Fix</h1>
  <p>Use the following steps to fix this issue:</p>
  <ol>
    <li>
      <p>
        <strong>Check File Names. </strong>Ensure that file paths only refer to files within your application's virtual directory hierarchy if that is appropriate. When checking file names, obtain the full name of the file by using the <strong>System.IO.Path.GetFullPath</strong> method. </p>
    </li>
    <li>
      <p>
        <strong>Check File Paths. </strong>If you use <strong>MapPath</strong> to map a supplied virtual path to a physical path on the server, use the overloaded <strong>Request.MapPath</strong> method that accepts a <strong>bool</strong> parameter so that you can prevent cross-application mapping. The following code example shows this technique:</p>
    </li>
  </ol>
  <blockquote>
    <pre>try<br />{<br /> string mappedPath = Request.MapPath( inputPath.Text,<br />                                       Request.ApplicationPath, false);<br />}<br />catch (HttpException)<br />{<br /> // Cross-application mapping attempted <br />}</pre>
    <p>The final <strong>false</strong> parameter prevents cross-application mapping. This means that a user cannot successfully supply a path that contains ".." to traverse outside of your application's virtual directory hierarchy. Any attempt to do this results in an exception of type <strong>HttpException</strong>.</p>
  </blockquote>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="701561458" Content_Hash="-490772209">
    <Metadata>
      <Id>1df0a6e0-3eb7-4d43-a207-6164f08d3421</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Users And Administrators Do Not Share Accounts</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology> Any</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Users And Administrators Do Not Share Accounts</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Check to ensure that no shared accounts are created for use by multiple individuals. Make sure that authorized individuals&amp;nbsp;use their own accounts.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-386254918" Content_Hash="-1260932905">
    <Metadata>
      <Id>1e909001-bc62-468c-ba18-f4aa03844dd1</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Strong Account And Password Policies Are Enforced for the Server</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Strong Account And Password Policies Are Enforced for the Server</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Check to ensure that strong account and password policies are enforced for the server.</p>
  <h1>How to Fix</h1>
  <p>To counter password guessing and brute force dictionary attacks on your application, apply strong password policies. To enforce a strong password policy:
</p>
  <ul>
    <li>
      <strong>Set</strong>
      <strong>password length and complexity</strong>. Require strong passwords to reduce the threat of password guessing attacks or dictionary attacks. Strong passwords are eight or more characters and must include both alphabetical and
 numeric characters. </li>
    <li>
      <strong>Set</strong>
      <strong>password expiration</strong>. Passwords that expire regularly reduce the likelihood that an old password can be used for unauthorized access. Frequency of expiration is usually guided by a company's security policy.
</li>
  </ul>
  <p>Table&amp;nbsp;below shows the default and recommended password policy settings.</p>
  <p>
    <strong>Password Policy Default and Recommended Settings</strong>
  </p>
  <div>
    <table>
      <tbody>
        <tr>
          <th>Password Policy</th>
          <th>Default Setting</th>
          <th>Recommended Minimum Setting</th>
        </tr>
        <tr>
          <td>Enforce password history</td>
          <td>1 password remembered.</td>
          <td>24 passwords remembered.</td>
        </tr>
        <tr>
          <td>Maximum password age</td>
          <td>42 days</td>
          <td>42 days</td>
        </tr>
        <tr>
          <td>Minimum password age</td>
          <td>0 days</td>
          <td>2 days</td>
        </tr>
        <tr>
          <td>Minimum password length</td>
          <td>0 characters</td>
          <td>8 characters</td>
        </tr>
        <tr>
          <td>Passwords must meet complexity requirement.</td>
          <td>Disabled</td>
          <td>Enabled</td>
        </tr>
        <tr>
          <td>Store password using reversible encryption for all users in the domain.</td>
          <td>Disabled</td>
          <td>Disabled</td>
        </tr>
      </tbody>
    </table>
  </div>
  <p>In addition, record failed logon attempts so that you can detect and trace malicious behavior.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information, see "Step 10. SQL Server Security" in Chapter 18, "<a href="http://msdn2.microsoft.com/en-us/library/aa302434.aspx">Securing Your Database Server</a>."</li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="286734119" Content_Hash="-408039722">
    <Metadata>
      <Id>21887be9-a2c6-4d6d-89e9-ea8c20daaf4e</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Authentication Cookies Are Not Persisted</Title>
      <Category>Authentication</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Authentication Cookies Are Not Persisted</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that&amp;nbsp;authentication cookies are not stored in the user's profile.</p>
  <h1>Why</h1>
  <p>Stored authentication cookies&amp;nbsp;can be stolen if an attacker gets physical access to the user's computer. </p>
  <h1>How to Fix</h1>
  <p>To ensure a non-persistent cookie, set the <strong>DisplayRememberMe</strong> property of the <strong>Login</strong> control to <strong>false</strong>.</p>
  <p>If you are not using the login controls, you can specify a non-persistent cookie when you call either the <strong>RedirectFromLoginPage</strong> or <strong>SetAuthCookie</strong> methods of the <strong>FormsAuthentication</strong> class having validated the user's credentials, as shown here:</p>
  <pre>public void Login_Click(object sender, EventArgs e)</pre>
  <pre>{<br />   // Is the user valid?<br />   if (Membership.ValidateUser(userName.Text, password.Text))<br />   {<br />        // Parameter two set to false indicates non-persistent cookie<br />        FormsAuthentication.RedirectFromLoginPage(username.Text, false);<br />    }<br />    else<br />    {<br />        Status.Text = "Invalid credentials. Please try again.";<br />    }<br />}</pre>
  <br />
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="270862001" Content_Hash="1698699814">
    <Metadata>
      <Id>25e29df6-d0ec-42b7-982d-b97331e549a9</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Type Safe SQL Parameters Are Used</Title>
      <Category>Data Access</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Type Safe SQL Parameters Are Used</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>1</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that type-safe parameters are used when constructing dynamic SQL queries or when passing parameters to stored procedures.</p>
  <h1>Why</h1>
  <p>If you use the Parameters collection, SQL treats the input is as a literal value rather then as executable code. The Parameters collection can be used to enforce type and length constraints on input data. Values outside of the range trigger an exception.</p>
  <p>If type-safe SQL parameters are not used, attackers might be able to execute injection attacks that are embedded in the unfiltered input.</p>
  <h1>How to Check</h1>
  <p>To check if parameterized queries are used:</p>
  <ol>
    <li>
      <p>
        <strong>Identify all database transactions. </strong>Locate all SQL queries throughout your application. Example:</p>
      <pre>"select user from myappUsers where user = ? and pass = ?;"</pre>
    </li>
    <li>
      <p>
        <strong>Verify that each transaction uses Stored Procedures where possible. </strong>Verify that your application interacts with the backend database through the use of Stored Procedures. Ensure that SQL queries look like:</p>
      <pre>SqlCommand myCommand = new SqlCommand("sp_SelectUser", myConnection);<br />//Specify our command is a stored procedure<br />myCommand.CommandType = CommandType.StoredProcedure; </pre>
      <p>and not like:</p>
      <pre>string SQLstr = "SELECT * from users<br />   WHERE username = '" + un.Text + "'<br />   AND password = '" + pass.Text + "'";<br />SqlCommand myCommand = new SqlCommand(SQLstr, myConnection);</pre>
    </li>
    <li>
      <p>
        <strong>Verify that type-safe parameters are used. </strong>Verify that type-safe parameters are used in the dynamic SQL queries or stored procedures by using the SqlParameterCollection class. Example:</p>
      <pre>using (SqlConnection connection = new SqlConnection(connectionString))<br />{<br />  connection.Open();<br />  SqlDataAdapter myDataAdapter = new SqlDataAdapter(<br />         "SELECT * from users WHERE username = '@uname' AND password = '@pwd'", connection);<br />  myCommand.SelectCommand.Parameters.Add("@uname", SqlDbType.VarChar, 24);<br />  myCommand.SelectCommand.Parameters.Add("@pwd", SqlDbType.VarChar, 16);<br />  myCommand.SelectCommand.Parameters["@uname"].Value = un.Text;<br />  myCommand.SelectCommand.Parameters["@pwd"].Value = pass.Text;<br />  myDataAdapter.Fill(userDataset);  ...  connection.Close();<br />}</pre>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>Consider an ASP.NET application that handles employee payroll functionality for a small company. One of the pages requires retrieving an employee record from a table based on a username and password supplied via a login dialog. The developer of the application created an SQL SELECT query to accomplish said task:</p>
  <pre>using (SqlConnection myConnection = new SqlConnection(connectionString))<br />{<br />  connection.Open();<br />  string SQLstr = "SELECT * from users WHERE username = '" + un.Text + "'<br />   AND password = '" + pass.Text + "'";<br />  SqlCommand myCommand = new SqlCommand(SQLstr, myConnection);<br />  SqlDataAdapter myDataAdapter = new SqlDataAdapter(myCommand);<br />  myCommand.Connection.Open();<br />  SqlDataReader myReader = myCommand.ExecuteReader();<br />  ...<br />}</pre>
  <p>In the preceding example, the SELECT statement will work as expected, assuming that the input is perfectly constrained. However, what happens if a user enters unexpected input such as '1234' for a password, and this for a username:</p>
  <pre>mjones' AND 1=1; -- </pre>
  <p>This will result in the SQL statement being executed at the database level:</p>
  <pre>SELECT * from users WHERE username = 'mjones' AND 1=1; --'  AND password = '1234';</pre>
  <p>This will allow the person entering data into the dialog box to select the account details of mjones without the correct password.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>To learn more about SQL injection, see: <a href="http://en.wikipedia.org/wiki/SQL_injection">SQL Injection</a> in Wikipedia. </li>
    <li>To learn more about countering SQL injection in ASP.NET, visit: <a href="http://msdn2.microsoft.com/en-us/library/ms998271.aspx">How To: Protect From SQL Injection in ASP.NET</a>. </li>
    <li>To learn more about countering injection-based attacks in ASP.NET, see: <a href="http://msdn2.microsoft.com/en-us/library/bb355989.aspx">How To: Protect From Injection Attacks in ASP.NET</a>.</li>
  </ul>
  <ul>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1459080490" Content_Hash="-672365727">
    <Metadata>
      <Id>26ca24fa-2c72-4482-80e3-7de6e8eb013d</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Communication Links Are Encrypted</Title>
      <Category>Communication Security</Category>
      <Phase>Implementation</Phase>
      <Technology>Java</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Communication Links Are Encrypted</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that the communication channels are encrypted when interacting with other software across the network.</p>
  <h1>Why</h1>
  <p>Encrypting the communication links allows the application to preserve confidentiality and integrity of the transmitted data.</p>
  <h1>How to Check</h1>
  <p>Use the following steps to ensure that your application's communication links are encrypted:</p>
  <ol>
    <li>
      <p>
        <strong>Identify the connections used for transmitting sensitive data. </strong>Identify the sensitive data that is sent over the network and enumerate&amp;nbsp;the respective connections that are used for such communication.</p>
    </li>
    <li>
      <p>
        <strong>Verify that connections are secured. </strong>Using a network sniffer, verify that your application utilizes either IPSec or TLS/SSL then check the following:</p>
      <ul>
        <li>
          <p>
            <strong>IPSec</strong>:&amp;nbsp;If your application uses IPSec, verify that&amp;nbsp;all packets from your sniffed traffic between the specified hosts contain an Authentication Header (AH) and Encapsulating Security Payload (ESP) fields after the IP headers.</p>
        </li>
        <li>
          <p>
            <strong>TLS/SSL</strong>:&amp;nbsp;If your application uses TLS/SSL, verify that&amp;nbsp;your sniffed traffic between the specified hosts contains an SSL handshake. Keep in mind the following considerations when verifying your application's use of SSL:</p>
          <ul>
            <li>
              <p>
                <strong>Certificate Validity</strong>: Verify that your application's SSL certificate has not reached its expiration date. </p>
            </li>
            <li>
              <p>
                <strong>Certificate Version</strong>: Verify that your application uses an SSL version 3.0 certificate.</p>
            </li>
            <li>
              <p>
                <strong>Domain Name</strong>: Verify that the domain name for your application's administrative interface is the same as the domain name listed in the SSL certificate.</p>
            </li>
            <li>
              <p>
                <strong>Chain of Trust</strong>: Verify that your application's users can verify your application's SSL certificate based on the root certificates that are stored in their browsers. If your application uses self-signed SSL certificates, ensure that your organization's root certificate is securely imported into the users' browsers.</p>
            </li>
            <li>
              <p>
                <strong>Server Configuration</strong>: Verify that your application's environment has enabled HTTPS. Verify that transactions of sensitive nature are made over HTTPS connections. Check if your application's deployment descriptor (e.g. web.xml) has the <em>transport-guarantee</em> element set to <em>CONFIDENTIAL</em>:</p>
              <pre>&lt;security-constraint&gt;<br />  &lt;web-resource-collection&gt;<br />    &lt;web-resource-name&gt;AcctManager&lt;/web-resource-name&gt;<br />    &lt;url-pattern&gt;/acctmanager/*&lt;/url-pattern&gt;<br />  &lt;/web-resource-collection&gt;<br />  &lt;user-data-constraint&gt;<br />    &lt;transport-guarantee&gt;<strong>CONFIDENTIAL</strong>&lt;/transport-guarantee&gt;<br />  &lt;/user-data-constraint&gt;<br />  &lt;auth-constraint&gt;<br />    &lt;role-name&gt;manager&lt;/role-name&gt;<br />  &lt;/auth-constraint&gt;<br />&lt;/security-constraint&gt;</pre>
            </li>
          </ul>
        </li>
      </ul>
    </li>
  </ol>
  <h1>How to Fix</h1>
  <p>To encrypt the communication links:</p>
  <ol>
    <li>
      <p>
        <strong>Identify the connections used for transmitting sensitive data. </strong>Enumerate all connections between the different servers, with other servers or with the application. Identify the sensitive data that is sent over the network and the respective connections that are used for such communication.</p>
    </li>
    <li>
      <p>
        <strong>Choose the appropriate encryption mechanism. </strong>Depending on the infrastructure, you may consider using IPSec or TLS/SSL.</p>
      <ul>
        <li>
          <strong>IPSec:</strong> IPSec is used when the encryption needs to be applied across all involved parties. Since IPSec is designed to secure connections between static hosts that are "always on," use IPSec to secure the network connections between your application's servers. Due to its nature, IPSec requires low level support; therefore, your application would need support from the operating system or a JNI component to manage it. </li>
        <li>
          <strong>TLS/SSL:</strong> TLS/SSL provides a granular protection which&amp;nbsp;allows only&amp;nbsp;the traffic containing sensitive data to be encrypted. Because TLS/SSL has a certificate based design, it allows the protection of data transferred between mobile hosts. Use TLS/SSL to secure the communication channel between your application and its users.<br /><br />While Java provides APIs for handling SSL encrypted traffic, it is recommended to follow the manuals associated with the&amp;nbsp;third party software that&amp;nbsp;is being used. For example, if your application connects to a database server, follow the database server's manual on setting up the encryption; if your application is web-oriented, follow the web server's documentation on setting up the SSL certificate. If your application uses SSL, ensure that you use SSL 3.0 and disable the cryptographically weak SSL 2.0 protocols.</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Apply the appropriate encryption mechanism. </strong>Apply the encryption mechanism of choice at the appropriate locations in the code. Such locations include all functionality that establishes a connection between your application and another entity.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code establishes a connection between&amp;nbsp;two servers. Unfortunately, the communication is not encrypted; therefore, it is possible for an attacker to eavesdrop on the connection.</p>
  <pre>String remoteHost = "server02.example.com";<br />int remotePort = "1337";<br /><br />Socket sock = new Socket(remoteHost, remotePort);<br />InputStreamReader isr = new InputStreamReader(sock.getInputStream());<br />BufferedReader input = new BufferedReader(isr);<br />PrintWriter output = new PrintWriter(sock.getOutputStream(), true);</pre>
  <h1>Solution Example</h1>
  <p>The following code establishes a connection between&amp;nbsp;two servers. Because the communication is encrypted, the confidentiality of the data in transit is preserved; therefore, it is impossible for an attacker to eavesdrop on the connection.</p>
  <pre>String remoteHost = "server02.example.com";<br />int remotePort = "1337";<br /><br />SSLSocketFactory sslSF = (SSLSocketFactory) SSLSocketFactory.getDefault();<br />SSLSocket sslSock = (SSLSocket) sslSF.createSocket(remoteHost, remotePort);<br /><br />InputStreamReader isr = new InputStreamReader(sslSock.getInputStream());<br />BufferedReader input = new BufferedReader(isr);<br />PrintWriter output = new PrintWriter(sslSocket.getOutputStream(), true);</pre>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="852522635" Content_Hash="1900765358">
    <Metadata>
      <Id>275e5831-738a-44de-997b-f79d97039027</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>All Output Data Is Encoded</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology>Java</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>All Output Data Is Encoded</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>1</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that all echoed input is first encoded.</p>
  <h1>Why</h1>
  <p>Encoding echoed input prevents injection attacks such as cross-site scripting.</p>
  <h1>How to Check</h1>
  <p>An application can take input via various&amp;nbsp;sources, such as a web interface, database, file system or other software running on the server, and then use that same input in various outputs. Use the following steps to establish a validation strategy:</p>
  <ol>
    <li>
      <p>
        <strong>Identify all sources of input. </strong>At design time identify all potential sources of input to your application. Once implemented, scour source code to discover sources of input that may have been missed in the design. Potential sources of input in a web application typically include:</p>
      <ul>
        <li>URL based parameters </li>
        <li>Form based parameters </li>
        <li>Hidden fields </li>
        <li>Cookies </li>
        <li>HTTP headers (Host, accept types, www authentication, cache settings, encodings, etc) </li>
        <li>Local filesystem </li>
        <li>Database </li>
        <li>Other services running on the system </li>
        <li>Javascript variables </li>
        <li>File upload and attributes (filename, size, data, etc) </li>
        <li>DNS results or host names </li>
        <li>External component call return values (COM, AJAX, ActiveX) </li>
      </ul>
      <p>Once you&amp;nbsp;have listed the sources of input your application&amp;nbsp;can use, look for all entry points. Good starting points are method parameters and assignment statements. For example: </p>
      <p>This method uses the <em>searchTerm</em> variable.</p>
      <pre>void aggregateData(PrintWriter out, String searchTerm)<br /> ...<br /><br />double[] rData = common.queryDBForIndex(searchTerm);</pre>
      <p>This assignment stores data from a <em>GET</em> request parameter named <em>index</em> and stores it in the string <em>searchTerm</em>. Ensure that this input is validated.</p>
      <pre>String searchTerm = request.getParameter("index");</pre>
      <p>This assignment uses the input that was gathered above to store more input from a database. Verify that <em>searchTerm</em> is validated before this use, and also ensure that <em>rData</em> is validated as another source of input.</p>
      <pre>double[] rData = common.queryDBForIndex(searchTerm);</pre>
    </li>
    <li>
      <p>
        <strong>Trace data from source to sink. </strong>Trace each source of input from the immediate source, through your application, to its final destination. The final sink may be in memory, on the hard drive, sent over the network or stored in a data store such as a database. Create a list of the input sources that are echoed back to the user through output - whether directly, through a file, in a URL or through a database or other intermediary source.</p>
      <p>Input used as output may be identified by the following:</p>
      <ul>
        <li>out.println() </li>
        <li>append() </li>
        <li>insert() </li>
        <li>write() </li>
        <li>Assignment operator (=) </li>
        <li>Increment and assignment operator (+=) </li>
        <li>Database write operations</li>
      </ul>
    </li>
    <li>
      <span>
        <p>
          <strong>Ensure input is properly encoded before being used as output</strong>. Each of the input sources identified above should have the input encoded properly before it is used as output. Encoding must be selected appropriately based upon how the output is returned to the client. Verify the context in which the output is used and ensure it is properly encoded. A couple example contexts are shown below (URL, HTML entity)</p>
      </span>
      <ul>
        <li>URL Encoding- <em>URLEncoder.encode(output)</em></li>
        <li>HTML Entity Encoding&amp;nbsp;- JSP HTML encoding: <em>&lt;c:out value="${output}" /&gt;</em></li>
        <li>
          <span>HTML Attribute Encoding</span>
        </li>
        <li>
          <span>JavaScript Encoding</span>
        </li>
        <li>
          <span>CSS Encoding</span>
        </li>
        <li>
          <span>DOM Encoding</span>
        </li>
      </ul>
      <span>
        <p>Beware that certain locations may require a mixed encoding, such as initially performing URL encoding, then performing JavaScript encoding. This depends entirely on the output context wherein the data is used, and requires knowledge of the parsing mechanisms of browsers. Some example encodings are below.</p>
      </span>
      <p />User URL provided: <pre>http://server/form?x=<strong>"&gt;&lt;SCRIPT&gt;alert('XSS');&lt;/SCRIPT&gt;</strong></pre><p>No encoding:</p><pre>&lt;form action="http://server/form?x=<strong>"&gt;&lt;SCRIPT&gt;alert('XSS');&lt;/SCRIPT&gt;</strong>"&gt;</pre><p>URL Encoding:</p><pre>&lt;form action="http://server/form%3Fx%3D<strong>%22%3E%3CSCRIPT%3Ealert%28%27XSS%27%29%3B%3C/SCRIPT%3E</strong>"&gt;</pre><p>HTML Encoding:</p><pre>&lt;form action="http://server/form?x=<strong>"&lt;&lt;SCRIPT&lt;alert('XSS');&lt;/SCRIPT&lt;</strong>"&gt;</pre></li>
  </ol>
  <h1>How to Fix</h1>
  <p>Encoding the echoed user input prevents injection attacks such as cross-site scripting. Use the following steps to ensure all echoed input is encoded:</p>
  <ol>
    <li>
      <p>
        <strong>Identify all echoed input. </strong>Locate all places inside your application where user-supplied data will be returned to the client. Such data can be of a reflective or persistent nature:</p>
      <ul>
        <li>
          <strong>Reflective</strong>: In a reflective setting, the input is immediately returned to the client. For example, search engines present the searched query when displaying the results. </li>
        <li>
          <strong>Persistent</strong>: In a persistent setting, the input is stored and returned to the client when retrieved from the database. For example, message boards store the users' posts inside a database and return them when a given topic is viewed.</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Determine the&amp;nbsp;type of encoding. </strong>After identifying all echoed input, determine how the input is returned to client. Data is said to be in a HTML context when that data is rendered as a part of a HTML document and is understood by the browser to be HTML. There are other contexts available to Web Applications, such as JavaScript context, CSS context, etc. Data is said to be in a JavaScript context when it is included in JavaScript code and is interpreted as JavaScript by the browser, and so on. Data has to be encoded differently for different contexts to prevent Cross-Site Scripting vulnerabilities. The differences of encoding arise from the fact that different contexts have different special symbols and keywords. Output encoding routines have to be designed with the understanding of the context of the output in mind.</p>
      <ul>
        <li>
          <p>
            <strong>URL encoding</strong>: URL encoding allows your application to maintain the original URL, yet display it to the user in a non-malicious way. Because HTTP headers allow a substitution schema, all characters/symbols are preserved by displaying their ASCII codes instead of the actual character/symbol. For example, <em>&lt;</em> is represented by <em>%3C</em> where <em>3C</em> is the ASCII value for <em>&lt;</em>:</p>
          <pre>String encodedUrl = URLEncoder.encode(url);</pre>
        </li>
        <li>
          <p>
            <strong>HTML encoding</strong>: HTML encoding is used when the echoed input is returned as regular text or HTML content. Input should be encoded by substituting certain characters with their respective HTML entities.</p>
          <blockquote>
          </blockquote>
        </li>
        <li>
          <p>
            <strong>HTML Attribute Encoding</strong>: HTML Attribute encoding is used to encode dynamic data that is output in an attribute of an HTML tag, except&amp;nbsp;URL, CSS, and JavaScript event handler attributes.</p>
        </li>
        <li>
          <p>
            <strong>JavaScript Encoding</strong>: JavaScript encoding is used to encode dynamic data that is output into the JavaScript context, including certain event handlers in HTML tags.</p>
        </li>
        <li>
          <p>
            <strong>CSS Encoding</strong>: CSS encoding is used to encode dynamic data that is output into the CSS context.</p>
        </li>
        <li>
          <p>
            <strong>DOM Encoding</strong>: DOM encoding is used to encode dynamic data that is used in situations where the DOM is involved. These instances are more complicated and often involve multiple output contexts, which necessitates chaining in many circumstances.</p>
        </li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Apply the encoding. </strong>After identifying the echoed input and determining the appropriate encoding method, apply the encoding before the input is returned to the client. There are different encoding libraries available. Different libraries have different capabilities and weaknesses. Please, refer to the vendor's documentation for each potential encoding library.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code produces a data analysis based on a financial index. Because it does not HTML encode the echoed input, the application is vulnerable to reflective cross-site scripting.</p>
  <pre>import java.io.*;<br />import java.util.*;<br />import java.lang.*;<br />import javax.servlet.*;<br />import javax.servlet.http.*;<br />import java.util.regex.*;<br /><br /><br />public final class DataAggregator extends HttpServlet<br />{<br />      public void doGet(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter("index");<br /><br />            try<br />            {<br />                  if (validateSearchTerm(searchTerm))<br />                  {<br />                        String retString;<br /><br />                        retString = "The queried index \"";<br /><br />                        // The application does not HTML encode <br />                        //     the returned input<br />                        retString += searchTerm;<br /><br />                        retString += "\" results in:&lt;br&gt; ";<br />                        out.println(retString);<br />                        common.aggregateData(out, searchTerm);<br />                  }<br />                  else<br />                  {<br />                        // Add appropriate logging and exception handling<br />                        // mechanisms. Consult the Exception Handling and<br />                        // Logging sections<br />                        out.println("Unable to process at the moment."<br />                                 + " Please try again later.");<br />                  }<br />            }<br /><br />            catch (Exception e)<br />            {<br />                  // Add the appropriate logging and exception handling<br />                  // mechanisms. Consult the Exception Handling<br />                  // and Logging sections<br /><br />                  out.println("Unable to process at the moment."<br />                           + " Please try again later.");<br />            }<br /><br />            out.flush();<br />            out.close();<br />      }<br />}</pre>
  <h1>Solution Example</h1>
  <p>The following code produces a data analysis based on a financial index. Because the code HTML encodes the echoed input, it is impossible for an attacker to exploit the application via reflective cross-site scripting.</p>
  <pre>import java.io.*;<br />import java.util.*;<br />import java.lang.*;<br />import javax.servlet.*;<br />import javax.servlet.http.*;<br />import java.util.regex.*;<br /><br />public final class DataAggregator extends HttpServlet<br />{<br />      public void doGet(HttpServletRequest request,HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter("index");<br /><br />            try<br />            {<br />                  if (validateSearchTerm(searchTerm))<br />                  {<br />                        String retString;<br /><br />                        retString = "The queried index \"";<br /><br />                        // The application HTML encodes the echoed input<br />                        retString += encodeHtml(searchTerm);<br />                        retString += "\" results in :&lt;br&gt; ";<br />                        out.println(retString);<br />                        common.aggregateData(out, searchTerm);<br />                  }<br />                  else<br />                  {<br />                        // Add the appropriate logging and exception<br />                        // handling mechanisms. Consult the Exception<br />                        // Handling and Logging sections<br />                        out.println("Unable to process at the moment."<br />                                + " Please try again later.");<br />                  }<br />            }<br />            catch (Exception e)<br />            {<br />                  // Add the appropriate logging and exception<br />                  // handling mechanisms. Consult the Exception<br />                  // Handling and Logging sections<br />                  out.println("Unable to process at the moment."<br />                           + " Please try again later.");<br />            }<br /><br />            out.flush();<br />            out.close();<br />      }<br /><br />      public String encodeHtml(String input)<br />      {<br />            StringBuffer out = new StringBuffer();<br /><br />            for (int i = 0; i &lt; input.length(); i++)<br />            {<br />                  char c = input.charAt(i);<br />                  if (c == '&lt;')<br />                  {<br />                        out.append("&lt;");<br />                  }<br />                  else if (c == '&gt;')<br />                  {<br />                        out.append("&gt;");<br />                  }<br />                  else if (c == '\"')<br />                  {<br />                        out.append(""");<br />                  }<br />                  else if (c == '\'')<br />                  {<br />                        out.append(""");<br />                  }<br />                  else if (c == '&amp;')<br />                  {<br />                        out.append("&amp;");<br />                  }<br />                  else if (c &gt; 0x20 &amp;&amp; c &lt; 0x126)<br />                  {<br />                        out.append(c);<br />                  }<br />                  else<br />                  {<br />                        out.append("&amp;#" + (int)c + ";");<br />                  }<br />            }<br />             return out.toString();<br />      }<br />}</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>To learn more about cross-site scripting, including a library to help defend against cross-site scripting attacks, see: <a href="http://www-128.ibm.com/developerworks/tivoli/library/s-csscript/">Cross-site scripting</a>. </li>
    <li>To learn more about cross-site scripting, see: <a href="http://today.java.net/pub/a/today/2005/09/20/handling-web-app-input.html">Handling Java Web Application Input, Part 2</a>. </li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1628891380" Content_Hash="-59967311">
    <Metadata>
      <Id>2baffcad-75d4-44c7-8bdb-efcfa424ef8b</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Directory Browsing Is Disabled</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology>Java</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Directory Browsing Is Disabled</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that your application has directory browsing disabled.</p>
  <h1>Why</h1>
  <p>Directory browsing allows an attacker to browse your application's directory structure in search of unprotected files and components.</p>
  <h1>How to Check</h1>
  <p>Use the following steps to ensure that your application has directory browsing disabled:</p>
  <ol>
    <li>
      <p>
        <strong>Identify if directory browsing is enabled. </strong>Navigate to your application's directories. Identify if your application's server returns the directory contents and not an HTTP error message.</p>
    </li>
    <li>
      <p>
        <strong>Locate the default servlet's configuration. </strong>Open your application's deployment descriptor (e.g. web.xml) and locate the default servlet's configuration. If the default servlet is present, ensure it is mapped to the root directory of your application. Example: </p>
      <pre>&lt;servlet&gt;<br />      &lt;servlet-name&gt;default_servlet&lt;/servlet-name&gt;<br />      &lt;servlet-class&gt;<br />            org.apache.catalina.servlets.DefaultServlet<br />      &lt;/servlet-class&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt;<br />      &lt;servlet-name&gt;default_servlet&lt;/servlet-name&gt;<br />      &lt;url-pattern&gt;/&lt;/url-pattern&gt;<br />&lt;/servlet-mapping&gt;</pre>
    </li>
    <li>
      <p>
        <strong>Ensure directory browsing is disabled in the default servlet's configuration. </strong>Verify that the default servlet is initialized to disable directory browsing by setting&amp;nbsp;the parameter <em>listings</em> to <em>false</em>.</p>
      <pre>&lt;servlet&gt;<br />      &lt;servlet-name&gt;default_servlet&lt;/servlet-name&gt;<br />      &lt;servlet-class&gt;<br />            org.apache.catalina.servlets.DefaultServlet<br />      &lt;/servlet-class&gt;<br /><strong>      &lt;init-param&gt;<br />            &lt;param-name&gt;listings&lt;/param-name&gt;<br />            &lt;param-value&gt;false&lt;/param-value&gt;<br />      &lt;/init-param&gt;<br /></strong>&lt;/servlet&gt;</pre>
    </li>
    <li>
      <p>
        <strong>Ensure your JSP files are located under the WEB-INF/ directory of your web application.</strong> This ensures that an attacker cannot directly access those pages, however your application can perform internal forwards to these pages.</p>
    </li>
  </ol>
  <h1>How to Fix</h1>
  <p>Use the following steps to successfully disable directory browsing:</p>
  <ol>
    <li>
      <p>
        <strong>Identify if directory browsing is enabled. </strong>Navigate to your application's directories. Identify&amp;nbsp;whether your application's server correctly returns an HTTP error message. If it incorrectly returns&amp;nbsp;the directory contents, continue with the following steps.</p>
    </li>
    <li>
      <p>
        <strong>Locate the default servlet's configuration. </strong>Open your application's deployment descriptor (e.g. web.xml), and locate the default servlet's configuration. If the default servlet is present, it is mapped to the root directory of your application. Example: </p>
      <pre>&lt;servlet&gt;<br />      &lt;servlet-name&gt;default_servlet&lt;/servlet-name&gt;<br />      &lt;servlet-class&gt;<br />            org.apache.catalina.servlets.DefaultServlet<br />      &lt;/servlet-class&gt;<br />&lt;/servlet&gt;<br />&lt;servlet-mapping&gt;<br />      &lt;servlet-name&gt;default_servlet&lt;/servlet-name&gt;<br />      &lt;url-pattern&gt;/&lt;/url-pattern&gt;<br />&lt;/servlet-mapping&gt;</pre>
    </li>
    <li>
      <p>
        <strong>Deny directory browsing in the default servlet's configuration. </strong>Initialize the default servlet with the parameter <em>listings</em> set to <em>false</em>. Example:</p>
      <pre>&lt;servlet&gt;<br />      &lt;servlet-name&gt;default_servlet&lt;/servlet-name&gt;<br />      &lt;servlet-class&gt;<br />            org.apache.catalina.servlets.DefaultServlet<br />      &lt;/servlet-class&gt;<br /><strong>      &lt;init-param&gt;<br /></strong>            &lt;param-name&gt;listings&lt;/param-name&gt;<br />            &lt;param-value&gt;false&lt;/param-value&gt;<br /><strong>      &lt;/init-param&gt;<br /></strong>&lt;/servlet&gt;<br />&lt;servlet-mapping&gt;<br />      &lt;servlet-name&gt;default_servlet&lt;/servlet-name&gt;<br />      &lt;url-pattern&gt;/&lt;/url-pattern&gt;<br />&lt;/servlet-mapping&gt;</pre>
    </li>
    <li>
      <p>
        <strong>Ensure your JSP files are located under the WEB-INF/ directory of your web application.</strong> This ensures that an attacker cannot directly access those pages, however your application can perform internal forwards to these pages.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>An application is deployed on a production server. Unfortunately, the developers did not disable directory browsing. This allows an attacker to search for unprotected configuration files.</p>
  <h1>Solution Example</h1>
  <p>An application is deployed on a production server. Because the developers have disabled directory browsing, it is difficult for an attacker to use HTTP browsing to search for unprotected configuration files.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-466188314" Content_Hash="-866758591">
    <Metadata>
      <Id>2e38872b-aef4-4c72-9529-626f8ea9778c</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Web Site Root Directory Has Deny Write ACE for Anonymous Internet Accounts</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Web Site Root Directory Has Deny Write ACE for Anonymous Internet Accounts</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Check to ensure that Web site root directory has deny write ACE for anonymous Internet accounts.</p>
  <h1>How to Check</h1>
  <p>IISLockdown denies write access to content directories for the anonymous account by applying a deny write access control entry (ACE) for the Web Anonymous Users and Web Applications groups. It also adds a deny execute ACL on command-line tools.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="334592345" Content_Hash="1495054787">
    <Metadata>
      <Id>31a7325f-96da-4736-aeca-95556d9f3efe</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Role-based Security Checks Are Performed</Title>
      <Category>Authorization</Category>
      <Phase>Design</Phase>
      <Technology>Java</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Role-based Security Checks Are Performed</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that all users are assigned to specific roles. Verify that all access controls are performed on a per-role basis rather than a per-user basis.</p>
  <h1>Why</h1>
  <p>Application roles allow multiple users to play the same role. This mechanism provides an easy and clear way to discover and manage the minimum privileges necessary for the execution of a given task. It provides a more robust and flexible way of managing the application's users.</p>
  <h1>How to Check</h1>
  <p>Use the following steps to determine if your application uses role-based access controls:</p>
  <ol>
    <li>
      <p>
        <strong>Check if your application uses user roles. </strong>Verify that your application has established user roles and grants the appropriate access privileges to each user role. Example:</p>
      <pre>Roles      Actions    Access Controls    Client Accounts<br />--------------------------------------------------------<br />Manager    Connect        Always            Always<br />           Read           Always            Always<br />           Use            Always            Occasionally<br />           Modify         Never             Occasionally<br />Employee   Connect        Always            Always<br />           Read           Always            Always<br />           Use            Always            Always<br />           Modify         Never             Never</pre>
    </li>
    <li>
      <p>
        <strong>Ensure your application enforces role-based security. </strong>Verify that your application maps its access controls to the established user roles. Depending on your application's design, there are several ways of checking whether your application enforces role-based security:</p>
      <ul>
        <li>
          <p>
            <strong>Check for programmatical role-based security:</strong> If your application uses programmatic security, verify that JAAS is implemented correctly throughout the code. Use the following steps to ensure that access controls are positioned according to your application's security requirements:</p>
          <ul>
            <li>
              <p>
                <strong>Identify all functionality that requires access controls:</strong> Using your application's design, identify all functionality that requires special privileges. Verify that each protected functionality has a permissions check associated with it. For instance, the following code verifies that the user has permission to connect to the application:</p>
              <blockquote>
                <pre>// The variable subject represents the user's identity an all<br />// security tokens that are associated with it<br />PrivilegedExceptionAction action = new AuthException("AccessApp");<br />Subject.doAsPrivileged(subject, action, null);</pre>
              </blockquote>
              <p>Note that <strong>AuthException</strong> is a custom implementation of the <strong>PrivilegedExceptionAction</strong> interface.&amp;nbsp;</p>
            </li>
            <li>
              <p>
                <strong>Verify that all user roles' permissions comply with your application's security requirements:</strong> Examine your application's JAAS policy and verify that each user role is granted only the necessary set of permissions. Example:</p>
              <blockquote>
                <pre>grant Principal application.auth.GroupToken "users"<br />{<br />   permission java.security.SecurityPermission "AccessApp";<br />};</pre>
              </blockquote>
            </li>
          </ul>
        </li>
        <li>
          <p>
            <strong>Check for declarative role-based security:</strong> If your application uses declarative security, examine its deployment descriptor file (e.g. <strong>web.xml</strong>). Verify that access to protected resources is granted according to the application's security requirements.&amp;nbsp;Verify that each <strong>web-resource-collection</strong> element inside the deployment descriptor is associated with the appropriate resource and user roles:</p>
          <ul>
            <li>
              <strong>security-constraint</strong>: Check if all of your application's protected resources are placed within a <strong>security-constraint</strong> element. </li>
            <li>
              <strong>web-resource-collection</strong>: Check if all resources that share mutual access controls are encapsulated by the same <strong>web-resource-collection</strong> element. </li>
            <li>
              <strong>web-resource-name</strong>: Check if all collections of resources are identified by a name. </li>
            <li>
              <strong>url-pattern</strong>: For each collection of resources, verify that all resources are placed in the appropriate <strong>web-resource-collection</strong> elements. </li>
            <li>
              <strong>http-method</strong>: If your application requires access controls only for specific HTTP methods, verify that all of these methods are identified appropriately. </li>
            <li>
              <strong>auth-constraint</strong>: Check if each <strong>web-resource-collection</strong> element has an <strong>auth-constraint</strong> element associated with it. </li>
            <li>
              <strong>role-name</strong>: Verify that all roles are granted access according to your application's security requirements. </li>
          </ul>
        </li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Verify that users are assigned into their appropriate roles. </strong>List all of your application's users. Check if each user is assigned an appropriate role.</p>
    </li>
  </ol>
  <h1>How to Fix</h1>
  <p>To apply this concept, the security checks within an application should be executed against a user's role rather than against the actual user.</p>
  <p>Use the following steps when designing the role-based security:</p>
  <ol>
    <li>
      <p>
        <strong>Understand the different types of users</strong>:&amp;nbsp;List the different types of users expected for the application.&amp;nbsp;Define&amp;nbsp;how they will use&amp;nbsp;the application, which resources they will&amp;nbsp;need to&amp;nbsp;access, and any additional rules that will impact&amp;nbsp;how access will vary. Create a matrix mapping roles to resource by describing what action the role can take with each system asset. Use this matrix to identify the different types of users according to the functionality they need.</p>
      <pre>Role       Actions    Access Controls    Client Accounts<br />--------------------------------------------------------<br />Manager    Connect        Always            Always<br />           Read           Always            Always<br />           Use            Always            Occasionally<br />           Modify         Never             Occasionally<br />Employee   Connect        Always            Always<br />           Read           Always            Always<br />           Use            Always            Always<br />           Modify         Never             Never</pre>
    </li>
    <li>
      <p>
        <strong>Establish the roles</strong>: Define in code how each role can access each resource. There are two approaches when enforcing role-based security - programmatic and declarative:</p>
      <ul>
        <li>
          <p>
            <strong>Programmatically</strong>: The programmatic approach to role-based security is written inside the code and provides additional runtime flexibility.<br /><br />To enforce role-based security, you need to create a security policy for your application. If you implement this&amp;nbsp;approach using&amp;nbsp;Java Authentication and Authorization Service (JAAS) policies, you can execute a more focused set of security checks such as whether a user is allowed to access a particular resource or perform a specific action. When building the policy, create a role with associated permissions&amp;nbsp;for each type of user. For example, certain roles would be permitted to access the local filesystem while others would not.<br /></p>
          <pre>grant Principal application.auth.GroupToken "administrators"<br />{<br />  permission java.security.SecurityPermission "AccessApp";<br />  permission java.io.FilePermission “/tmp/myapp/cache”, “read,write”;<br />};<br />grant Principal application.auth.GroupToken "users"<br />{<br />  permission java.security.SecurityPermission "AccessApp";<br />};</pre>
        </li>
        <li>
          <p>
            <strong>Declarative</strong>: The declarative approach to role-based security is declared within configuration files. While it doesn’t provide much flexibility in the development phase of the code, it allows easy manageability as the declarations can be modified without a recompile. By using the declarative approach, you can easily manage the security settings for the applications without a need to change the code.<br /><br />Java applications that use declarative security rely on a deployment descriptor (e.g. web.xml). The deployment descriptor uses the following elements for role-based security:</p>
          <ul>
            <li>
              <strong>security-constraint</strong>: Defines the access controls associated with a collection of resources as defined in the <em>web-resource-collection</em> element. </li>
            <li>
              <strong>web-resource-collection</strong>: Encapsulates a collection of resources that share mutual access controls. </li>
            <li>
              <strong>web-resource-name</strong>: Defines the name for the collection of resources. </li>
            <li>
              <strong>url-pattern</strong>: Identifies the URL of a resource that uses the access controls. </li>
            <li>
              <strong>auth-constraint</strong>: Defines the group of user roles that can access the collection of resources identified by the <em>web-resource-collection</em> element. </li>
            <li>
              <strong>role-name</strong>: Defines the roles that can access the collection of resources. </li>
            <li>
              <strong>http-method</strong>: Identifies the HTTP method upon which the access controls will be enforced. For example, your application may enforce access controls for POST requests, but not GET requests. If omitted, the access controls will apply to all HTTP methods. </li>
          </ul>
          <p>For example:</p>
          <pre>&lt;!-- Application's web.xml --&gt;<br />&lt;security-constraint&gt;<br />      &lt;web-resource-collection&gt;<br />            &lt;web-resource-name&gt;Admin Commands&lt;/web-resource-name&gt;<br />            &lt;url-pattern&gt;/admin/*&lt;/url-pattern&gt;<br />            &lt;url-pattern&gt;/config.do&lt;/url-pattern&gt;<br />      &lt;/web-resource-collection&gt;<br />      &lt;auth-constraint&gt;<br />            &lt;role-name&gt;Admin&lt;/role-name&gt;<br />      &lt;/auth-constraint&gt;<br />&lt;/security-constraint&gt;<br /><br />&lt;login-config&gt;<br />      &lt;auth-method&gt;BASIC&lt;/auth-method&gt;<br />      &lt;realm-name&gt;Admin Realm&lt;/realm-name&gt;<br />&lt;/login-config&gt;<br /><br />&lt;!-- The following needs to be included if the application is to<br />     use form-based authentication --&gt;</pre>
          <p>In web.xml:</p>
          <pre>&lt;login-config&gt;<br />      &lt;auth-method&gt;FORM&lt;/auth-method&gt;<br />      &lt;form-login-config&gt;<br />            &lt;form-login-page&gt;/loginForm.jsp&lt;/form-login-page&gt;<br />            &lt;form-error-page&gt;/loginFailed.html&lt;/form-error-page&gt;<br />      &lt;/form-login-config&gt;<br />&lt;/login-config&gt;</pre>
          <p>In loginForm.jsp:</p>
          <pre>&lt;form method="POST" action="j_security_check"&gt;<br />&lt;input type="text" name="j_username"&gt;<br />&lt;input type="password" name="j_password"&gt;<br />&lt;input type="submit" value="log in"&gt;<br />&lt;/form&gt;</pre>
          <p>Because declarative security asks the hosting server to handle authentication and authorization, there is the risk of disclosing connection strings, database credentials, etc.; therefore, use a JAAS LoginModule when using declarative security.<br /><br />Example using Tomcat (if you use a different environment, please consult its manual):</p>
          <pre>      &lt;!-- $TOMCAT_HOME/conf/server.xml --&gt;<br />      &lt;!-- JAAS authentication realm --&gt;<br />      &lt;Realm className="org.apache.catalina.realm.JAASRealm"<br />             appName="AppLoginConfig"<br />             userClassNames="application.auth.GroupToken"<br />             roleClassNames="application.auth.GroupToken"<br />             useContextClassLoader="false"<br />             debug="99"/&gt;</pre>
        </li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Manage the users</strong>: Assign the users into their respective user roles. The application should apply the security policy according to the user roles instead of the actual user.</p>
      <pre>GroupToken groupToken = new GroupToken(groupName);<br />if(!subject.getPrincipals().contains(groupToken))<br />{<br />      subject.getPrincipals().add(groupToken);<br />}</pre>
    </li>
    <li>
      <p>
        <strong>Consider using additional context when making security decisions</strong>: Simple examples include time of day and day of week. For instance, a given user may have no need to login to a system outside of the standard work hours, or even on the weekend. If that user attempts to login or perform some action in the middle of the weekend, it should not be allowed. Another example could be the user's phyisical location. If a user is expected to always use the system from their office in Chicago, but suddenly is connected in Eastern Europe, access should not be allowed.</p>
    </li>
    <li>
      <p>
        <strong>Consider using access control mechanisms provided by frameworks</strong>: Frameworks such as Spring Security (formerly Acegi) and Apache Shiro (formerly JSecurity), as well as others, seek to provide flexible but secure access control mechanisms that integrate neatly with current MVC frameworks and simplify security functionality.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following segment illustrates a JAAS policy. Because the application does not enforce role-based security, it has a policy entry for each separate user; therefore, changing the users' access rights can be quite difficult as each user needs to be modified individually.</p>
  <pre>grant Principal application.auth.UserToken "joe"<br />{<br />  permission java.security.SecurityPermission "AccessApp";<br />};<br />grant Principal application.auth.UserToken "steve"<br />{<br />  permission java.security.SecurityPermission "AccessApp";<br />};<br />grant Principal application.auth.UserToken "julie" <br />{<br />  permission java.security.SecurityPermission "AccessApp";<br />};</pre>
  <h1>Solution Example</h1>
  <p>The following segment illustrates a JAAS policy. Because the application enforces role-based security, it has a policy entry for each group of users; therefore changing the users' access rights is easy as only the group needs to be modified.</p>
  <pre>grant Principal application.auth.GroupToken "users"<br />{<br />  permission java.security.SecurityPermission "AccessApp";<br />};</pre>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1755287761" Content_Hash="-1740141903">
    <Metadata>
      <Id>38741635-2879-40d9-acc5-64463114d8cc</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Available Services Are Secured</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology> Any</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Available Services Are Secured</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Check to ensure that all the available services are secured when configuring your network devices.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="73196848" Content_Hash="-1674396853">
    <Metadata>
      <Id>390fa3c5-5eee-45f3-bfe5-918d99d90e89</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Virtual Directories That Allow Anonymous Access Restrict Write And Execute Web Permissions for the Anonymous Account</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Virtual Directories That Allow Anonymous Access Restrict Write And Execute Web Permissions for the Anonymous Account</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Check to ensure that virtual directories that allow anonymous access restricts Write and Execute Web permissions for the anonymous account.</p>
  <h1>How to Fix</h1>
  <p>Web permissions are configured through the IIS snap-in and are maintained in the IIS metabase. They are not NTFS permissions.</p>
  <p>Use the following Web permissions: </p>
  <ul>
    <li>
      <strong>Read Permissions</strong>. Restrict Read permissions on include directories.
</li>
    <li>
      <strong>Write and Execute Permissions</strong>. Restrict Write and Execute permissions on virtual directories that allow anonymous access.
</li>
    <li>
      <strong>Script source access</strong>. Configure Script source access permissions only on folders that allow content authoring.
</li>
    <li>
      <strong>Write</strong>. Configure Write permissions only on folders that allow content authoring. Grant write access only to content authors.&amp;nbsp;</li>
  </ul>
  <strong>Note:</strong>&amp;nbsp;Folders that support content authoring should be configured to require authentication and SSL for encryption.<br /><ul></ul><hr /><p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1336654503" Content_Hash="1760220716">
    <Metadata>
      <Id>43267080-4116-433f-aad2-4026a365259a</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Role-based Security Checks Are Performed</Title>
      <Category>Authorization</Category>
      <Phase>Design</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure your application creates specific roles for different types of users. Verify when authorizing access to a resource that&amp;nbsp;security checks are performed on a per-role basis rather than on a per-user basis.</p>
  <h1>Why</h1>
  <p>Application roles allow multiple users to play the same role. This mechanism provides a clear way to discover and manage the least privileges necessary for the execution of a given task and&amp;nbsp;provides a more robust&amp;nbsp;means of managing the application's users.</p>
  <h1>How to Check</h1>
  <p>Use the following steps to determine if your application uses role-based access controls:</p>
  <ol>
    <li>
      <p>
        <strong>Check if your application uses user roles.</strong> Verify that your application has established user roles and grants the appropriate access privileges to each user role. The roles and their privileges within the application should be defined in the documentation, to ensure that they have been examined in the context of the business purpose of the application, and to allow them to be checked against the application as implemented. Example:</p>
      <pre>Roles      Actions    Access Controls    Client Accounts<br />--------------------------------------------------------<br />Manager    Connect        Always            Always<br />           Read           Always            Always<br />           Use            Always            Occasionally<br />           Modify         Never             Occasionally <br />Employee   Connect        Always            Always<br />           Read           Always            Always<br />           Use            Always            Always<br />           Modify         Never             Never</pre>
    </li>
    <li>
      <p>
        <strong>Ensure that your application enforces role-based security. </strong>Verify that your application maps its access controls to the established user roles.&amp;nbsp;Ensure that the roles used are sufficiently fine grained. Remember that the goal is to segment privileges within the application, not to simply control access to the entire application. Roles should be mapped to specific pages or functions within the application. Depending on your application's design, there are several ways of checking whether your application enforces role-based security: </p>
      <ul>
        <li>
          <p>
            <strong>Check for programmatically role-based security:</strong> If your application has security checks embedded inside its code base, identify all functionality that requires special privileges. Verify that each protected functionality has a permissions check associated with it.</p>
          <p>For example, the following code verifies that users are share holders before generating the appropriate financial report:</p>
          <blockquote>
            <pre>public void GenerateFinancialReport(DateTime startDate, DateTime endDate)<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; if (HttpContext.Current.User.IsInRole("ShareHolders"))<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Generate the relevant financial report<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />}<br /></pre>
          </blockquote>
        </li>
        <li>
          <p>
            <strong>Check for declarative role-based security:</strong> If your application uses declarative security, examine its <strong>web.config</strong> file. Verify that access to protected resources is granted according to the application's security requirements. Check that each resource is associated with the appropriate user roles in the configuration file: </p>
          <ul>
            <li>
              <strong>roleManager</strong>: Check that the ASP.NET role manager is configured using the <strong>roleManager</strong> element if form-based authentication is used. </li>
            <li>
              <strong>authorization</strong>: Check that the authorization settings for a resource are encapsulated by the <strong>authorization</strong> element. </li>
            <li>
              <strong>allow</strong>: Check that the users and roles that are allowed access to the given resource are enumerated. </li>
            <li>
              <strong>deny</strong>: Check that the users and roles that are denied access to the given resource are enumerated. <p>Example:</p><pre>&lt;configuration&gt;<br />&amp;nbsp; &lt;system.web&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;roleManager enabled="true"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cacheRolesInCookie="false"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; defaultProvider="ProjectRoleProvider"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;providers&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;clear /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;add name="ProjectRoleProvider"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type="System.Web.Security.SqlRoleProvider"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionStringName="ProjectConnection"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; applicationName="myapp" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;authorization&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;allow roles="Employees, Managers" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;deny users="*" /&gt;</pre></li>
          </ul>
        </li>
        <li>
          <p>
            <strong>Check for role-based security managed by Windows:</strong> If your application uses Windows <strong>Local Users and Groups</strong> to manage its role-based security needs, verify that your application's web.config is configured properly.</p>
          <p>Example:</p>
          <pre>&lt;configuration&gt;<br />&amp;nbsp; &lt;system.web&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;authentication mode="Windows" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;authorization&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;allow roles="NTDomain\Employees, NTDomain\Managers" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;deny users="*" /&gt;</pre>
        </li>
      </ul>
      <ul>
      </ul>
    </li>
    <li>
      <p>
        <strong>Verify that users are assigned into their appropriate roles. </strong>List all of your application's users.&amp;nbsp;Check if each user is assigned into their appropriate role. The application should apply the security policy according to the user roles instead of the actual user. Based on your application's mechanism to enforce role-based access controls, check that one of the following techniques is used to manage your application's users</p>
      <ul>
        <li>
          <p>
            <strong>Programmatically:</strong> ASP.NET allows you to manage your application's users through the <strong>Roles</strong> class.</p>
          <p>Check that the following methods are used to assign users into roles: </p>
          <ul>
            <li>
              <strong>AddUserToRole</strong>
            </li>
            <li>
              <strong>AddUserToRoles</strong>
            </li>
            <li>
              <strong>AddUsersToRole</strong>
            </li>
            <li>
              <strong>AddUsersToRoles</strong>
            </li>
          </ul>
          <p>Check that the following methods are used to remove users from roles:</p>
          <ul>
            <li>
              <strong>RemoveUserFromRole</strong>
            </li>
            <li>
              <strong>RemoveUserFromRoles</strong>
            </li>
            <li>
              <strong>RemoveUsersFromRole</strong>
            </li>
            <li>
              <strong>RemoveUsersFromRoles </strong>
            </li>
          </ul>
        </li>
        <li>
          <strong>Declarative:</strong> Verify that the ASP.NET Role Manager is used to manage your application's users. To do so, connect to the database server that hosts your application's Role Manager. Using the following tables, verify that each user is assigned into the appropriate roles: <ul><li>aspnet_Users </li><li>aspnet_Roles </li><li>aspnet_UsersInRoles</li></ul></li>
        <li>
          <p>
            <strong>Windows:</strong> If your application uses Windows authentication, use the Windows <strong>Local Users and Groups</strong> service to manage your application's users. If your application is connected to your organization's NT Domain or Active Directory forest, delegate the user and role management to your organization's network administrators.</p>
          <p>To use the Windows <strong>Local Users and Groups</strong> service:</p>
          <ol>
            <li>Open <strong>Control Panel -&gt; Administrative Tools -&gt; Computer Management</strong>. </li>
            <li>Under the <strong>System Tools</strong> node in the navigation tree, select <strong>Local Users and Groups</strong>. </li>
            <li>Select <strong>Groups</strong>. </li>
            <li>For each role, double-click on the respective group. </li>
            <li>Verify that only the appropriate users are added as members for the given group. </li>
            <li>Click <strong>Cancel</strong>. </li>
            <li>Repeat steps 4-6 for all of your application's user roles.</li>
          </ol>
        </li>
      </ul>
      <ul>
      </ul>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following segment illustrates an application's access control policy. Because the application does not enforce role-based security, it has a policy entry for each separate user.&amp;nbsp;This will make&amp;nbsp;managing the users' access rights quite difficult when the number of users to the application grows.</p>
  <pre>&lt;authorization&gt;<br />  &lt;allow users="NTDomain\joe, NTDomain\sarah, NTDomain\bill, NTDomain\sue" /&gt;<br />  &lt;deny users="*" /&gt;<br />&lt;/authorization&gt;</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>To learn more about the roleManager element in web.config, visit: Documentation for <a href="http://msdn2.microsoft.com/en-us/library/ms164660(vs.80).aspx">roleManager Element (ASP.NET Settings Schema)</a> in MSDN.</li>
  </ul>
  <h1>Related Guideline</h1>
  <ul>
    <li>
      <a href="/article/500a3e89-2937-41b8-99cc-a19dc7696ed6">Guideline: Perform Role-Based Security Checks </a>
    </li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1134619371" Content_Hash="-427019149">
    <Metadata>
      <Id>459959a9-a01c-43f3-9d54-39fe29959c37</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Destinations of Redirects And Forwards Are Validated</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology> Any</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Destinations of Redirects And Forwards Are Validated</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Check that destinations of redirects and forwards are validated.</p>
  <h1>Why</h1>
  <p>If destinations of redirects or forwards are not validated, an attacker may create hyperlinks that appear to point to legitimate sites, but actually point to malicious pages controlled by the attacker. This technique is often used by phishers to trick people into visiting fake sites that steal authentication credentials. In some cases, a user may gain unauthorized access by manipulating redirect or forward parameters, if destinations are not validated.</p>
  <h1>How to Check</h1>
  <p>Use the following steps to verify that destinations of redirects and forwards are validated:</p>
  <ol>
    <li>
      <p>
        <strong>Identify redirects and forwards.</strong> Review code to find all redirects and forwards.</p>
    </li>
    <li>
      <p>
        <strong>Enumerate destinations.</strong> Make a list of all destinations for each redirect and forward.</p>
    </li>
    <li>
      <p>
        <strong>Identify access permissions.</strong> Determine circumstances under which it is acceptable for each user role to access each destination.</p>
    </li>
    <li>
      <p>
        <strong>Examine each redirect and forward.</strong> Verify that each redirect and forward uses mapping values instead of fully-qualified urls to determine destinations. Review the code of each redirect and forward to make sure that all destinations are validated to assure that users can only access resources that are authorized for them. </p>
    </li>
  </ol>
  <h1>How to Fix</h1>
  <p>Perform the following actions to assure validation of redirects and forwards:</p>
  <ol>
    <li>
      <p>
        <strong>Identify redirects and forwards.</strong> Review code to find all redirects and forwards.</p>
    </li>
    <li>
      <p>
        <strong>Map destinations.</strong> Make a list of all destinations for each redirect and forward. Define mapping values for all destinations used by redirects and forwards. A mapping value is a short identifying string that symbolically represents a resource.</p>
    </li>
    <li>
      <p>
        <strong>Define access permissions.</strong> Determine circumstances under which it is acceptable for each user role to access each destination.</p>
    </li>
    <li>
      <p>
        <strong>Validate redirects.</strong> Rewrite redirects and forwards to use mapping values as input to calculate the final destinations of redirects or forwards. Add validation routines to verify that the user has permissions to access the resource, which is the destination of the redirect or forward.</p>
    </li>
  </ol>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information about unvalidated redirects and forwards, please see <a href="http://www.owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards">http://www.owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards</a></li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1438368757" Content_Hash="1873967436">
    <Metadata>
      <Id>47b70bbf-3ab0-439f-a5c3-2c31ea6e584e</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Content Directories Have Deny Write ACE for Anonymous Internet Accounts</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology> Any</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Content Directories Have Deny Write ACE for Anonymous Internet Accounts</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Check to ensure that&amp;nbsp;write access to Web content directories is denied for anonymous internet accounts.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-175160663" Content_Hash="1533708857">
    <Metadata>
      <Id>4cb21920-fa93-4f33-a2a3-aca8bbed2dad</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Input Is Validated for Length, Range, Format And Type</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology>Java</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Input Is Validated for Length, Range, Format And Type</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>1</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Check that all input is validated and treated as untrusted data. Ensure data is validated using whitelisting techniques to check against known good input.</p>
  <h1>Why</h1>
  <p>Unchecked malicious input may lead to integer overflows, injection based attacks, denial of service or information disclosure.</p>
  <h1>How to Check</h1>
  <p>To check for this problem, use the following steps: </p>
  <ol>
    <li>
      <p>
        <strong>Find all input sources. </strong>During design time identify all of the potential input sources to your application. Scour the source code to discover sources of input that may have been missed in the design. Compile a list that you can use in the following steps. The most common sources are:</p>
      <ul>
        <li>URL based parameters </li>
        <li>Form based parameters </li>
        <li>Hidden fields </li>
        <li>Cookies </li>
        <li>HTTP headers (Host, accept types, www authentication, cache settings, encodings, etc) </li>
        <li>Local filesystem </li>
        <li>Database </li>
        <li>Other services running on the system </li>
        <li>Javascript variables </li>
        <li>File upload and attributes (filename, size, data, etc) </li>
        <li>DNS results or host names </li>
        <li>External component call return values (COM, AJAX, ActiveX)</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Trace data from source to sink. </strong>Trace each source of input through your application until you find its ultimate destination. The final sink may be in memory, on the hard drive, sent over the network or stored in a data store such as a database. </p>
    </li>
    <li>
      <p>
        <strong>Identify validation routines. </strong>Each input source should have a data validation routine associated with it. Ideally the validation will occur as soon as the input reaches your application. Shared validation routines are better than creating many spread throughout your code base, so check for consolidation of routines to aid testing and reduce the chance of one-off bugs. If an input source does not have a validation routine associated with it, flag it for fixing.</p>
    </li>
    <li>
      <p>
        <strong>Ensure quality of validation routines. </strong>Validation routines should check for length, range, format and type. </p>
      <ul>
        <li>Validation routines should check for known good data and constrain input against each of those four categories. </li>
        <li>In web applications, look for application-supplied validators, such as a Custom Java Validator, to validate and constrain input after it is received from an input source. </li>
        <li>Ensure that all numeric fields are validated for type and range. Check for the use of regular expressions and <strong>java.util.regex</strong> or the use of a validator that checks numeric ranges by converting the input value to an integer or double and then performing a range check. </li>
        <li>Check that validators validate input against the least permissive expression possible that will accept all the input expected for that field. </li>
        <li>If you know that the field will have a certain internal structure, ensure that is checked for. </li>
        <li>If the input has an internal checksum, like a credit card number, ensure that is checked. <br /><br />Validation should check first for known valid, safe data and then for malicious, dangerous data. Do not rely on filtering out all malicious data, as it is too easy to miss something. Do not rely on client-side validation alone as it can be easily bypassed. </li>
      </ul>
    </li>
  </ol>
  <blockquote>
    <p>
      <strong>Options for Constraining and Sanitizing Data</strong>
    </p>
    <table>
      <tbody>
        <tr>
          <th>Requirement</th>
          <th>Options</th>
        </tr>
        <tr>
          <td>Type checks</td>
          <td>Regular expressions (<strong>java.util.regex</strong>) <p>Java type system</p></td>
        </tr>
        <tr>
          <td>Length checks</td>
          <td>Regular expressions (<strong>java.util.regex</strong>) <p><strong>String.length()</strong> method</p><p>Custom Java <strong>Validator</strong></p></td>
        </tr>
        <tr>
          <td>Format checks</td>
          <td>Regular expressions for pattern matching (<strong>Pattern</strong>, <strong>Matcher</strong>) <p>Java type system</p></td>
        </tr>
        <tr>
          <td>Range checks</td>
          <td>Custom Java <strong>Validator</strong><p>Typed data comparisons</p></td>
        </tr>
      </tbody>
    </table>
  </blockquote>
  <h1>How to Fix</h1>
  <p>Input can vary in several ways: length, data type contents. It is recommended to verify that all of these meet your application's expectations regarding its input.</p>
  <ol>
    <li>
      <p />
      <strong>Validating length</strong>: Validating an input's length suggests that your application should check a string's length or the number of bits in a numeric value. Checking the length can help prevent buffer overflows as well as integer overflows in numeric values. A simple way of validating the numeric value can be done through the use of <em>BigInteger/BigDecimal</em>:<pre>public boolean validateLength(String input)<br />{<br />      if(validateType(input))<br />      {<br />            BigInteger bi = new BigInteger(input);<br /><br />            if(bi.compareTo(BigInteger.valueOf(0)) &gt; -1<br />               &amp;&amp; bi.compareTo(BigInteger.valueOf(Integer.MAX_VALUE)) &lt; 1)<br />            {<br />                  return true;<br />            }<br />            else<br />            {<br />                  return false;<br />            }<br />      }<br />      else<br />      {<br />             return false;<br />      }<br />}</pre></li>
    <li>
      <p />
      <strong>Validating type</strong>: Validating the input's data type is important when your application expects a specific non-string parameter. Difference in data type can trigger unhandled exceptions that would throw your application into an unknown state. Example for validating numeric input:<pre>public boolean validateType(String input)<br />{<br />      String goodPattern = "\\d+";<br />      Pattern p = Pattern.compile(goodPattern);<br />      Matcher m = p.matcher(input);<br />            if(!m.matches())<br />      {<br /><br />            return false;<br />      }<br />      else<br />      {<br />            return true;<br />      }<br />}</pre></li>
    <li>
      <p />
      <strong>Validating contents</strong>: Validating the input's contents can be achieved using whitelist and blacklist techniques. The choice between the use of black and white listing is based upon the constraints that are imposed on the input. If the input follows a tight structure and format, then your application can use whitelisting alone to weed out malicious input. If there are unknowns about the input, then a combination of black and white listing must be used. In general, use blacklisting as a backup to whitelisting. Use a spiral-out approach as input is initially validated using whitelist techniques. When whitelisting cannot validate the input, fall back to blacklisting. If blacklist cannot validate, then discard the input. Whitelisting involves the establishment of what is good input to your application. Once good input is defined, your application must compare all input against the established good input. If the input does not resemble good input, your application should discard it. This technique can be implemented using regular expressions. Example:<pre>public boolean validateData(String input)<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; String goodPattern = "(\\w|\\d)+";<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int goodLength = 10;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if(input.length() &gt; goodLength)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return false;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pattern p = Pattern.compile(goodPattern);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Matcher m = p.matcher(input);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if(!m.matches())<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return false;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; else<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return true;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />}</pre><p>Examples of useful regular expressions: </p><p /><table><tbody><tr><td>Use</td><td>Regular Expression</td><td>Java String</td></tr><tr><td>Valid E-Mail Address</td><td>^\w+(\.|_|-){0,1}\w+@(\w+\.)*\w{3,1024}\.([a-zA-Z]{2}\.){0,1}[a-zA-Z]{2,4}$</td><td>^\\w+(\\.|_|-){0,1}\\w+@(\\w+\\.)*\\w{3,}\\.([a-zA-Z]{2}\\.){0,1}[a-zA-Z]{2,4}$</td></tr><tr><td>Alpha-numeric free text</td><td>(\w|\d|\s|;|\?|!|,|\.|-|:)+</td><td>(\\w|\\d|\\s|;|\\?|!|,|\\.|-|:)+</td></tr><tr><td>Word characters</td><td>\w+</td><td>\\w+</td></tr><tr><td>Numbers</td><td>\d+</td><td>\\d+</td></tr></tbody></table><p /><ul></ul></li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code produces a data analysis based on a financial index. Because the code does not validate its input, the application is vulnerable to SQL injection.</p>
  <pre>import java.io.*;<br />import java.util.*;<br />import java.lang.*;<br />import javax.servlet.*;<br />import javax.servlet.http.*;<br />import java.util.regex.*;<br /><br />public final class DataAggregator extends HttpServlet<br />{<br />      public void doGet(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter("index");<br /><br />            String retString;<br /><br />            try<br />            {<br />                  // The application does not validate the user-supplied data<br />                  retString = "The queried index \"";<br />                  retString += encodeHtml(searchTerm); <br />                  retString += "\" produced the following results:&lt;br&gt; ";<br />                  out.println(retString);<br />                  common.aggregateData(out, searchTerm);<br />            }<br /><br />            catch (Exception e)<br />            {<br />                  // Add the appropriate logging and exception handling<br />                  // mechanisms. Consult the Exception Handling and<br />                  // Logging sections<br />                  out.println("We cannot handle your request at the moment."<br />                            + "Please try again later.");<br />            }<br /><br />            out.flush();<br />            out.close();<br />      }<br />  }</pre>
  <h1>Solution Example</h1>
  <p>The following code produces a data analysis based on a financial index. Since the code validates the application's input, the application is secured from SQL injection.</p>
  <pre>import java.io.*;<br />import java.util.*;<br />import java.lang.*;<br />import javax.servlet.*;<br />import javax.servlet.http.*;<br />import java.util.regex.*;<br /><br />public final class DataAggregator extends HttpServlet<br />{<br />      public void doGet(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter("index");<br /><br />            try<br />            {<br /><br />                  // The application validates the user-supplied data<br />                  if (validateSearchTerm(searchTerm))<br />                  {<br />                        String retString;<br />                        retString = "The queried index \"";<br />                        retString += encodeHtml(searchTerm);<br />                        retString += "\" produced the following results:&lt;br&gt; ";<br />                        out.println(retString);<br />                        common.aggregateData(out, searchTerm);<br />                  }<br />                  else<br />                  {<br />                        // Add the appropriate logging and exception handling<br />                        // mechanisms. Consult the Exception Handling and<br />                        // Logging sections<br />                        out.println("We cannot handle your request at the moment."<br />                                  + "Please try again later.");<br />                  }<br />            }<br /><br />            catch (Exception e)<br />            {<br />                   // Add the appropriate logging and exception handling<br />                   // mechanisms. Consult the Exception Handling and<br />                   // Logging sections<br />                   out.println("We cannot handle your request at the moment."<br />                           + " Please try again later.");<br />            }             out.flush();<br />            out.close();<br />      }<br /><br />      boolean validateSearchTerm(String input)<br />      {<br />            String goodPattern = "(\\w|\\d)+";<br />            int goodLength = 8;<br /><br />            if (input == null)<br />            {<br />                  return false;<br />            }<br /><br />            if(input.length() &gt; goodLength)<br />            {<br />                  return false;<br />            }<br /><br />            Pattern p = Pattern.compile(goodPattern);<br />            Matcher m = p.matcher(input);<br />                        if(!m.matches())<br />            {<br />                  return false;<br />            }<br /><br />            return true;<br />      }<br />}</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>A tutorial on regular expressions is available at <a href="http://www.regular-expressions.info/">Regular-Expressions.info</a>. </li>
    <li>For more information on using regular expression in Java, see: Documentation for <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/regex/Pattern.html">Class Pattern</a> in Java SDK. </li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="318829252" Content_Hash="-575646878">
    <Metadata>
      <Id>4f405937-de36-41e6-b327-e9146762c451</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Input Is Validated for Length, Range, Format, And Type</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Design</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>1</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1><p>Input is validated on the server to ensure that it is in the expected format, based upon which contexts the input is used in, and encoded appropriately on output.</p><h1>Why</h1><p>An attacker passing malicious input can attempt SQL injection, cross-site scripting, and other injection attacks that aim to exploit your vulnerabilities in your application. Validating input helps to reduce these risks by ensuring that the input received matches the expected format. Input validation on its own is not sufficient; output encoding is also needed to fully prevent these attacks as well as to improve&nbsp;reliability. Validation should always be as strict as possible, to ensure that problems do not arise from input thought to be out-of-range but harmless. An allow-list approach should always be taken, never a block list, to ensure that this property is maintained.</p><h1>How to Check</h1><p>To check for this problem, use the following steps: </p><ol><li><p><strong>Ensure&nbsp;that numeric range constraints have been enforced. </strong>Check that the <em>RangeValidator</em> control has been used to constrain the numeric input to a specific range.</p></li><li><p><strong>Ensure that verification fields are validated. </strong>Check that the <em>CompareValidator</em> control has been used to ensure validity for verification fields. An example of a verification field is the password entry field, where the user is required to re-type the value and the two values are compared to validate them. </p></li><li><p><strong>Ensure that type constraints have been enforced on string fields. </strong>Check that the <em>RegularExpressionValidator</em> control has been used to validate string input. This validator performs a variety of checks on string input fields using regular expressions. </p></li><li><p><strong>Ensure that custom validation has been used to handle remaining input constraints. </strong>Check that the <em>CustomValidator</em> control has been used to validate input for constraints not handled by the built-in ASP.NET validators. When the <strong>CustomValidator</strong> control is used, it is important to check that input has been validated for length, range, format and type. Use this validator in cases where your application might require certain business logic constraints which cannot be enforced by the existing validators for example. </p></li><li><p><strong>Ensure that the Regex class is being used to validate other sources. </strong>If you need to validate input from sources other than form fields, such as query string parameters or cookies, check that the <strong>Regex</strong> class, within the <strong>System.Text.RegularExpressions</strong> namespace, is being used. </p></li></ol><h1>Problem Example</h1><p>Consider a very simple form for an online shopping cart. The cart component consists of two components:</p><ol><li><p>An HTML form that contains all of the fields that make up the order to be submitted for processing:</p><pre>&lt;html&gt;<br>  &lt;head&gt;<br>    &lt;title&gt;Widget shopping cart&lt;/title&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>    &lt;H1&gt;Welcome to the most boring shopping cart on the web!&lt;/H1&gt;<br>     A widget's current price is $19.95 USD. Please use the following form to submit an order.<br>    &lt;form action="process_order.aspx" method="POST"&gt;<br>       &lt;p&gt;Please enter the number of widgets you would like to purchase:&lt;/p&gt;<br>      quantity:&lt;br/&gt;<br>      &lt;select name="WidgetQuantity"&gt;<br>        &lt;option value="1"&gt;1&lt;/option&gt;<br>        &lt;option value="2"&gt;2&lt;/option&gt;<br>        &lt;option value="3"&gt;3&lt;/option&gt;<br>        &lt;option value="4"&gt;4&lt;/option&gt;<br>      &lt;/select&gt;<br>      ...<br>      &lt;input type="submit" value="order"/&gt;<br>    &lt;/form&gt;<br>  &lt;/body&gt;<br>&lt;/html&gt;</pre></li><li><p>An ASP.NET page that processes the form submissions and performs the necessary steps to create the order.</p><pre>int dQuantity = Request("WidgetQuantity");<br>double dPrice = 19.95;<br>double dCost = dQuantity * dPrice;</pre></li></ol><p>This server side page is problematic because it lacks validation to ensure the quantity field is correct. The application works fine in the case where a user plays by the rules and submits the form as it is shown, because the quantity field ensures that the range constraints for the order quantity are always valid. However, if a clever user decides to construct their own form and submits a negative WidgetQuantity field, it causes a negative balance. Depending on what e-commerce system is used, this could result in a credit to the user's account. It also might subtract the negative balance from the company's inventory, which would carry significant ramifications and costs later on.</p><hr><p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="962482488" Content_Hash="-43462497">
    <Metadata>
      <Id>50e1e9c6-a9d9-489a-8fcf-ceacf3073865</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>SSL Is Used to Protect User Credentials And Authentication Cookies</Title>
      <Category>Authentication</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>SSL Is Used to Protect User Credentials And Authentication Cookies</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that SSL is used to protect authentication credentials and authentication cookies passed between browser and server.</p>
  <h1>Why</h1>
  <p>By using SSL, you make it much more difficult for an attacker to monitor the network connection&amp;nbsp;to&amp;nbsp;capture authentication credentials and authentication cookies to gain spoofed access to your application. </p>
  <p>SSL also can improve user trust in your application as it authenticates the server to the client, thus proving itself to be the end point for communications.</p>
  <h1>How to Check</h1>
  <p>To ensure the forms authentication credentials and the forms authentication cookie is passed from browser to server with SSL, use the following steps:</p>
  <ol>
    <li>Ensure that the authentication cookie is passed only over HTTPS connections. </li>
    <li>Ensure that the <strong>SSLOnly</strong> attribute is set&amp;nbsp;on all authentication and authorization cookies.&amp;nbsp; </li>
    <li>Ensure that all login forms, password change forms, role/authorization request, editing forms, or other authentication-required pages are only available over SSL and only accept submissions via SSL.&amp;nbsp; </li>
  </ol>
  <h1>How to Fix</h1>
  <p>Perform the following tasks to assure that SSL is used to protect user credentials and authentication cookies:</p>
  <p>
    <strong>Restrict the authentication cookie to HTTPS connections. </strong>Cookies support a "secure" property that determines whether or not browsers should send the cookie back to the server. With the secure property set, the cookie is sent by the browser only to a secure page that is requested using an HTTPS URL.</p>
  <p>Set the secure property by using <strong>requireSSL="true"</strong> on the <strong>&lt;forms&gt;</strong> element as follows:</p>
  <pre>&lt;forms loginUrl="Secure\Login.aspx"<br />       requireSSL="true" . . . /&gt;</pre>
  <p>
    <strong>Encrypt the cookie and check its integrity. </strong>Encrypt the cookie and check its integrity, even if you are using SSL. This prevents an attacker from viewing or modifying the cookie if he or she manages to steal it through a XSS exploit, which would allow&amp;nbsp;the attacker&amp;nbsp;to still use the cookie to gain access to your application. The best way to mitigate this risk is to implement the appropriate countermeasures to prevent XSS attacks (described under "Cross-Site Scripting" earlier in this chapter), and limit the cookie lifetime as described in the next recommendation.</p>
  <p>To provide privacy and integrity for the cookie, set the <strong>protection</strong> attribute on the <strong>&lt;forms&gt;</strong> element as follows:</p>
  <pre>&lt;forms protection="All"    Privacy and integrity</pre>
  <p>A secure &lt;<strong>forms</strong>&gt; element configuration is shown here:</p>
  <pre>&lt;forms loginUrl="Secure\Login.aspx"<br />       protection="All"<br />       requireSSL="true"<br />       timeout="00:30:00"<br />       slidingExpiration="true"<br />       name="YourAppName"<br />       path="/Secure" /&gt;</pre>
  <ul>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="699047278" Content_Hash="-171814527">
    <Metadata>
      <Id>5251a1f6-3b58-4a6c-a4e4-e9e6f8dc3e29</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Internet-facing Interfaces Are Restricted</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology> Any</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Internet-facing Interfaces Are Restricted</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Check to ensure that access to Internet-facing interfaces are restricted to port 80 for HTTP and port 443 for HTTPS (SSL).</p>
  <h1>How to Fix</h1>
  <p>Limit inbound traffic to port 80 for HTTP and port 443 for HTTPS (SSL).</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1052065608" Content_Hash="-209746883">
    <Metadata>
      <Id>53748e6e-6cf8-47cd-82bb-1681bf43bc44</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>SSL Is Used When Transmitting Credentials</Title>
      <Category>Authentication</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>SSL Is Used When Transmitting Credentials</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that credentials are never sent via unencrypted connections. SSL should be used when transmitting credentials.</p>
  <h1>Why</h1>
  <p>Using SSL prevents the credentials from being sniffed or tampered with as they are transmitted over the network. If SSL is not used, user credentials may be compromised by attacks such as a Network Credential Sniffing Attack or a Phishing Attack. Additionally, use the Protect Session Cookies guideline to minimize the risk of exposing your application's session cookies to an attacker.</p>
  <h1>How to Check</h1>
  <ol>
    <li>
      <p>
        <strong>Verify that a dedicated SSL enabled server is used for the authentication component of your application.</strong> Check that the server uses valid SSLv3 certificates that have been signed by a trusted certification authority. Ensure that your application's authentication component runs on a dedicated subdomain and a server that accepts only HTTPS traffic. Disallowing unencrypted HTTP connections will prevent accidental or malicious unsecured connections. Disallowing lower SSL versions, such as SSLv1 and SSLv2 will ensure that weaker encryption methods can not be exploited by an attacker.</p>
      <p>The following URL should connect and prompt for login credentials: </p>
      <pre>https://login.example.com/myapp/login.aspx</pre>
      <p>An HTTP URL to the same server and component should either be disallowed or redirect to its HTTPS counterpart:</p>
      <pre>http://login.example.com/myapp/login.aspx</pre>
    </li>
    <li>
      <p>
        <strong>Identify forms that send credentials.</strong> Forms are defined by a &lt;form&gt; tag in the HTML document, such as the one below: </p>
      <pre>&lt;form method="POST" action="https://login.example.com/myapp/login.aspx"&gt;</pre>
      <p>Forms that include credentials usually, but won't always, include an input field with a TYPE attribute set to "password": </p>
      <pre>&lt;input <strong>type</strong>="<strong>password</strong>" name="pass" size=25&gt;</pre>
    </li>
    <li>
      <p>
        <strong>Ensure that form data is sent using HTTPS.</strong> Verify that the <strong>requireSSL</strong> attribute inside the &lt;forms&gt; element of your application's <strong>web.config</strong> is set to <strong>true</strong>:</p>
      <div>
        <br />
        <pre>&lt;authentication mode="Forms"&gt;<br />   &lt;forms loginUrl=https://login.example.com/myapp/login.aspx<br />           requireSSL="true"<br />           ... /&gt;<br />&lt;/authentication&gt;</pre>
        <br />
      </div>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following snippet is part of an application's web.config. The application uses form based authentication and has configured its &lt;forms&gt; element accordingly. Unfortunately, the &lt;forms&gt; element does not have the requireSSL attribute set to true. Therefore the application fails to enforce the use of SSL when performing form-based authentication.</p>
  <pre>&lt;!-- The forms element does not have a requireSSL attribute --&gt;<br />&lt;forms loginUrl="Secure/Login.aspx"<br />       protection="All"<br />       timeout="00:30:00"<br />        slidingExpiration="true"<br />       name="MyApp"<br />       path="/Secure"<br /> /&gt;</pre>
  <ul>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="763105085" Content_Hash="-1838795397">
    <Metadata>
      <Id>56b0552d-2ceb-4714-a8f1-20a6a8609874</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>All Database Input Is Validated</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>All Database Input Is Validated</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure all input is validated before it is passed to the database.</p>
  <h1>Why</h1>
  <p>Unvalidated input can lead to persistent cross-site scripting, SQL injection and other vulnerabilities&amp;nbsp;that could allow an attacker to gain unauthorized access to sensitive data.</p>
  <h1>How to Check</h1>
  <p>Follow these steps to ensure that all input passed to database is validated:</p>
  <ol>
    <li>
      <p>
        <strong>Identify all sources of input to the database. </strong>An application can have various sources of input. Each of these sources is an entry point to your application and can potentially be used to break your application's security model. Determine all sources of input&amp;nbsp;that&amp;nbsp;are eventually pushed to the database.</p>
      <p>Potential sources of input in a web application typically include:</p>
      <ul>
        <li>URL based parameters </li>
        <li>Form based parameters </li>
        <li>Hidden fields </li>
        <li>Cookies </li>
        <li>HTTP headers </li>
        <li>Data stored on the local filesystem </li>
        <li>Database </li>
        <li>Other related services</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Verify that validators have been used to check the input. </strong>Check that a content-specific validator has been placed at each entry point.<br />Each database input source should have a data validation routine associated with it. Ideally the validation will occur as soon as the input reaches your application. Shared validation routines are better than creating many spread throughout your code base, so check for consolidation of routines to aid testing. If a database input source does not have a validation routine associated with it, flag it for fixing.</p>
    </li>
    <li>
      <p>
        <strong>Ensure that type-safe parameters and stored procedures are used. </strong>Check that stored procedures and parametrized queries have been implemented instead of using the input values directly in constructing dynamic SQL queries as the latter is prone to SQL injection. </p>
    </li>
    <li>
      <p>
        <strong>Ensure that database entry paths have been audited. </strong>Get a 3rd party reviewer to verify that all the database input paths have been identified and that validators have been correctly implemented for all entry points.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code validates the user based on a given username and password. It hashes the password with a random salt. Then it compares the username and the produced hash against the data stored in the backend database.</p>
  <p>Unfortunately, the SQL query is dynamically crafted by using the user's input. If there is no proper input validation, an attacker can access the application's database server through the use of SQL injection.</p>
  <pre>public boolean validateUser(String user, char[] pass)<br />{<br />      byte[] salt = MyApp.generateSalt();<br />      String passHash;<br />      SqlConnection cn;<br />      SqlCommand sqlCommand;<br />      String query;<br />      passHash = hashCredentials(pass, salt);<br />      // The application crafts the SQL query based on user's input<br />      cn = MyApp.getDBConnection();<br />      sqlCommand = new SqlCommand("select user from myappUsers where user = \"" + user + "\"<br />                                     + and pass = \"" + passHash + "\" and login_attempts &lt; 3;", cn);<br />      SqlDataReader reader = sqlCommand.ExecuteReader();<br />      updateLastLoginAttempt(user);<br />      ...<br />}</pre>
  <p>If a user submits a login request with a username of<i> 'foo\" or 1 = 1; drop table *; --',</i> the system will happily first authenticate the user and then drop all the tables in the database.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="2135796287" Content_Hash="1195528289">
    <Metadata>
      <Id>57b928e2-5bc1-4d98-b3df-c7cca05dc5a8</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>All Data Passed Between Native And Java Code Is Validated</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology>Java</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>All Data Passed Between Native And Java Code Is Validated</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Verify that your application validates all data that is passed between Java code and native code.</p>
  <h1>Why</h1>
  <p>Unchecked input and/or output can lead to buffer overflows, injection based attacks such as SQL injection, cross-site scripting, etc., that exploit weaknesses in the application.</p>
  <h1>How to Check</h1>
  <p>Due to the security risk posed by the use of native code, verify that your application validates data that is passed between native code and Java:</p>
  <ol>
    <li>
      <p>
        <strong>Check if language boundaries are clearly defined. </strong>If your Java application needs to use native code, ensure that you have identified all the locations where the Java code interacts with native code. As your application moves between Java code and native code, special attention needs to be given to error handling routines, so that no security holes are introduced in your application by its native component.</p>
    </li>
    <li>
      <p>
        <strong>Verify the quality of your application's validators. </strong>Verify that your application's data is properly validated for length, range, format and type.</p>
    </li>
    <li>
      <p>
        <strong>Verify that all data is validated. </strong>Verify that all data passing through the locations identified in Step 1 is validated.</p>
    </li>
    <li>
      <p>
        <strong>Ensure that data validation code is centralized. </strong>It is better that all validation routines in your application are centralized for cleaner and better control. Shared validation routines are better than creating many routines spread throughout your application's code base. Every time your application accepts external data as input, it should first pass through this set of validation routines.</p>
    </li>
  </ol>
  <h1>How to Fix</h1>
  <p>There are several things to consider when validating input/output between native and Java code: </p>
  <ol>
    <li>
      <p>
        <strong>Check language barriers. </strong>Distinguishing&amp;nbsp;the boundaries between native and Java code is very important. Because the Java sandbox provides multiple security checks to its code, it is important to know the boundary&amp;nbsp;between&amp;nbsp;where the Java sandbox ends and the compiled code begins&amp;nbsp;to interact&amp;nbsp;directly with the CPU, so you can&amp;nbsp;compensate for&amp;nbsp;the lack of such checks inside the native code.</p>
    </li>
    <li>
      <p>
        <strong>Validate for length, range, format and type. </strong>After discovering the language boundaries, determine the type, format and structure of the data that is passed between Java and native code. Build a validator for each type of data that is passed between the two environments. </p>
    </li>
    <li>
      <p>
        <strong>Construct a set of validators. </strong>Centralize your application's validators as it helps strengthen the code by limiting the amount of scattered validation code throughout your application. Place the set of validators on the language barriers. Your application should pass data between native and Java code only through its set of validators.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following segment shows JNI code that utilizes a COM object. Making the assumption that the Java code will handle data validation, the JNI segment does not verify that the passed input is a valid GUID. Since invalid GUIDs may cause unhandled exceptions, an attacker can force the application to disclose its call stack and possibly its source filenames.</p>
  <pre>#include &lt;jni.h&gt;<br />#include &lt;sys/types.h&gt;<br />#include &lt;fcntl.h&gt;<br />#include &lt;stdio.h&gt;<br />#include &lt;atlbase.h&gt;<br />#include &lt;windows.h&gt;<br />#include &lt;wtypes.h&gt;<br />JNIEXPORT jboolean<br />JNICALL Java_Identifier_invokeObject<br />      (JNIEnv * env, jobject jobj, jstring jguid)<br />{<br />      HRESULT result;<br />      CLSID clsid;<br />      IUnknown *pIunkn;<br />      LPWSTR guid;<br />      jboolean iscopy;<br />      jboolean ret = false;<br />      char* temp_guid = (*env)-&gt;GetStringUTFChars(env, jguid, &amp;iscopy);<br />      //The application fails to verify that the GUID is valid<br />      guid = SysAllocStringLen(0, 38);<br />      MultiByteToWideChar(CP_ACP, 0, temp_guid, -1, guid, 38);<br />      result = GUIDFromString(guid, &amp;clsid);<br />      ...<br />      return ret;<br />}</pre>
  <h1>Solution Example</h1>
  <p>The following segment shows a JNI code that utilizes a COM object. Because the passed input is accepted only if it is a GUID, the application reduces the risk of unhandled exceptions.</p>
  <pre>#include &lt;jni.h&gt;<br />#include &lt;sys/types.h&gt;<br />#include &lt;fcntl.h&gt;<br />#include &lt;stdio.h&gt;<br />#include &lt;atlbase.h&gt;<br />#include &lt;windows.h&gt;<br />#include &lt;wtypes.h&gt;  <br />JNIEXPORT jboolean <br />JNICALL Java_Identifier_invokeObject<br />      (JNIEnv * env, jobject jobj, jstring jguid)<br />{<br />      HRESULT result;<br />      CLSID clsid;<br />      IUnknown *pIunkn;<br />      LPWSTR guid;<br />      jboolean iscopy;<br />      jboolean ret = false;<br />      char* temp_guid = (*env)-&gt;GetStringUTFChars(env, jguid, &amp;iscopy);<br />      // The application verifies that the input matches the criteria for a GUID<br />      if(!validGUID(temp_guid))<br />      {<br />            return ret;<br />      }<br />      guid = SysAllocStringLen(0, 38);<br />      MultiByteToWideChar(CP_ACP, 0, temp_guid, -1, guid, 38);<br />      result = GUIDFromString(guid, &amp;clsid);<br />       ...<br />      return ret;<br />}<br /><br />bool validGUID(char *guid)<br />{<br />      // Check that GUID is of right length<br />      if(strlen(guid) != 38) return false;<br />      // Sample GUID: {1EF4A023-143A-4e0e-AD72-69C2C68C2D70<br />}<br />      if(guid[0]  != '{') return false;<br />      if(guid[9]  != '-') return false;<br />      if(guid[14] != '-') return false;<br />      if(guid[19] != '-') return false;<br />      if(guid[24] != '-') return false;<br />      if(guid[37] != '}') return false;<br />      int i=1;<br />      while(i&lt;37)<br />      {<br />            if((guid[i] &gt;= 'a' &amp;&amp; guid[i] &lt;= 'f')<br />                  || (guid[i] &gt;= 'A' &amp;&amp; guid[i] &lt;= 'F')<br />                  || (guid[i] &gt;= '0' &amp;&amp; guid[i] &lt;= '9')<br />            {<br />                  // GUID is valid<br />            }<br />            else<br />            {<br />                  return false;<br />            }<br />            i++;<br />            if(i == 9 || i == 14 || i == 19 || i == 24)<br />            {<br />                  i++;<br />            }<br />      }<br /><br />      return true;<br />}</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information about the security issues that JNI introduces, see: <a href="http://www.owasp.org/index.php/Unsafe_JNI">Unsafe JNI</a> from OWASP. </li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1676204695" Content_Hash="642580630">
    <Metadata>
      <Id>5ce93f58-53f1-4cb6-acac-b15f71b79bc7</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Access to the Credential Store is Limited</Title>
      <Category>Authentication</Category>
      <Phase>Implementation</Phase>
      <Technology>Java</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Access to the Credential Store is Limited</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that access to the credential store is limited to administrators with the correct privileges. </p>
  <h1>Why</h1>
  <p>Unauthorized access to the credential store can lead to users' credentials being overwritten; therefore, allowing the attacker to gain access to application resources without obtaining valid credentials.</p>
  <h1>How to Check</h1>
  <p>Follow these steps to ensure that the credential store is properly secured: </p>
  <ol>
    <li>
      <p>
        <strong>Identify all routines that access the store. </strong>Locate all routines within your application that access the credential store. Such routines include:</p>
      <ul>
        <li>Authenticating users </li>
        <li>Creating users </li>
        <li>Modifying users </li>
        <li>Changing user passwords</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Verify that credentials for accessing the store are secured. </strong>Ensure that your application's access credentials and connection strings are not hard-coded into your application's code base. </p>
      <ul>
        <li>If your application <strong>uses a database</strong> as its credential repository, ensure that access credentials and connection strings are secured properly. </li>
        <li>If your application <strong>does not use a database</strong> for its credential repository, verify that only the appropriate components of your application are able to access the credential store.<br /><br />Example of how <strong>not</strong> to handle access to the credential store: </li>
      </ul>
      <p />
      <blockquote>
        <pre>// The application discloses the credentials necessary for accessing the user database<br />DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());<br />Connection cn = DriverManager.getConnection("jdbc:oracle:thin:@testbox:1521:orcl2", "myapp", "pass"); </pre>
      </blockquote>
    </li>
    <li>
      <p>
        <strong>Check the access controls for your credential store.</strong> Ensure that your application's credential store has the appropriate security in place. For instance, if your application uses a database for its credential store, verify that the database server is secured properly.</p>
    </li>
  </ol>
  <ol>
  </ol>
  <h1>How to Fix</h1>
  <p>Follow these steps to limit the access to the credential store: </p>
  <ol>
    <li>
      <p>
        <strong>Avoid disclosing the location of the store. </strong>Do not disclose the location of the store within your application. Do not let&amp;nbsp;regular application users know where the store is located. </p>
    </li>
    <li>
      <p>
        <strong>Secure credentials required for accessing the store. </strong>Store your credentials within a configuration file and encrypt them. Place the encryption key within a keystore that is encrypted using a local account password.</p>
    </li>
    <li>
      <p>
        <strong>Restrict access to repository. </strong>Limit the number of users that can access the store. If it is a file on the local file system, set the appropriate permissions to restrict the read/write access. If it is a database, restrict the accounts that can access the database server.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code authenticates a user based on their credentials. Because the code discloses the credentials to the user database, anybody with access to the code also has access to the credential store. </p>
  <pre>public boolean validateUser(String user, char[] pass)<br />{<br />      boolean valid;<br />      Connection cn;<br /><br />      // Prepare credentials before querying the credential store<br />      ...<br />      try<br />      {<br />            // The application discloses the credentials necessary for<br />            // accessing the user database<br />            DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver());<br />            cn = DriverManager.getConnection("jdbc:oracle:thin:@testbox:1521:orcl2",<br />                                             "myapp", "pass");<br />            // Query the credential store and perform the rest<br />            // of the authentication steps<br />            ...<br />      }<br />      catch (SQLException se)<br />      {<br />            // Add the appropriate logging and exception handling mechanisms<br />            return false;<br />      }<br /><br />      return valid;<br />}</pre>
  <h1>Solution Example</h1>
  <p>The following code authenticates a user based on their credentials. The code relies on other parts of the application to handle database connectivity. Therefore, the code does not reveal the application's credentials to the credential store. </p>
  <pre>public boolean validateUser(String user, char[] pass)<br />{<br />      boolean valid;<br />      // Prepare credentials before querying the credential store<br />      ...<br />      try<br />      {<br />            // The credentials to the application's user database<br />            // are not hard-coded in the authentication routine<br />            cn = MyApp.getDBConnection();<br />            // Query the credential store and perform the rest<br />            // of the authentication steps<br />            ...<br />      }<br />      catch (SQLException se)<br />      {<br />            // Add the appropriate logging and exception handling mechanisms<br />            return false;<br />      }<br />      return valid;<br />}</pre>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1630597899" Content_Hash="-1184254169">
    <Metadata>
      <Id>69f19cab-47b7-4418-ac48-6f8c53a8e1d9</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Include Directories Do Not Have Read Web Permission</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Include Directories Do Not Have Read Web Permission</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>
      <div>Web Application</div>
    </li>
  </ul>
  <h1>What to Check For</h1>
  <p>Check to ensure that the include directories do not have the Read Web permission.</p>
  <br />
  <h1>How to Fix</h1>
  <p>Web permissions are configured through the IIS snap-in and are maintained in the IIS metabase. They are not NTFS permissions.</p>
  <p>Use the following Web permissions: </p>
  <ul>
    <li>
      <strong>Read Permissions</strong>. Restrict Read permissions on include directories.
</li>
    <li>
      <strong>Write and Execute Permissions</strong>. Restrict Write and Execute permissions on virtual directories that allow anonymous access.
</li>
    <li>
      <strong>Script source access</strong>. Configure Script source access permissions only on folders that allow content authoring.
</li>
    <li>
      <strong>Write</strong>. Configure Write permissions only on folders that allow content authoring. Grant write access only to content authors.
<blockquote><strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;Folders that support content authoring should be configured to require authentication and SSL for encryption.</blockquote></li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="636209201" Content_Hash="-552562545">
    <Metadata>
      <Id>6d0a0563-19e5-4a12-9e97-9c906abb3971</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Application Is Partitioned into Public And Private Domains</Title>
      <Category>Authentication</Category>
      <Phase>Deployment</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Application Is Partitioned into Public And Private Domains</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that there is a boundary defined to separate public and restricted content in both the URL namespace and file system namespace. </p>
  <h1>Why</h1>
  <p>Defining a boundary between public and restricted content simplifies the task of user authorization and is generally less prone to error. When the content is separated, server configuration can be used to automatically apply authorization rules without relying on the developer to explicitly add checks in the code.</p>
  <h1>How to Check</h1>
  <p>Take the following steps to ensure your application is partitioned into public and restricted domains:</p>
  <ol>
    <li>
      <p>
        <strong>Enumerate all web accessible resources.</strong>&amp;nbsp;Identify the protected resources from the public resources. Common protected resources include, but are not limited to:</p>
      <ul>
        <li>Resources that require authentication </li>
        <li>Critical application resources </li>
        <li>Sensitive/confidential data</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Check the structure of the URL namespace.</strong> Ensure that your application's URL namespace is structured properly according to the level of protection and security needs of each resource. Verify that transitions between URL namespaces is performed using absolute URLs.</p>
    </li>
    <li>
      <p>
        <strong>Check if there is separation on disk between public and protected resources. </strong>Examine the local filesystem structure. Ensure that protected resources are not located inside a public directory and vice versa. </p>
    </li>
    <li>
      <p>
        <strong>Ensure that protected resources have the appropriate access controls.</strong>&amp;nbsp;Determine if all protected resources have the appropriate access controls assigned to them.</p>
    </li>
    <li>
      <p>
        <strong>Verify the local system permissions for all resources.</strong> For each resource, check that the local filesystem permissions are set accordingly. If the resource is public, verify that anonymous users can access it. If the resource is protected, verify that only authorized users can access it.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>MyApp is a financial tool that generates reports based on sensitive data. It allows the user to upload the financial data and download the report. Since the application is small, all of its content is located within the same directory. The access control is enforced by the web application through checking the required permissions before a given call is executed.</p>
  <p>Since both data and code are within the same directory, it may be possible for an attacker to gain access to the raw financial data.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>To learn more about URL namespaces, see: <a href="http://msdn2.microsoft.com/en-us/library/ms178116(vs.80).aspx">ASP.NET Web Site Paths</a>.</li>
  </ul>
  <ul>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-92798983" Content_Hash="-36950758">
    <Metadata>
      <Id>6d6a0050-9565-4fba-ad79-5d74cc043055</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Log Files Are Configured with an Appropriate Size Depending on the Application Security Requirement</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology> Any</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Log Files Are Configured with an Appropriate Size Depending on the Application Security Requirement</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that log files are large enough depending on the application security requirement.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1873707851" Content_Hash="-1610411020">
    <Metadata>
      <Id>7362a10f-f69e-4e4f-a7b0-b8667bfcc710</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Web Site Content Is Located on a Non-system NTFS Volume</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Web Site Content Is Located on a Non-system NTFS Volume</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Check to ensure that Web site content is located on a non-system NTFS volume to mitigate the risks associated with unforeseen canonicalization issues and directory traversal attacks.</p>
  <h1>How to Check</h1>
  <p>Do not use the default <i>\inetpub\wwwroot</i> directory. For example, if your system is installed on the C: drive, then move your site and content directory to the D: drive.
</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1439541324" Content_Hash="584929486">
    <Metadata>
      <Id>742e2a98-1175-4456-93b3-3b5b8de9c4e8</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>A Secure Key Storage Location Is Used</Title>
      <Category>Encryption</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>A Secure Key Storage Location Is Used</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that application keys are stored in a well defined location, such as the encrypted sections of the application's <i>web.config</i> or encrypted in the Windows Registry. Verify that they are not hard coded into the application or stored as plaintext inside configuration files.</p>
  <h1>Why</h1>
  <p>When faced with encryption, intruders attack the most vulnerable aspect: key management. Because keys are used to encrypt sensitive data, the keys themselves become sensitive data that need to be protected. </p>
  <h1>How to Check</h1>
  <p>Use the following steps to verify a secure key storage location is used.</p>
  <ol>
    <li>
      <p>
        <strong>Identify the mechanism used for handling encryption keys.</strong> The mechanism used should be either the Windows Registry or the application's web.config file. Ensure that your application is using the most appropriate mechanism. If the storage locations for keys are not properly documented, look for encryption functions in the code and trace the key material back to see where it is stored, both temporarily and permanently. If you do have documentation, check that the code conforms to the documentation. When tracing through code, ensure that you look at the entire lifetime of the key in the system; keys may be written out insecurely after they are used, even if the path from a secure initial source to use is correct.</p>
      <p>If you store your application's encryption keys into the Windows Registry, ensure that DPAPI is used to protect them. The following code gives an example of how this can be done:</p>
      <pre>encKey = ProtectedData.Protect(encKey, salt, DataProtectionScope.CurrentUser);<br />RegistryKey rk = Registry.LocalMachine.OpenSubKey("SOFTWARE\\MyApp\\KeyStore", true);<br />rk.SetValue("encKey", wBuff, RegistryValueKind.Binary);</pre>
      <p>If you store your application's encryption keys in web.config, ensure that they are stored into the <strong>appSettings</strong> section. Use the <strong>aspnet_regiis</strong> utility to check that the <strong>appSettings</strong> section is encrypted. </p>
    </li>
    <li>
      <p>
        <strong>Ensure the key store is protected.&amp;nbsp;</strong>Ensure that either DPAPI or ASP.NET protected configuration files are being used.&amp;nbsp;Verify that the appropriate permissions are set on the configuration files and registry keys so they can be only accessed by your application and its administrators.&amp;nbsp;Verify that only the application and its administrators can access the IIS metabase.&amp;nbsp;Access to the metabase is controlled with ACLs, similar to normal files or registry keys. Verify that only authorized accounts are listed in the <i>BUILTIN\Administrators</i> group and that other ACLs are properly set up.</p>
    </li>
    <li>
      <p>
        <strong>Verify the application securely handles keys.&amp;nbsp;</strong>Ensure that keys are not hard coded into the source code. When tracing back from an encryption or signing operation, if you see private key material included literally in the body of an application's source code, you have&amp;nbsp;found a hard-coded key&amp;nbsp;that needs to be moved to a protected keystore.&amp;nbsp;Ensure that keys are not placed into unprotected configuration files. If a private key is read from a configuration file and the<i> aspnet_regiis</i> utility (or manual inspection) show that it is not encrypted, the key needs to be moved to a protected key store.&amp;nbsp;Ensure that keys are unloaded from memory after use. If keys are left in memory instead of being cleared out when no longer needed, or if they are written to any form of temporary storage without protection, they are vulnerable to theft from memory or the temporary storage location.&amp;nbsp;</p>
    </li>
  </ol>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information about securing the IIS Metabase, see <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/iissdk/html/3b227030-f79d-4426-b1c0-b5b72e49c9fd.asp">Metabase Security</a>&amp;nbsp;on MSDN.</li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1094039853" Content_Hash="1050728080">
    <Metadata>
      <Id>7463d887-2e8f-4342-9e90-231350179003</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Account Administration Functionality Is Secured</Title>
      <Category>Authorization</Category>
      <Phase>Design</Phase>
      <Technology>Java</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Account Administration Functionality Is Secured</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that the account administration interface is separate from the main application interface.</p>
  <h1>Why</h1>
  <p>Account administration requires higher privileges than the main application interface. Separating the two interfaces decreases the risk of a normal user being able to escalate privileges to that of an administrator.</p>
  <h1>How to Check</h1>
  <p>Use the following steps to verify that the&amp;nbsp;account administration interface is separate from the main application interface: </p>
  <ol>
    <li>
      <p>
        <strong>Verify that your application has a separate administrative interface. </strong>Review your application's design and verify that your application's design specifies separation of administrative and main application interfaces. Verify that your application passes the following checks:</p>
      <ul>
        <li>
          <strong>Administrative Functionality</strong>: Verify that all administrative functionality is clearly identified and separated from the rest of your application's functionality. Exceptions are allowed only when your application allows users to modify their own accounts. </li>
        <li>
          <strong>Code Organization</strong>: Ensure all administrative functionality is structured as a single module and not scattered throughout your application. </li>
        <li>
          <strong>Code Inheritance</strong>: Verify that all Java classes that handle your application's administrative tasks are declared as final. Example: <p /><blockquote><pre>public final class myappAcctAdmin<br />{<br /> ...<br />}</pre></blockquote></li>
        <li>
          <strong>Hosting Container</strong>: Verify that all administrative functionality operates within a Java container or a JVM that is separate from the rest of your application. Depending on the application server that your application uses, it might be necessary to run multiple instances of the application server. Additionally, check if your administrative interface operates on a different port than the rest of your application (e.g. port 3128).</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Ensure that the administrative interface is secure. </strong>Use the following steps to examine the security of your application's administrative interface:</p>
      <ul>
        <li>
          <strong>Security Policy</strong>: Ensure that your application has a security policy regarding its administrative interface. </li>
        <li>
          <strong>Separate Authentication</strong>: Verify that privileged users are forced to re-authenticate before accessing the administrative interface. Check if your application's administrative interface uses a separate authentication module&amp;nbsp;from the rest of your application. </li>
        <li>
          <strong>Access Controls</strong>: Verify that only valid, privileged users can access your application's administrative interface. </li>
        <li>
          <strong>Connection</strong>: Depending on your application's requirements, it may be necessary to check if your application's administrative interface is accessed over SSL. Ensure your application's proper use of SSL.</li>
      </ul>
    </li>
  </ol>
  <h1>How to Fix</h1>
  <p>Use the following steps when designing an administrative interface:</p>
  <ol>
    <li>
      <p>
        <strong>Only privileged users can administer all accounts. </strong>Design your application such that the administrative module is separate from the main application interface. Since the separation requires using separate authentication mechanisms for the application and its administration, there is a reduced risk&amp;nbsp;of escalation-of-privilege attacks. </p>
    </li>
    <li>
      <p>
        <strong>Users may be allowed to administer their own accounts. </strong>It may be necessary to allow users to administer their own accounts. This involves the ability to change passwords, account details, etc. Such administration can be done through the main application interface. Because the user is modifying sensitive data, extra security precautions must be enforced:</p>
      <ul>
        <li>
          <b>Session management implemented in server side code</b>: The user should always be tracked at the server-side. Store the userID inside a session. The only data the client needs to know is the session identifier. This reduces the risk of an attacker modifying another user's account information. </li>
        <li>
          <strong>Force re-authentication</strong>: Enforce re-authentication when modifying the user's password. This helps verify that the user is aware of the password change and is not a victim of a session hijacking.</li>
        <li>
          <strong>Modify accounts in sections</strong>: Do not modify all account information at once. For example, group the account information into credentials, personal data, contact information and additional information. Modifying the account information in groups reduces the risk of information leakage when the user is updating his/her account. </li>
        <li>
          <strong>Use SSL when modifying&amp;nbsp;accounts</strong>: If SSL is implemented correctly, it can verify the authenticity of the application. It can also encrypt traffic and hence provide confidentiality.</li>
      </ul>
    </li>
  </ol>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="921670570" Content_Hash="-766389992">
    <Metadata>
      <Id>75e23234-37ea-4c3d-97ba-8a44c6cf8060</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Redirects And Forwards Are Not Used Unless Necessary</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Design</Phase>
      <Technology> Any</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Redirects And Forwards Are Not Used Unless Necessary</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Verify that redirects and forwards are not used unless necessary.</p>
  <h1>Why</h1>
  <p>Redirects or forwards may be manipulated by an attacker to create hyperlinks that appear to point to legitimate sites, but actually point to attacker-controlled malicious pages. This technique is oftened used by phishers to trick people into trusting a fake web site.</p>
  <h1>How to Check</h1>
  <p>Use the following steps to verify that redirects and forwards are not used unless necessary:</p>
  <ol>
    <li>
      <p>
        <strong>Review application design.</strong> Look through project documentation for any mentions of redirects or forwards (also known as transfers in .NET). Ideally, there should be no redirects or forwards in the application design.</p>
    </li>
    <li>
      <p>
        <strong>Review code.</strong> Search code for redirects or forwards. Because there are many different ways to implement redirects and forwards, look through every page for code that handles parameters, and verify that this code doesn't perform redirects or forwards based on input.</p>
    </li>
  </ol>
  <h1>How to Fix</h1>
  <p>Perform the following actions to avoid using redirects or forwards:</p>
  <ol>
    <li>
      <p>
        <strong>Enumerate redirects and forwards.</strong> Review application code to find all redirects and forwards used by the application.</p>
    </li>
    <li>
      <p>
        <strong>Review application design.</strong> Determine how redirects and forwards figure into the application design. Consider making design changes to remove the need for redirects and forwards.</p>
    </li>
    <li>
      <p>
        <strong>Remove redirects or forwards.</strong> Remove the redirects and forwards that are not necessary after changes to the application design.</p>
    </li>
    <li>
      <p>
        <strong>Secure the remaining redirects or forwards.</strong> If there appears to be no reasonable way to get rid of redirects or forwards, use related guidelines to secure the remaining redirects or forwards.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>Consider an on-line banking application that has an insecure redirect:</p>
  <pre>http://www.onlinebank.com/redirect.asp?url=[destination]</pre>
  <p>A phisher may create the following hyperlink to point to his own site and send it in spam messages to millions of people:</p>
  <pre>http://www.onlinebank.com/redirect.asp?url=www.phisher.com</pre>
  <p>When a user sees a link that appears to point to his bank at onlinebank.com in an e-mail message, he clicks that link and sees a web site that looks exactly like the bank's, but is actually a phishing web site used to steal authentication credentials. The user enters his account number and PIN into the web page, receives an error message telling him to try again, and is redirected to the bank's real site. After entering his credentials again, the user successfuly views his account. However, the phisher now has the user's online banking information.</p>
  <h1>Solution Example</h1>
  <p>The best solution to unvalidated redirects or forwards is to not use redirects or forwards at all. Considering the problem example above, a simple solution would be to remove the redirect.asp page after making the necessary changes to the application design.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information about unvalidated redirects and forwards, please see <a href="http://www.owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards">http://www.owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards</a></li>
  </ul>
  <ul>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1607693913" Content_Hash="1195834735">
    <Metadata>
      <Id>779b4344-83ee-4268-8aea-54dcd613b59b</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Windows Authentication Is Used Where Possible</Title>
      <Category>Authentication</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Windows Authentication Is Used Where Possible</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>If your user's accounts are in Active Directory,&amp;nbsp;verify that&amp;nbsp;your application is using Windows Authentication.</p>
  <h1>Why</h1>
  <p>By using Windows authentication with Active Directory, you benefit from a unified identity store, centralized account administration, enforceable account and password policies and strong authentication that avoids sending plain-text passwords over the network. </p>
  <h1>How to Check</h1>
  <p>Use the following steps to check if your application is using Windows Authentication:</p>
  <ol>
    <li>
      <div>Check if your user accounts are stored in Active Directory.</div>
    </li>
    <li>
      <div>Ensure that IIS is set to disable anonymous access.</div>
    </li>
    <li>
      <div>Ensure that IIS is configured to use Windows-based authentication for your web application's virtual directory.</div>
    </li>
    <li>
      <div>Ensure&amp;nbsp;that the <strong>mode</strong> attribute on the &lt;<strong>authentication</strong>&gt; element is set to "Windows" (the default setting) in your Web.config file.</div>
    </li>
  </ol>
  <h1>How to Fix</h1>
  <p>To use Windows authentication in ASP.NET, you must use Microsoft Internet Information Services (IIS) to disable anonymous access and configure a Windows-based authentication method for your Web application's virtual directory. You are generally recommended to use Windows integrated authentication, but you can also use Basic, Digest, or client certificate authentication. You must also ensure that the <strong>mode</strong> attribute on the &lt;<strong>authentication</strong>&gt; element is set to "Windows" (the default setting) in your Web.config file. </p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-38142678" Content_Hash="-1790325494">
    <Metadata>
      <Id>7adb2cdc-5e51-4510-a5a7-f911e17d7de7</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Potentially Dangerous Virtual Directories Are Removed</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Potentially Dangerous Virtual Directories Are Removed</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Check to ensure that sample applications are not installed by default on production Web servers. Applications&amp;nbsp;include potentially dangerous virtual directories, IISSamples, IISAdmin, IISHelp, and Scripts virtual directories.</p>
  <h1>How to Fix</h1>
  <p>Sample applications are not installed by default and should not be installed on production Web servers. Remove all sample applications, including the ones that can be accessed only from the local computer with http://localhost, or http://127.0.0.1. Remove
 the following virtual directories from production servers: IISSamples, IISAdmin, IISHelp, and Scripts.</p>
  <p>
    <strong>Note: </strong>IISLockdown provides an option to remove the Scripts, IISSamples, IISAdmin, and IISHelp virtual directories</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1040823223" Content_Hash="-186093094">
    <Metadata>
      <Id>7d576466-a454-4cc1-838b-06e1359f53f8</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Session Cookies Are Protected</Title>
      <Category>Session Management</Category>
      <Phase>Implementation</Phase>
      <Technology>Java</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Session Cookies Are Protected</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that the confidentiality of session cookies is protected.</p>
  <h1>Why</h1>
  <p>Session cookies are used by an application to identify the session associated with a particular user. Protecting session cookies can help prevent an attacker from hijacking the session and using the application posing as a legitimate user.</p>
  <h1>How to Check</h1>
  <p>Use the following steps to verify that your application's session cookies are handled securely:</p>
  <ol>
    <li>
      <p>
        <strong>Verify that session identifiers cannot be guessed. </strong>Ensure that your application's session identifiers cannot be guessed by an attacker. Verify that your application's session IDs meet the following requirements:</p>
      <ul>
        <li>
          <strong>Length</strong>: Your application uses long session identifiers (e.g. string of length 32). </li>
        <li>
          <strong>Triviality</strong>: Your application uses randomly generated session identifiers. </li>
        <li>
          <strong>Lifetime</strong>: Your application uses <em>HttpSession.setMaxInactiveInterval</em> to expire inactive <span>sessions or that the timeout has been set via a configuration in web.xml.</span></li>
        <li>
          <strong>Recycling</strong>: Your application does not reuse previously used sessions.</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Verify that users can invalidate their own sessions. </strong>Ensure that your application uses <em>HttpSession.invalidate</em> to allow its users to invalidate their own sessions.</p>
    </li>
    <li>
      <p>
        <strong>Verify that session cookies are sent over encrypted channels. </strong>Ensure your application transmits session cookies over encrypted channels. Although this is not required for non-sensitive transactions, it is mandatory for any transactions that are sensitive in nature.</p>
    </li>
    <li>
      <span>
        <p>
          <strong>Verify that session cookies have the <em>HttpOnly</em> flag set</strong>. This prevents client side scripts from gaining access to the cookie.</p>
      </span>
    </li>
    <li>
      <span>
        <p>
          <strong>Verify that session cookies have the <em>Secure</em> flag set.</strong> The <em>Secure</em>&amp;nbsp;flag forces sessions cookies to be sent only over SSL.</p>
      </span>
    </li>
    <li>
      <span>
        <span>
          <p>
            <strong>Verify that sessions are invalidated on login</strong>. This can help prevent session fixation (or hijacking).</p>
        </span>
      </span>
    </li>
  </ol>
  <h1>How to Fix</h1>
  <p>Use the following steps to secure session cookies:</p>
  <ol>
    <li>
      <p>
        <strong>Do not allow users to choose their own session identifiers. </strong>Java automatically assigns random IDs to its sessions which minimizes the risk of an attacker hijacking another user's session by using the same session ID. To use sessions in Java, invoke <em>HttpServletRequest.getSession</em>:</p>
      <pre>HttpSession session = request.getSession();</pre>
    </li>
    <li>
      <span>
        <p>
          <strong>Invalidate the session identifier on login (as well as logout) to ensure session identifiers are not reused.</strong> This is a portion of the approach necessary to prevent session hijacking. Use <em>HttpSession.invalidate</em> to accomplish this. After the session has been invalidated, the call below will generate a new session identifier.</p>
      </span>
      <pre>HttpSession session = request.getSession(true);</pre>
    </li>
    <li>
      <p />
      <strong>Time-out sessions. </strong>
      <span>Set an expiration time for sessions. This helps minimize the threat of session hijacking by giving an attacker a smaller window of opportunity. Depending on your application, an appropriate timeout can be anywhere from 10 to 20 minutes. Setting when sessions should expire can be done through <em>HttpSession.setMaxInactiveInterval</em> in code, or via the <em>session-timeout</em> configuration in the web.xml file.<p /></span>
    </li>
    <li>
      <p>
        <strong>Allow users to terminate their sessions. </strong>Allowing users to invalidate their sessions reduces the risk of session being hijacked. Use <em>HttpSession.invalidate</em> to accomplish this.</p>
    </li>
    <li>
      <p />
      <strong>Ensure cookies are sent over encrypted channels. </strong>
      <span>Mark cookies sent over SSL as <em>Secure</em>. Use <em>Cookie.setSecure</em> to require SSL when sending out the given cookie. It is recommended to avoid sending session cookies over unencrypted channels as session hijacking is made much easier. Use <em>ServletRequest.isSecure</em> to verify whether SSL is being used.&amp;nbsp;There is a cookie-secure attribute that can be set for the session id cookie in the web.xml file.<p /></span>
    </li>
  </ol>
  <p>
    <strong>Note:</strong> PCI DSS requirements state that sessions that are idle for 15 minutes should be locked automatically and require the user's password to unlock.</p>
  <h1>Problem Example</h1>
  <p>The following code shows the logout function of the <em>LoginModule</em> used when relying on JAAS for authentication. The code removes all authentication tokens associated with the current session but fails to invalidate the session. </p>
  <pre>public boolean logout() throws LoginException{<br />      subject.getPrincipals().remove(userToken);<br /><br />      clearCredentials();<br />      userToken = null;<br /><br />      // The application should have invalidated the session here.<br />      // Log the logout event. Consult the Logging section for more details<br />      return true;<br />}</pre>
  <h1>Solution Example</h1>
  <p>The following code shows the logout function of the <em>LoginModule</em> used when relying on JAAS for authentication. The code removes all authentication tokens associated with the current session and invalidates the session.</p>
  <pre>public boolean logout() throws LoginException{<br />      subject.getPrincipals().remove(userToken);<br /><br />      clearCredentials();<br />      userToken = null;<br /><br />      // The application invalidates the session when<br />      // the user is logging out<br />      HttpSession session = common.getCurrentSession();<br />      session.invalidate();<br /><br />      // Log the logout event. Consult the Logging section for more details<br />      return true;<br />}</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>To learn more about session prediction attacks, see: <a href="http://www.webappsec.org/projects/threat/classes/credential_session_prediction.shtml">Credential and Session Prediction</a>.</li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1028181746" Content_Hash="1389796859">
    <Metadata>
      <Id>8029ca0c-2bc3-436f-a288-5b10cc2bb80a</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>RSA-protected Configuration Provider Is Used to Protect Connection Strings in a Web Farm Environment</Title>
      <Category>Data Access</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>RSA-protected Configuration Provider Is Used to Protect Connection Strings in a Web Farm Environment</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that your application uses RSA Protected Configuration provider to&amp;nbsp;protect connection strings in a Web farm environment.</p>
  <h1>How to Fix</h1>
  <p>To protect credentials in configuration files, encrypt them. Place your database connection strings inside the &lt;<strong>connectionStrings</strong>&gt; element of the Web.config file and then encrypt that element by using the Aspnet_regiis utility. You can use DPAPI or RSA encryption. Use RSA in Web farms because you can easily export and import RSA keys across servers. Protecting connection strings is particularly important for connection strings that use SQL authentication because they contain clear text user IDs and passwords.</p>
  <strong>Note:</strong>&amp;nbsp;You should also encrypt connection strings if you use Windows authentication. Although this form of connection string does not contain credentials, you should aim to keep server and database names private. <hr /><p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1115555087" Content_Hash="-1673629613">
    <Metadata>
      <Id>81d3f64a-9741-43a0-948e-69b42be00efc</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Failed Logon Attempts Are Audited</Title>
      <Category>Logging</Category>
      <Phase>Deployment</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Failed Logon Attempts Are Audited</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Check to ensure that failed logon attempts are audited to detect and trace suspicious behavior.</p>
  <br />
  <h1>How to Fix</h1>
  <p>You must log failed logon attempts to be able to detect and trace suspicious behavior.</p>
  <p>
    <strong>To audit failed logon attempts</strong>
  </p>
  <ol>
    <li>Start the Local Security Policy tool from the Administrative Tools program group.
</li>
    <li>Expand <strong>Local Policies</strong> and then select <strong>Audit Policy</strong></li>
    <li>Double-click <strong>Audit account logon events</strong>. </li>
    <li>Click <strong>Failure</strong> and then <strong>OK</strong>. </li>
  </ol>
  <p>Logon failures are recorded as events in the Windows security event log. The following event IDs are suspicious:
</p>
  <ul>
    <li>
      <strong>531</strong>. This means an attempt was made to log on using a disabled account.
</li>
    <li>
      <strong>529</strong>. This means an attempt was made to log on using an unknown user account or using a valid user account but with an invalid password. An unexpected increase in the number of these audit events might indicate an attempt to guess passwords.
</li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-2024764811" Content_Hash="-138481418">
    <Metadata>
      <Id>88e8e948-8b42-49f3-a36b-bb545ffda199</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Mapping Values Are Used for Redirects And Forwards</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology> Any</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Mapping Values Are Used for Redirects And Forwards</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Verify that mapping values are used to determine destinations of redirects and forwards.</p>
  <h1>Why</h1>
  <p>Using mapping values when performing redirects or forwards prevents malicious users from creating hyperlinks that use the redirects or forwards to point to pages other than those intended by the application design.</p>
  <h1>How to Check</h1>
  <p>Use the following steps to make sure that mapping values are used for redirects and forwards:</p>
  <ol>
    <li>
      <p>
        <strong>Identify redirects and forwards.</strong> Review code to find all redirects and forwards.</p>
    </li>
    <li>
      <p>
        <strong>Examine redirects and forwards.</strong> Look for code that handles parameters. Verify that this code does not accept fully qualified URLs as input for calculating destinations of redirects or forwards. If the code uses parameters to calculate destinations of redirects or forwards, verify that only short-hand keywords defined by the application are accepted as input to map to valid and authorized destinations.</p>
    </li>
  </ol>
  <h1>How to Fix</h1>
  <p>Perform the following actions to calculate destinations of redirects and forwards based on mapping values:</p>
  <ol>
    <li>
      <p>
        <strong>Identify redirects and forwards.</strong> Review code to find all redirects and forwards.</p>
    </li>
    <li>
      <p>
        <strong>Enumerate destinations.</strong> Make a list of all destinations pointed to by redirects and forwards.</p>
    </li>
    <li>
      <p>
        <strong>Define mapping values.</strong> Define mapping values for all destinations used by redirects and forwards. A mapping value is a short identifying string that symbolically represents a resource.</p>
    </li>
    <li>
      <p>
        <strong>Rewrite redirects and forwards.</strong> Rewrite redirects and forwards to use mapping values as input to calculate the final destinations of redirects or forwards.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>Consider an on-line banking application that has an insecure redirect:</p>
  <pre>http://www.onlinebank.com/redirect.asp?url=[destination]</pre>
  <p>A phisher may create the following hyperlink to point to his own site and send it in spam messages to millions of people:</p>
  <pre>http://www.onlinebank.com/redirect.asp?url=www.phisher.com</pre>
  <p>When a user sees a link that appears to point to his bank at onlinebank.com in an e-mail message, he clicks that link and sees a web site that looks exactly like the bank's, but is actually a phishing web site used to steal authentication credentials. The user enters his account number and PIN into the web page, receives an error message telling him to try again, and is redirected to the bank's real site. After entering his credentials again, the user successfuly views his account. However, the phisher now has the user's online banking information.</p>
  <h1>Solution Example</h1>
  <p>The simplest solution&amp;nbsp;is to get rid of the redirect altogether, but if it is necessary for application design, then mapping values may be used to mitigate this vulnerability. For example, if redirect.asp is used by the application to redirect to balance.asp, a mapping value called "balance" may be created to signify balance.asp. The page redirect.asp should then be rewritten to accept mapping values as input, instead of urls. The following url should then redirect to balance.asp:</p>
  <pre>http://www.onlinebank.com/redirect.asp?map=balance</pre>
  <p>However, the following malicious hyperlink will no longer work, because supplied input will not match any mapping value defined in the application:</p>
  <pre>http://www.onlinebank.com/redirect.asp?url=www.phisher.com</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information about unvalidated redirects and forwards, please see <a href="http://www.owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards">http://www.owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards</a></li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1814579765" Content_Hash="-1753822663">
    <Metadata>
      <Id>93edf997-ee9c-4290-9041-2673fb656781</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Free Form Input Is Sanitized to Protect Against Malicious Data</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1><p>Ensure that your application validates all forms of input&nbsp;and cleans malicious data either by&nbsp;rejecting or sanitizing it.</p><h1>How to Fix</h1><p>Do not trust input. An attacker passing malicious input can attempt SQL injection, cross-site scripting, and other injection attacks that aim to exploit your application's vulnerabilities. Check for known good data, and constrain input by validating it for type, length, format, and range.</p><p>For Web form applications that obtain input through server controls, use the ASP.NET validator controls, such as the <strong>RegularExpressionValidator</strong>, <strong>RangeValidator</strong>, and <strong>CustomValidator</strong>, to validate and constrain input. Check all numeric fields for type and range. If you are not using server controls, you can use regular expressions and the <strong>Regex</strong> class, and you can validate numeric ranges by converting the input value to an integer or double and then performing a range check.</p><hr><p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="120760848" Content_Hash="-901816280">
    <Metadata>
      <Id>95b03908-7345-47fc-bec1-5a40e8ad1b94</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Sensitive Data Is Protected Over the Network</Title>
      <Category>Communication Security</Category>
      <Phase>Implementation</Phase>
      <Technology>Java</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Sensitive Data Is Protected Over the Network</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that encryption is used to protect all&amp;nbsp;sensitive data transmitted over the network.</p>
  <h1>Why</h1>
  <p>Because network traffic can be easily eavesdropped or modified by attackers, passing sensitive data over the network is prone to a host of attacks, including data theft and data manipulation.</p>
  <h1>How to Check</h1>
  <p>When an application transmits sensitive data over the network, it is necessary to ensure that it is encrypted to protect the data from being&amp;nbsp;read or modified in transit. To ensure this, follow the steps outlined below:</p>
  <ol>
    <li>
      <p>
        <strong>Search for hyperlinks leading to non-SSL resources.</strong>&amp;nbsp;Review application code and look for hyperlinks starting with "http://" - such hyperlinks lead to resources, which are not secured by SSL. Make sure that non-SSL hyperlinks&amp;nbsp;are not used to navigate between&amp;nbsp;pages that handle sensitive data.</p>
    </li>
    <li>
      <p>
        <strong>Identify sensitive information. </strong>Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to, names of customers, government issued ID numbers, credit card and other financial information, passwords and private keys. Some industries, such as health care and banking, have regulatory standards that define sensitive information. Use regulatory requirements, as they apply to your application, to identify sensitive data. Sensitive data can be defined as follows:</p>
      <ul>
        <li>Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with others. </li>
        <li>Information that a user provides that they would not want shared with other users of the application. </li>
        <li>Information that comes from an external trusted source that is not designed to be shared with users</li>
      </ul>
      <strong>
      </strong>
    </li>
    <li>
      <p>
        <strong>Verify that sensitive data is securely transmitted. </strong>Ensure that your application transmits sensitive data in a secured fashion.&amp;nbsp;Verify that&amp;nbsp;your application&amp;nbsp;encrypts the data using&amp;nbsp;encryption or hashing and encrypts the communication link:</p>
      <ul>
        <li>
          <p>
            <strong>Encrypting application data:</strong> Your application securely transforms its application data before transmitting it over the network:</p>
          <ul>
            <li>
              <p>
                <strong>Hashing: </strong>Hashing is a one-way mechanism for protecting sensitive data in a non-retrievable way. If your application uses hashing as a means for protecting sensitive data, verify that the following pieces are in place:</p>
              <ul>
                <li>
                  <strong>Salt</strong>: Your application generates its salt using the SecureRandom class. </li>
                <li>
                  <strong>Function</strong>: Your application uses SHA-256, SHA-384 or SHA-512 as its hash function. </li>
                <li>
                  <strong>Invocation</strong>: Your application invokes the <em>Cipher.doFinal</em> method to perform the hashing procedure. </li>
                <li>
                  <strong>Clean-up</strong>: Your application securely cleans-up all instances of the sensitive data after the hashing procedure has been completed. </li>
              </ul>
            </li>
            <li>
              <p>
                <strong>Encryption:</strong> Encryption is a mechanism for protecting sensitive data in a retrievable way. If your application uses encryption as a means for protecting sensitive data, verify that the following pieces are in place:</p>
              <ul>
                <li>
                  <strong>Encryption Key</strong>: Your application's encryption keys are securely stored inside your application's key store.&amp;nbsp; </li>
                <li>
                  <strong>Function</strong>: Your application uses AES, 3DES, or any other strong symmetric encryption function. </li>
                <li>
                  <strong>Invocation</strong>: Your application invokes the <em>Cipher.init</em> and <em>Cipher.doFinal</em> methods to perform the encryption procedure. </li>
                <li>
                  <strong>Clean-up</strong>: Your application securely cleans-up all instances of the sensitive data and their encryption keys after the encryption procedure has been completed. </li>
              </ul>
            </li>
          </ul>
        </li>
        <li>
          <p>
            <strong>Encrypting the communication links:</strong> Check if your application's communication links are properly secured.</p>
        </li>
      </ul>
    </li>
  </ol>
  <h1>How to Fix</h1>
  <p>Use the following steps to protect sensitive data over the network:</p>
  <ol>
    <li>
      <p>
        <strong>Identify sensitive information. </strong>Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to, names of customers, government issued ID numbers, credit card and other financial information, passwords and private keys. Some industries, such as health care and banking, have regulatory standards that define sensitive information. Use regulatory requirements, as they apply to your application, to identify sensitive data. Sensitive data can be defined as follows:</p>
      <ul>
        <li>Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with others. </li>
        <li>Information that a user provides that they would not want shared with other users of the application. </li>
        <li>Information that comes from an external trusted source that is not designed to be shared with users.</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Choose an appropriate protection mechanism. </strong>Choosing the appropriate protection mechanism may depend on various conditions: purpose of the sensitive data, role of the other network party, infrastructure and supported technologies. Because sensitive data must be encrypted when in transit, there are two strategies, to encrypt the communication channel or to encrypt the application data:</p>
      <ul>
        <li>
          <p>
            <strong>Encrypt the communication channel</strong>: Depending on the current infrastructure and the other network party, it is possible to encrypt the connections using Java's crypto library or any technologies supported by the remote party.</p>
        </li>
        <li>
          <p>
            <strong>Encrypt the application data</strong>: If your application's communication channels cannot be encrypted, encrypt the application data. Hashing or encryption should be used when protecting the application data. Use hashing if the application data will be used only for comparison purposes. Use encryption if the application data will be retrieved at a later stage.</p>
          <p>If hashing is used, choose a longer salt, 16 or more bits.&amp;nbsp;In the case&amp;nbsp;that the produced hash is compromised, longer salts make it more difficult for an attacker to gain access to the sensitive data. If your application uses randomly generated salt, make sure that your application encrypts the random salt and stores it in a configuration file. Always use <strong>SecureRandom</strong> and not <strong>Random</strong> to generate the salt. Example of using <strong>SecureRandom</strong> to generate a random salt:</p>
          <blockquote>
            <pre>public static byte[] generateSalt() throws NoSuchAlgorithmException<br />{<br />      // Note that salt is declared as private static byte[] and is<br />      // initialized to null.<br />      if (salt == null)<br />      {<br />            SecureRandom srand = SecureRandom.getInstance("SHA1PRNG");<br />                          salt = new byte[4];<br />            srand.nextBytes(salt);<br />      }<br />       return salt;<br />}</pre>
          </blockquote>
          <p>Choosing a strong hashing algorithm is also important. Stronger algorithms prevent multiple unique pieces of data from producing identical hash values. The current recommendation is to use SHA-256 or stronger.</p>
          <blockquote>
            <pre>public String hashCredentials(char[] pass, byte[] salt)<br />      throws GeneralSecurityException, IOException<br />{<br />      MessageDigest md;<br />      byte[] tempPass;<br />      byte[] digest;<br />            md = MessageDigest.getInstance("SHA-512");<br />      //Convert char[] to byte[]<br />      tempPass = new byte[pass.length];<br />      for (int i = 0; i &lt; pass.length; i++)<br />      {<br />            tempPass[i] = (byte)pass[i];<br />      }<br />      md.update(tempPass);<br />      md.update(salt);<br />      digest = md.digest();<br />      md.reset();<br />      //Clean tempPass<br />      for (int i = 0; i &lt; tempPass.length; i++)<br />      {<br />            tempPass[i] = 0;<br />      }<br />       return new String(digest);<br />}</pre>
          </blockquote>
          <p>Use encryption if the application data will be retrieved at a later stage.<br /><br />Use symmetric encryption if and only if your application is the only entity that will access the encrypted data. Use a key size of 256-bit or higher and AES for symmetric encryption.<br /><br />Use public/private key encryption if the data will be accessed by two or more parties. Use a key size of 2048-bit or higher and RSA for public/private key encryption. Public/private key encryption allows your application to share sensitive data with multiple entities without disclosing its own encryption key.</p>
          <pre>// Because the following code generates a new encryption key,<br />// make sure to store it into the application's keystore.<br />KeyGenerator kgen = KeyGenerator.getInstance("AES");<br />kgen.init(256);<br />SecretKey skey = kgen.generateKey();<br />// Set up cipherCipher cipher = Cipher.getInstance("AES");<br />cipher.init(Cipher.ENCRYPT_MODE, skey);<br />// Note that sensitiveData is of type byte[] and contains<br />// data that is sensitive in naturebyte[] encrypted = cipher.doFinal(sensitiveData);</pre>
        </li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Apply the appropriate protection mechanism</strong>. Evaluate the code and determine the places where sensitive data is transmitted. Apply the established protection mechanism at each location.</p>
      <blockquote>
        <pre>try<br />{<br />      // The application produces a hash based on the sensitive data<br />      userEmail = MyApp.getEmailForUser(user);<br />      passDigest = encryptCredentials(userEmail, pass, salt);<br />}<br />catch (GeneralSecurityException gse)<br />{<br />      // Add the appropriate logging and exception handling mechanisms<br />      return false;}catch (IOException ioe)<br />{<br />      // Add the appropriate logging and exception handling mechanisms<br />      return false;<br />}<br />// The application stores the hashed sensitive data into the database<br />Connection cn = MyApp.getDBConnection();<br />PreparedStatement st = cn.prepareStatement("select login_attempts from myappUsers"<br />                                        + " where user = ? and pass = ?;");<br />st.setString(1, user);<br />st.setBytes(2, passDigest);<br />ResultSet rs = st.executeQuery();</pre>
      </blockquote>
    </li>
  </ol>
  <p>
    <strong>Note:</strong> PCI DSS requirements state that all sensitive data must be encrypted before being sent over the network or be sent over an encrypted channel.</p>
  <h1>Problem Example</h1>
  <p>The following code authenticates a user based on a username and password. The supplied credentials are compared to the credentials stored in the backend database. Unfortunately, the credentials are transmitted in plaintext and could be stolen if the network is compromised.</p>
  <blockquote>
    <pre>public boolean validateUser(String user, char[] pass)<br />{<br />      // Query the credential store with the provided credentials<br />      ...<br />}</pre>
  </blockquote>
  <h1>Solution Example</h1>
  <p>The following code validates the user based on&amp;nbsp;a given username and password. It uses the user's valid email address and a random salt to encrypt the user's password before comparing&amp;nbsp;the username and the produced digest against the data stored in the backend database. Therefore, the password is encrypted before being transmitted over the network and is protected from being compromised.</p>
  <blockquote>
    <pre>public boolean validateUser(String user, char[] pass)<br />{<br />       ...<br />       // Encrypt the credentials<br />      try<br />      {<br />            userEmail = MyApp.getEmailForUser(user);<br />            passDigest = encryptCredentials(userEmail, pass, salt);<br />      }<br />      catch (GeneralSecurityException gse)<br />      {<br />            // Add the appropriate logging and exception handling mechanisms<br />            return false;<br />      }<br />     catch (IOException ioe)<br />      {<br />            // Add the appropriate logging and exception handling mechanisms<br />            return false;<br />      }<br />       // Query the credential store and execute the rest of the authentication steps<br />      ...<br />}<br />public static byte[] encryptCredentials(String email, char[] pass, byte[] salt)<br />      throws GeneralSecurityException, IOException<br />{<br />      MessageDigest md; <br />      byte[] tempPass;<br />      byte[] rawKey;<br />      // Generate encryption key<br />      md = MessageDigest.getInstance("SHA-512");<br />      md.update(email.getBytes("UTF-8"));<br />      md.update(salt);<br />      rawKey = md.digest();<br />      md.reset();<br />      SecretKeySpec skeySpec = new SecretKeySpec(rawKey, "AES");<br />      // Set up cipher<br />      Cipher cipher = Cipher.getInstance("AES");<br />      cipher.init(Cipher.ENCRYPT_MODE, skeySpec);<br />      // Convert char[] to byte[]<br />      tempPass = new byte[pass.length];<br />      for (int i = 0; i &lt; pass.length; i++)<br />      {<br />            tempPass[i] = (byte)pass[i];<br />      }<br />      // Encrypt password<br />      byte[] encrypted = cipher.doFinal(tempPass);<br />            //Clean tempPass<br />      for (int i = 0; i &lt; tempPass.length; i++)<br />      {<br />            tempPass[i] = 0;<br />      }<br />      return encrypted;<br />}</pre>
  </blockquote>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="2074441153" Content_Hash="926405235">
    <Metadata>
      <Id>982be6a3-75f4-40f1-99b5-87aa9cd7683a</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Unused Ports Are Blocked by Default</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology> Any</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Unused Ports Are Blocked by Default</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Check to ensure that unused ports are blocked by default when configuring your network firewall.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="951980908" Content_Hash="2008124488">
    <Metadata>
      <Id>9be158d9-e6c2-434d-9d78-ef615b9219cb</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>SAM Is Secured</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>SAM Is Secured</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>
      <div>Web Application</div>
    </li>
  </ul>
  <h1>What to Check For</h1>
  <p>Check to ensure that the Security Account Manager (SAM) database in the registry is secured for standalone servers.</p>
  <br />
  <h1>How to Fix</h1>
  <p>Stand-alone servers store account names and one-way (non-reversible) password hashes (LMHash) in the local Security Account Manager (SAM) database. The SAM is part of the registry. Typically, only members of the Administrators group have access to the account
 information.</p>
  <p>Although the passwords are not actually stored in the SAM and password hashes are not reversible, if an attacker obtains a copy of the SAM database, the attacker can use brute force password techniques to obtain valid user names and passwords.</p>
  <p>Restrict LMHash storage in the SAM by creating the key (not value) <strong>NoLMHash</strong> in the registry as follows:</p>
  <p>
    <strong>HKLM\System\CurrentControlSet\Control\LSA\NoLMHash</strong>
  </p>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information, see Microsoft Knowledge Base article 299656, "New Registry Key to Remove LM Hashes from Active Directory and Security Account Manager."</li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-46749365" Content_Hash="-1686302977">
    <Metadata>
      <Id>9ce8b183-9ade-4eb4-bd02-97b0e5b4f961</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Output That Contains Untrusted Data Is Encoded with HtmlEncode Or UrlEncode</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Output That Contains Untrusted Data Is Encoded with HtmlEncode Or UrlEncode</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure&amp;nbsp;that any untrusted input used in the output stream is first encoded with <strong>HtmlEncode</strong> or <strong>UrlEncode</strong>.</p>
  <h1>Why</h1>
  <p>Echoing input directly back to the user makes your application vulnerable to cross-site scripting attacks. </p>
  <h1>How to Check</h1>
  <p>Use the following steps to check for this problem:</p>
  <ol>
    <li>
      <p>
        <strong>Look for user supplied input inside HTML tag. </strong>Check for the existence of user supplied input inside html tags your application generates. For instance &lt;A href='somelink'&gt;USERINPUT&lt;/a&gt;&amp;nbsp;<br /></p>
    </li>
    <li>
      <p>
        <strong>Look for user supplied input elsewhere in your application output. </strong>Check for existing user supplied input in the following locations: </p>
      <ul>
        <li>In the HTML tags themselves. For instance, &lt;A href='USERINPUT'&gt; </li>
        <li>In database tables that are later used as page content. For instance, you may find unencoded user input in a user profile stored in your database. </li>
        <li>In files that are later used as page content. For instance, you may find unencoded user input in a local configuration file.</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Verify all&amp;nbsp;user&amp;nbsp;input&amp;nbsp;input is encoded. </strong>The untrusted data should be encoded using <strong>HtmlEncode</strong> or <strong>UrlEncode</strong>. Make sure that you encode data at the last possible opportunity before the data is returned to the client. If you encode any earlier, you may not know the exact context that the data will be used in and&amp;nbsp;the corresponding&amp;nbsp;format you need to encode into. Early encoding of some data can also&amp;nbsp;result in double encoding problems. </p>
    </li>
  </ol>
  <h1>How to Fix</h1>
  <p>Encode untrusted data ensures that it is treated as literal text and not as a script. You can use the <strong>Microsoft.Security.ApplicationAntiXSSLibrary.HtmlEncode</strong> method to encode untrusted data.&amp;nbsp;&amp;nbsp;If you write URLs that might contain unsafe characters because they have been constructed from input data or data from a shared database, use <strong>Microsoft.Security.ApplicationAntiXSSLibrary.UrlEncode</strong> to make them safe. </p>
  <p>
    <strong>Note</strong> &amp;nbsp; &amp;nbsp; Make sure that you encode data at the last possible opportunity before the data is returned to the client.&amp;nbsp; If you encode any earlier than this, you may not know the exact context that the data will be used in, and hence the format you need to encode into.&amp;nbsp; Also, early encoding of some data can result in double encoding problems. </p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="2139599272" Content_Hash="36488923">
    <Metadata>
      <Id>a314bf76-87d5-4247-aefe-0adcc397b645</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Appropriate ACLs Are Configured on Web Site Files</Title>
      <Category>Authorization</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1><p>Check to ensure that your application configures right access control lists (ACLs) for the right identities on its Web site files.</p><h1>How to Fix</h1><p>You need to configure the right access control lists (ACLs) for the right identities on your Web site files so that IIS and also ASP.NET file authorization control access to these files appropriately. You need to grant access to the following identities: </p><ul><li><strong>Your Web application identity.</strong> If you are using a custom service account to run your ASP.NET application, you can grant the appropriate permissions to the IIS metabase and to the file system by running Aspnet_regiis.exe with the -<strong>ga</strong> switch. </li><li><strong>Your application's users.</strong> ASP.NET file authorization performs access checks for file types mapped by IIS to the ASP.NET ISAPI extension (Aspnet_isapi.dll). If you are using Windows authentication, the authenticated user's Windows access token (which may be IUSR_MACHINE for anonymous users) is checked against the ACL attached to the requested ASP.NET file. If you are using forms authentication, access is checked against IUSR_MACHINE. </li></ul><p>File authorization works automatically when using Windows authentication, and there is no need to impersonate the original user. The <strong>FileAuthorizationModule</strong> only performs access checks against the requested file. For example, if you request Default.aspx and it contains an embedded user control (Usercontrol.ascx), which in turn includes an image tag (pointing to Image.gif), the <strong>FileAuthorizationModule</strong> performs an access check for Default.aspx and Usercontrol.ascx, because these file types are mapped by IIS to the ASP.NET ISAPI extension. The <strong>FileAuthorizationModule</strong> does not perform a check for Image.gif, because this is a static file handled internally by IIS. However, because access checks for static files are performed by IIS, the authenticated user must still be granted read permission to the file with an appropriately configured ACL.</p><hr><p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1651774376" Content_Hash="-503200626">
    <Metadata>
      <Id>a7901344-ba40-4047-8368-a9ecfea7c973</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Intranet Traffic Is Encrypted Or Restricted</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology> Any</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Intranet Traffic Is Encrypted Or Restricted</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Check to ensure that intranet traffic is encrypted (for example, with SSL) or restricted if you do not have a secure data center infrastructure.</p>
  <h1>How to Fix</h1>
  <p>For inside (intranet-facing) NICs, if you do not have a secure data center and you have sensitive information passing between computers, you need to consider whether to encrypt the traffic and whether to restrict communications between the Web server and
 downstream servers (such as an application server or database server). Encrypting network traffic addresses the threat posed by network eavesdropping. If the risk is deemed sufficiently small you may choose not to encrypt&amp;nbsp;the traffic.</p>
  <p>The type of encryption used also affects the types of threats that it addresses. For&amp;nbsp;example, SSL is application-level encryption, whereas IPSec is transport layer encryption. As a result, SSL counters the threat of data tampering or information disclosure
 from another process on the same machine, particularly one running under a different account in addition to the network eavesdropping threat.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1198154633" Content_Hash="2054332423">
    <Metadata>
      <Id>a8a568b3-6d2c-4a5f-b710-03d7a9d0beb4</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>SQL Queries Use Parameterized Stored Procedures And Type-safe SQL Parameters</Title>
      <Category>Data Access</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1><p>Ensure that your application uses parameterized stored procedures and type-safe SQL parameters when constructing SQL queries.</p><h1>How to Fix</h1><p>Use type safe parameters when constructing SQL queries to avoid possible SQL injection attacks that can occur with unfiltered input. You can use type safe parameters with stored procedures and with dynamic SQL statements. Parameters are treated as literal values by the database and not as executable code. Parameters are also checked for type and length.</p><p>The following code shows how to use type safe parameters with the <strong>SqlParameterCollection</strong> when calling a stored procedure.</p>
<pre>using System.Data;<br>using System.Data.SqlClient;<br>using (SqlConnection connection = new SqlConnection(connectionString))<br>{<br> DataSet userDataset = new DataSet();<br> SqlDataAdapter myCommand = new SqlDataAdapter(LoginStoredProcedure", connection);<br> myCommand.SelectCommand.CommandType = CommandType.StoredProcedure;<br> myCommand.SelectCommand.Parameters.Add("@au_id", SqlDbType.VarChar, 11);<br> myCommand.SelectCommand.Parameters["@au_id"].Value = SSN.Text;<br> myCommand.Fill(userDataset);<br>}  </pre><br><p>In the preceding code example, the input value cannot be longer than 11 characters. If the data does not conform to the type or length defined by the parameter, the <strong>SqlParameter</strong> class throws an exception.</p><h1>Additional Resources</h1><p>For more information about preventing SQL injection, see <a href="http://msdn2.microsoft.com/en-us/library/ms998271.aspx">HOW TO: Protect from SQL Injection in ASP.NET</a>&nbsp;on MSDN.</p><hr><p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-2032736227" Content_Hash="44334822">
    <Metadata>
      <Id>abaaab64-540f-4535-b249-3c9295b7b1d0</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Authentication Cookies Are Restricted to Only HTTPS Connections by Using the RequireSSL Attribute</Title>
      <Category>Authentication</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1><p>Ensure that your application restricts authentication cookies&nbsp;to only&nbsp;HTTPS connections by using the requireSSL attribute.</p><h1>Why</h1><p>By using SSL, you prevent an attacker from reading a captured authentication cookie&nbsp;and gaining spoofed access to your application.</p><h1>How to Fix</h1><p>Set the <strong>secure</strong> property of the authentication cookie to ensure that browsers only send authentication cookies over HTTPS connections. </p><p>Set the <strong>secure</strong> property by using <strong>requireSSL="true"</strong> on the &lt;<strong>forms</strong>&gt; element as shown here:</p><div><pre>&lt;forms loginUrl="Secure\Login.aspx"<br>        requireSSL="true" ... /&gt;</pre></div><hr><p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-2122265496" Content_Hash="-1940641994">
    <Metadata>
      <Id>ad75cecc-a8d1-46c9-a6ac-9bad61328e80</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Application Does Not Rely Only on Client-Side Validation</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Application Does Not Rely Only on Client-Side Validation</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Do not rely on client-side validation for security purposes. Use server-side validation to ensure that data is safe and perform security decisions based on that. Client-side validation should be used solely to reduce round trips to the server and to improve the user experience.</p>
  <h1>Why</h1>
  <p>Client side validation can be easily bypassed. For example, a malicious user could disable the client-side script routines by disabling JavaScript. Users may also construct their own form posts using custom html, or using an HTTP proxy to modify form posts. If developers rely on the controls in the client's user interface and do not validate all results on the back end, it may introduce injection vulnerabilities that would allow an attacker to bypass data input restrictions and gain access to unintended application functionality.</p>
  <h1>When</h1>
  <p>During implementation, ensure all input from the client is validated, even if the input is not stored.</p>
  <h1>How</h1>
  <p>It's important to specify what input is acceptable, rather than trying to specify all the variations of input that are illegal (whitelisting as opposed to blacklisting). Use ASP.NET validator controls to check user input on the server side and provide feedback to the user when input fails to pass validation requirements. Follow these steps on each form page in an application:</p>
  <ol>
    <li>
      <p>
        <strong>Determine the required fields.</strong> Use the required field validator control to ensure all required fields are present. Here is an example that declares a textfield in an ASP page that is a required field:</p>
      <pre>&lt;td&gt;<br />&amp;nbsp;&amp;nbsp; &lt;asp:RequiredFieldValidator runat=server<br />&amp;nbsp;&amp;nbsp; ControlToValidate=txtName<br />&amp;nbsp;&amp;nbsp; ErrorMessage="User ID is required."&gt; *<br />&amp;nbsp;&amp;nbsp; &lt;/asp:RequiredFieldValidator&gt;<br />&lt;/td&gt;<br />&lt;td&gt;User ID:&lt;/td&gt;<br />&lt;td&gt;&lt;input type=text runat=server id=txtName&gt;&lt;/td&gt;</pre>
      <p>The * is displayed next to the label if the input is blank. The error message is reported in a summary. The "ControlToValidate" property specifies the ID of the control to validate. The final step is to add a validation summary to the top of the page like so:</p>
      <pre>&lt;asp:ValidationSummary runat=server<br />HeaderText="There were errors on the page:" /&gt;</pre>
    </li>
    <li>
      <p>
        <strong>Enforce numeric range constraints.</strong> Use the RangeValidator control to ensure any numeric values are constrained to a specific, acceptable range. Here is an example that declares an integer field in an ASP page that has a valid range from 1 to 50:</p>
      <pre>&lt;td&gt;<br />&amp;nbsp; &lt;asp:RangeValidator id="Range1"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ControlToValidate="txtState"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; MinimumValue="1"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; MaximumValue="50"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Type="Integer"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; EnableClientScript="false"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Text="The value must be from 1 to 10!"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; runat="server"&gt; * <br />&amp;nbsp; &lt;/asp:RangeValidator&gt;<br />&lt;/td&gt;<br />&lt;td&gt;State:&lt;/td&gt;<br />&lt;td&gt;&lt;input type=text runat=server id=txtState&gt;&lt;/td&gt;</pre>
    </li>
    <li>
      <p>
        <strong>Validate verification fields.</strong> Fields such as password entry are often verified by having the user re-type them to ensure they are correct. Use the CompareValidator control to make the comparisons and ensure validity/integrity. Here is an example that declares two password fields in an ASP page that must match in order to validate properly:</p>
      <pre>&lt;asp:CompareValidator runat=server<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ControlToValidate=txtRePWord<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ControlToCompare=txtPWord<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ErrorMessage="Passwords do not match." /&gt;</pre>
      <p>In this case, the two fields being compared are "txtPWord" and "txtRePWord". If they do not match, validation fails with the error message, "Passwords do not match".</p>
    </li>
    <li>
      <p>
        <strong>Enforce type constraints on string fields.</strong> String fields are the most difficult type of input to effectively validate because the range of acceptable characters is much larger then numeric and enumerated types. Regular expressions provide a flexible mechanism for dictating valid patterns and characters. Use the <em>RegularExpressionValidator</em> to perform a variety of checks on string-based fields such as zip codes and phone numbers. Here is an example that declares an text field in an ASP page that should represent a five digit zip code, consisting entirely of numberic digits, and a validator to enforce those constraints:</p>
      <pre>&lt;input type=text runat=server id=txtZip&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:RegularExpressionValidator runat=server<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ControlToValidate="txtZip"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ErrorMessage="Zip code must be 5 digits, all numbers."<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ValidationExpression="[0-9]{5}"&gt; * <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/asp:RegularExpressionValidator&gt;<br />&lt;td&gt;Zip code:&lt;/td&gt;<br />&lt;td&gt;&lt;input type=text runat=server id=txtZip&gt;&lt;/td&gt;</pre>
    </li>
    <li>
      <p>
        <strong>Use custom validation to handle remaining input constraints.</strong> The built-in ASP.NET validation controls handle most of the cases that commonly arise in Web applications, but there may be times when they are not appropriate. The CustomValidator enables custom validation code that can plugs into the existing validation system. Here is an example that declares a text field in an ASP page. For this particular text field, there is business logic that needs to be satisfied which is not easily constrainable by the other validation constructs, so a custom validator is implementated that ensures the string in the text field does not start with the letter "a":</p>
      <pre>&lt;%@ Page Language="vb" %&gt;<br />&lt;script runat=server&gt;</pre>
      <pre>public sub CheckID(source as Object, args as ServerValidateEventArgs)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; args.IsValid = args.Value.substring(0, 1).tolower() &lt;&gt; "a"<br />end sub </pre>
      <pre>&lt;/script&gt;</pre>
      <p>To call this function, add a CustomValidator, which is designed to call developer code to perform its check. Here is the declaration:</p>
      <pre>&lt;asp:CustomValidator runat=server<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; controltovalidate="txtName"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; errormessage="ID is already in use."<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; OnServerValidate="CheckID" /&gt;</pre>
      <p>It is worth noting that this could have been done with the RegularExpression validation control, but in this case it makes more sense to use custom validation since a type of high-level validation that could conceivably be more complex then a simple pattern match is being defined (e.g., the validation rules might change based on application state).</p>
    </li>
    <li>
      <p>
        <strong>Use the Regex class to validate other sources.</strong> Most Web applications accept input from various sources, including HTML controls, server controls, query strings, and cookies. Validate input from all of these sources to help prevent injection attacks. Use regular expressions to help validate input. The following example shows how to use the Regex class.</p>
      <pre>using System.Text.RegularExpressions ;<br />&amp;nbsp;// Instance method:<br />Regex reg = new Regex(@"^[a-zA-Z'.\s]{1,40}$");<br />Response.Write(reg.IsMatch(Request.QueryString["Name"]));<br />// Static method:<br />if (!Regex.IsMatch(Request.QueryString["Name"],@"^[a-zA-Z'.\s]{1,40}$")) <br />{<br />&amp;nbsp;&amp;nbsp; // Name does not match expression <br />}</pre>
      <p>If you cannot cache your regular expression for frequent use, you should use the static IsMatch method where possible for performance reasons, to avoid unnecessary object creation.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>Consider a very simple form for an online shopping cart. The cart component consists of two components:</p>
  <ol>
    <li>
      <p>An HTML form that contains all of the fields that make up the order to be submitted for processing:</p>
      <pre>&lt;html&gt;<br />  &lt;head&gt;<br />    &lt;title&gt;Widget shopping cart&lt;/title&gt;<br />  &lt;/head&gt;<br />  &lt;body&gt;<br />    &lt;H1&gt;welcome to the most boring shopping cart on the web!&lt;/H1&gt; </pre>
      <pre>    A widget's current price is $19.95 USD. Please use the following form to submit an order.</pre>
      <pre>    &lt;form action="process_order.aspx" method="POST"&gt;  <br />      &lt;p&gt;Please enter the number of widgets you would like to purchase:&lt;/p&gt;<br />      quantity:&lt;br/&gt;<br />      &lt;select name="WidgetQuantity"&gt;<br />        &lt;option value="1"&gt;1&lt;/option&gt;<br />        &lt;option value="2"&gt;2&lt;/option&gt; <br />        &lt;option value="3"&gt;3&lt;/option&gt;<br />        &lt;option value="4"&gt;4&lt;/option&gt;<br />      &lt;/select&gt;</pre>
      <pre>      ...<br />      &lt;input type="submit" value="order"/&gt;<br />    &lt;/form&gt;</pre>
      <pre>  &lt;/body&gt;<br />&lt;/html&gt;</pre>
    </li>
    <li>
      <p>An ASP.NET page that processes the form submissions and performs the necessary steps to create the order.</p>
      <pre>int dQuantity = Request("WidgetQuantity");<br />double dPrice = 19.95;<br />double dCost = dQuantity * dPrice;</pre>
      <p>This server side page is problematic because it lacks validation to ensure the quantity field is correct. The application works fine in the case where a user plays by the rules and submits the form as it is shown, because the quantity field ensures that the range constraints for the order quantity are always valid. However, if a clever user decides to construct their own form and submits a negative WidgetQuantity field, it causes a negative balance. Depending on what e-commerce system is used, this could result in a credit to the user's account. It also might subtract the negative balance from the company's inventory, which would carry significant ramifications and costs later on.</p>
    </li>
  </ol>
  <h1>Solution Example</h1>
  <p>Consider the following ASP.NET page that processes the form submissions and performs the necessary steps to create an order:</p>
  <pre>&lt;%@ Page Language="vb" %&gt;<br />&lt;script runat=server&gt;<br />public sub OnSubmit(source as Object, e as EventArgs)<br />    if Page.IsValid then<br />        ' Now we can perform our transaction.<br />       int dQuantity = Request("WidgetQuantity");<br />       double dPrice = 19.95;<br />       double dCost = dQuantity * dPrice;<br />    end if<br />end sub<br />&lt;/script&gt;<br />&lt;html&gt;<br />&lt;head&gt;<br />&lt;title&gt;Validation Sample&lt;/title&gt;<br />&lt;/head&gt;<br />&lt;body&gt;</pre>
  <pre>&lt;form runat=server&gt;<br />&lt;asp:ValidationSummary runat=server headertext="There were errors on the page:" /&gt;</pre>
  <pre>&lt;table&gt;<br />  &lt;tr&gt;<br />    &lt;td&gt;<br />        &lt;asp:RequiredFieldValidator runat=server <br />            controltovalidate="WidgetQuantity"<br />            errormessage="WidgetQuantity is required."&gt;*<br />        &lt;/asp:RequiredFieldValidator&gt;<br />    &lt;/td&gt;<br />    &lt;td&gt;A widget's current price is $19.95 USD. Please use the following form to submit an order.&lt;/td&gt;<br />    &lt;td&gt;<br />      &lt;select name="WidgetQuantity"&gt;<br />        &lt;option value="1"&gt;1&lt;/option&gt;<br />        &lt;option value="2"&gt;2&lt;/option&gt;<br />        &lt;option value="3"&gt;3&lt;/option&gt;<br />        &lt;option value="4"&gt;4&lt;/option&gt;<br />      &lt;/select&gt;<br />     &lt;asp:RegularExpressionValidator runat=server display=dynamic<br />            controltovalidate="WidgetQuantity"  <br />            errormessage="WidgetQuantity must be a non-zero, positive integer." <br />            validationexpression="[1-9]{1}[0-9]{0,7}" /&gt;</pre>
  <pre>    &lt;/td&gt;<br />  &lt;/tr&gt;<br />...<br />&lt;/table&gt;&lt;br&gt;<br />&lt;input type=submit runat=server id=cmdSubmit value=Submit onserverclick=OnSubmit&gt;<br />&lt;/form&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;</pre>
  <p>The ASP.NET Validator control provides client-side validation to reduce roundtrips to the server and improve user experience, but also provides server-side validation to ensure that the widget quantity field is a positive integer. It is also validated as a required field that must be provided before submitting the order.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1388620645" Content_Hash="-786183301">
    <Metadata>
      <Id>af830dac-244a-4887-88c9-5a30bdb2b422</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Unused Administrative Interfaces Are Disabled</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology> Any</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Unused Administrative Interfaces Are Disabled</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Check to ensure that unused administrative interfaces are disabled when&amp;nbsp;configuring your network devices for security.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-692889882" Content_Hash="1214015303">
    <Metadata>
      <Id>afda6b09-c1bc-425a-a59a-f4ffe7c085b9</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Application Is Partitioned into Public And Private Domains</Title>
      <Category>Authorization</Category>
      <Phase>Deployment</Phase>
      <Technology>Java</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Application Is Partitioned into Public And Private Domains</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that your application clearly defines the boundaries between its protected and unprotected resources.</p>
  <h1>Why</h1>
  <p>Defining a boundary between public and restricted content helps establish the check points that will allow access to the restricted content.</p>
  <h1>How to Check</h1>Follow these steps to ensure your application is partitioned into public and protected (restricted) domains: <ol><li><p><strong>Enumerate all web accessible resources. </strong>Identify the protected resources from the public resources. Common protected resources include but are not limited to:</p><ul><li>Resources that require authentication </li><li>Critical application resources </li><li>Sensitive/confidential data</li></ul></li><li><p><strong>Ensure that protected resources have the appropriate access controls. </strong>Determine if all protected resources have the appropriate access controls assigned to them.</p></li><li><p><strong>Check if there is separation on disk between public and protected resources. </strong>Examine the local filesystem structure. Check if a protected resource is located inside a public directory and vice versa.</p></li><li><p><strong>Verify the local system permissions for all resources. </strong>For each resource, check that the local system permissions are set accordingly. If the resource is public, verify that anonymous users can access it. If the resource is protected, verify that only authorized users can access it.</p></li></ol><h1>Problem Example</h1><p>MyApp is a financial tool that generates reports based on sensitive data. It allows the user to upload the financial data and download the report. Since the application is small, all of its content is located within the same directory. The access control is enforced by the web application through checking the required permissions before a given call is executed.</p><p>Since both data and code is within the same directory, it may be possible for an attacker to gain access to the raw financial data.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1671343103" Content_Hash="560514974">
    <Metadata>
      <Id>afda96a3-d516-4acd-904e-54c974d88932</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>All Output Data Is Encoded</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Design</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>All Output Data Is Encoded</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>1</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p />Ensure&amp;nbsp;that any untrusted input used in the output stream is first encoded with <em>HtmlEncode</em> or <em>UrlEncode</em>.<span><p /></span><h1>Why</h1><p /><span>Echoing input directly back to the user makes your application vulnerable to cross-site scripting attacks. <p /></span><h1>How to Check</h1><p>Use the following steps to check for this problem:</p><ol><li><p><strong>Look for user supplied input inside HTML tag. </strong>Check for the existence of user supplied input inside html tags your application generates. For instance <em>&lt;A href='somelink'&gt;USERINPUT&lt;/a&gt;&amp;nbsp;<br /></em></p></li><li><p /><strong>Look for user supplied input elsewhere in your application output. </strong>Check for existing user supplied input in the following locations: <ul><li>In the HTML tags themselves. For instance, <em>&lt;A href='USERINPUT'&gt;</em></li><li>In database tables that are later used as page content. For instance, you may find unencoded user input in a user profile stored in your database. </li><li>In files that are later used as page content. For instance, you may find unencoded user input in a local configuration file.</li></ul></li><li><p><strong>Verify all&amp;nbsp;user&amp;nbsp;input&amp;nbsp;input is encoded. </strong>The untrusted data should be encoded using <em>HtmlEncode</em> or <em>UrlEncode</em>. Make sure that you encode data at the last possible opportunity before the data is returned to the client. If you encode any earlier, you may not know the exact context that the data will be used in and&amp;nbsp;the corresponding&amp;nbsp;format you need to encode into. Early encoding of some data can also&amp;nbsp;result in double encoding problems. </p></li></ol><h1>How to Fix</h1><p>Encode untrusted data ensures that it is treated as literal text and not as script.&amp;nbsp; You can use the <em>Microsoft.Security.ApplicationAntiXSSLibrary.HtmlEncode</em> method to encode untrusted data.&amp;nbsp;&amp;nbsp;If you write URLs that might contain unsafe characters because they have been constructed from input data or data from a shared database, use <em>Microsoft.Security.ApplicationAntiXSSLibrary.UrlEncode</em> to make them safe. </p><p><strong>Note:</strong>&amp;nbsp;Make sure that you encode data at the last possible opportunity before the data is returned to the client.&amp;nbsp; If you encode any earlier than this, you may not know the exact context that the data will be used in, and hence the format you need to encode into.&amp;nbsp; Also, early encoding of some data can result in double encoding problems.</p><p /><hr /><p /><p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="2031327700" Content_Hash="1242372540">
    <Metadata>
      <Id>b01640d3-706c-480d-9cce-419d32d97bed</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Sensitive Data Is Protected Over the Network</Title>
      <Category>Sensitive Data</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Sensitive Data Is Protected Over the Network</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>ASP.NET 4.0</li>
  </ul>
  <h1>What to Check For</h1>
  <p>Ensure that encryption is used to protect sensitive data that is transmitted over the network.</p>
  <h1>Why</h1>
  <p>When data is sent over the network, it typically passes through several intermediate relays on its way towards some final destination. Using a safe protocol to transmit information is important because it adds protection against a Network Eavesdropping Attack or Man in the Middle Attack during transport.</p>
  <h1>How to Check</h1>
  <p>When an application transmits sensitive data over the network, it is necessary to ensure that it is encrypted to protect the data from being stolen or modified in transit. To ensure this, follow the steps outlined below:</p>
  <ol>
    <li>
      <p>
        <strong>Identify sensitive information.</strong> Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to, names of customers, government issued ID numbers, credit card and other financial information, passwords, and private keys. Some industries, such as health care and banking, have regulatory standards that define sensitive information. Use regulatory requirements, as they apply to your application, to identify sensitive data. Sensitive data can be defined as follows:</p>
      <ul>
        <li>Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with others. </li>
        <li>Information that a user provides that they would not want shared with other users of the application. </li>
        <li>Information that comes from an external trusted source that is not designed to be shared with users</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Verify that sensitive data is securely transmitted.</strong> Ensure that your application transmits sensitive data in a secured fashion. Check if your application uses the following approaches:</p>
      <ul>
        <li>
          <p>
            <strong>Encrypting the communication links.</strong> Using the "All sensitive communications are encrypted" checklist, check if your application's communication links are properly secured. </p>
        </li>
        <li>
          <p>
            <strong>Encrypting application data.</strong> If your application encrypts its application data, check if your application securely transforms its application data before transmitting it over the network: </p>
        </li>
        <li>
          <p>
            <strong>Hashing.</strong> Hashing is a one-way mechanism for storing sensitive data in a non-retrievable way. If your application uses hashing as means for storing sensitive data, verify that the following pieces are in place:</p>
          <ul>
            <li>
              <strong>Salt:</strong> Check if your application generates its salt using the <em>RNGCryptoServiceProvider</em> class. </li>
            <li>
              <strong>Function:</strong> Check if your application uses SHA-256, SHA-384, or SHA-512 as its hash function. </li>
            <li>
              <strong>Invocation:</strong> Check if your application invokes the <em>HMAC.ComputeHash</em> method to perform the hashing procedure. </li>
            <li>
              <strong>Clean-up:</strong> Check if your application securely cleans-up all instances of the sensitive data after the hashing procedure has been completed. </li>
          </ul>
        </li>
        <li>
          <p>
            <strong>Encryption.</strong> Encryption is a mechanism for storing and transmitting sensitive data in a retrievable way. If your application uses encryption as means for storing sensitive data, verify that the following pieces are in place:</p>
          <ul>
            <li>
              <strong>Encryption Key:</strong> Verify that your application's encryption keys are securely stored inside your application's key store.&amp;nbsp; </li>
            <li>
              <strong>Function:</strong> Check if your application uses AES, AES256, or a similar modern strong symmetric encryption function. 3DES and other, older algorithms should be avoided for new development. </li>
            <li>
              <strong>Invocation:</strong> Check if your application invokes the <em>SymmetricAlgorithm.Create</em> and <em>ICryptoTransform.TransformFinalBlock</em> methods to perform the encryption procedure. </li>
            <li>
              <strong>Clean-up:</strong> Check if your application securely cleans-up all instances of the sensitive data and their encryption keys after the encryption procedure has been completed.</li>
          </ul>
        </li>
      </ul>
    </li>
  </ol>
  <h1>How to Fix</h1>
  <p>Use the following steps to protect sensitive data over the network:</p>
  <ol>
    <li>
      <p>
        <strong>Identify sensitive information.</strong> Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to, names of customers, government issued ID numbers, credit card and other financial information, passwords, and private keys. Some industries, such as health care and banking, have regulatory standards that define sensitive information. Use regulatory requirements, as they apply to your application, to identify sensitive data. Sensitive data can be defined as follows:</p>
      <ul>
        <li>Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with others. </li>
        <li>Information that a user provides that they would not want shared with other users of the application. </li>
        <li>Information that comes from an external trusted source that is not designed to be shared with users.</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Choose an appropriate protection mechanism.</strong> Choosing the appropriate protection mechanism may depend on various conditions: purpose of the sensitive data, role of the other network party, infrastructure, and supported technologies. Because sensitive data must be encrypted when in transit, there are two potential strategies — Encrypt the application data or Encrypt the communication channel:</p>
      <ul>
        <li>
          <p>
            <strong>Encrypt the communication channel.</strong> Depending on the current infrastructure and the other network party, it is possible to encrypt the connections using SSL, IPSec, or any technologies supported by the remote party. </p>
        </li>
        <li>
          <p>
            <strong>Encrypt the application data.</strong> If your application's communication channels cannot be encrypted, encrypt the application data. Hashing or encryption should be used when protecting the application data. Use hashing if the sensitive data will be used only for comparison purposes and the actual contents of the data will never need to be recovered. Use encryption if the sensitive data will need be retrieved at a later stage.</p>
          <ul>
            <li>
              <p>
                <strong>Hashing</strong>: If hashing is used, choose a longer salt, 16 or more bits. The salt is random data that is known only by the application; to guess the value of the original data given the hash, an attacker also has to guess the salt. It is recommended to have a longer salt because it provides a bigger input to the hash function. Assuming that the produced hash is compromised, longer salts makes it more difficult for an attacker to gain access to the sensitive data. If your application uses randomly generated salt, make sure that your application encrypts the random salt and stores it into a configuration file. Use RNGCryptoServiceProvider to generate the salt. Example:</p>
              <pre>public static byte[] GenerateSalt()<br />{<br />    byte[] randBytes = new byte[4];<br />    RNGCryptoServiceProvider gen =<br />     new RNGCryptoServiceProvider();<br />    gen.GetNonZeroBytes(randBytes);<br />    return randBytes;<br />}</pre>
              <p>Choosing a strong hashing algorithm is also important. Stronger algorithms prevent multiple unique pieces of data from producing identical hash values. The current recommendation is to use SHA-256 or stronger.</p>
              <pre>public byte[] HashCredentials(byte[] pass, byte[] salt)<br />{<br />    HMACSHA512 md;<br />    byte[] digest; <br />    md = new HMACSHA256(salt);<br />    md.Initialize();<br />    digest = md.ComputeHash(pass);<br />    md.Clear();<br />    return digest;<br />}</pre>
            </li>
            <li>
              <p>
                <strong>Encrypting</strong>: If encryption is used, use a key size of 256-bit or higher for symmetric encryption and 2048-bit or higher for public/private key encryption. Use AES for symmetric encryption or RSA for public/private key encryption. You should use symmetric encryption if and only if your application is the only entity that will access the encrypted data. If the data will be accessed by more than one party, use public/private key encryption. Public/private key encryption allows your application to share sensitive data with multiple entities without disclosing its own encryption key.</p>
              <pre>Rijndael encMD;ICryptoTransform encCT;<br />byte[] digest;<br />// The following code obtains the encryption key and initialization vector<br />// from the application's key repository. <br />encMD = Rijndael.Create();<br />encMD.Key = MyApp.Crypto.GetEncryptionKey();<br />encMD.IV = MyApp.Crypto.GetEncryptionIV();<br />encCT = encMD.CreateEncryptor(); <br />// Note that sensitiveData is of type byte[] and contains<br />// data that is sensitive in nature<br />digest = encCT.TransformFinalBlock(sensitiveData, 0, sensitiveData.Length);<br />encMD.Clear();</pre>
            </li>
          </ul>
        </li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Apply the appropriate protection mechanism</strong>: Evaluate the code and determine the places where sensitive data is transmitted. Apply the established protection mechanism at each location. For instance, if your application processes credit card transactions across a hostile network environment, encrypt the credit card information before transmitting it to the appropriate network entity:</p>
      <pre>void ProcessPayment(byte[] ccInfo, float amount)<br />{<br />    byte[] ccDigest = MyApp.Crypto.EncryptCCInfo(ccInfo);<br />    SqlConnection connection;<br />    SqlCommand command;<br />    SqlDataReader result;<br />    string query = "execute QueuePayment @ccDigest @amount;";<br />    connection = MyApp.DBManager.GetDBConnection();<br />    command = new SqlCommand(query, connection);<br />    command.Parameters.Add("@ccDigest", System.Data.SqlDbType.Binary);<br />    command.Parameters["@ccDigest"].Value = ccDigest;<br />    command.Parameters.Add("@amount", System.Data.SqlDbType.Float);<br />    command.Parameters["@amount"].Value = amount;<br />    ...<br />}</pre>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>An e-commerce application written in ASP.NET enables customers to pay their bills online through a unified broker. The application's web component relies on an independent account management system that resides on another server. The web component communicates with the account management system using a SQL socket connection. The two servers are located in a competitively priced data center that houses a number of other customers, all of which are able to access the building at all times. A malicious user purchases hosting services at the same company, and after exploring the hosting environment, learns that the hosted accounts are networked using a shared bus topology that allows for network snooping. Because SQL connections are not encrypted by default, the attacker is able to setup a sniffer and capture all of the communication between the account management component and the web component. This enabled the attacker to login as a legitimate user on the account management server and make changes at will.</p>
  <h1>Solution Example</h1>
  <p>An e-commerce application written in ASP.NET enables customers to pay their bills online through a unified broker. The application's web component relies on an independent account management system that resides on another server. The web component communicates with the account management system using a SQL socket connection. The two servers are located in a competitively priced data center that houses a number of other customers, all of which are able to access the building at all times. The application's developers encrypt the payment information before transmitting it to the other network entity.</p>
  <pre>void ProcessPayment(byte[] ccInfo, float amount)<br />{<br />    byte[] ccDigest = MyApp.Crypto.EncryptCCInfo(ccInfo);<br />    SqlConnection connection;<br />    SqlCommand command;<br />    SqlDataReader result; <br />    string query = "execute QueuePayment @ccDigest @amount;";<br />    connection = MyApp.DBManager.GetDBConnection();<br />    command = new SqlCommand(query, connection);<br />    command.Parameters.Add("@ccDigest", System.Data.SqlDbType.Binary);<br />    command.Parameters["@ccDigest"].Value = ccDigest;<br />    command.Parameters.Add("@amount", System.Data.SqlDbType.Float);<br />    command.Parameters["@amount"].Value = amount;<br />    ...<br />} <br />... <br />public byte[] EncryptCCInfo(byte[] ccInfo)<br />{<br />    Rijndael encMD;<br />    ICryptoTransform encCT;<br />    byte[] digest;<br />    encMD = Rijndael.Create();<br />    encMD.Key = MyApp.Crypto.GetEncryptionKey();<br />    encMD.IV = MyApp.Crypto.GetEncryptionIV();<br />    encCT = encMD.CreateEncryptor();<br />    digest = encCT.TransformFinalBlock(ccInfo, 0, ccInfo.Length);<br />    encMD.Clear();<br />    return digest;<br />}</pre>
  <p>Because data between the two components is encrypted, the transmission medium is less likely to affect the application's ability to securely transmit payment information.</p>
  <ul>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1614393734" Content_Hash="-753486886">
    <Metadata>
      <Id>b587bdc5-ec54-4143-86f4-8cd8f1f80455</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Input from All Sources Is Validated</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Design</Phase>
      <Technology>Java</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Input from All Sources Is Validated</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>1</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Check for input that has not been passed through a validation routine. All input from external sources should be validated.</p>
  <h1>Why</h1>
  <p>Input that is not validated can lead to cross-site scripting, SQL injection, directory traversals, and other vulnerabilities which would allow an attacker to gain unauthorized access to sensitive data.</p>
  <h1>How to Check</h1>
  <p>An application can take input via various ways such as a web interface, database, file system or other software running on the server. Use the following steps to establish a validation strategy:</p>
  <ol>
    <li>
      <p>
        <strong>Identify all sources of input. </strong>At design time identify all potential sources of input to your application. Once implemented, scour source code to discover sources of input that may have been missed in the design. Potential sources of input in a web application typically include:</p>
      <ul>
        <li>URL based parameters </li>
        <li>Form based parameters </li>
        <li>Hidden fields </li>
        <li>Cookies </li>
        <li>HTTP headers (Host, accept types, www authentication, cache settings, encodings, etc) </li>
        <li>Local filesystem </li>
        <li>Database </li>
        <li>Other services running on the system </li>
        <li>Javascript variables </li>
        <li>File upload and attributes (filename, size, data, etc) </li>
        <li>DNS results or host names </li>
        <li>External component call return values (COM, AJAX, ActiveX) </li>
      </ul>
      <p>Once you know&amp;nbsp;the types of input from where your application may receive data, look for all entry points. Good starting points are method parameters and assignment statements. For example: </p>
      <p>This method uses the <em>searchTerm</em> variable:</p>
      <pre>void aggregateData(PrintWriter out, String searchTerm)<br /> ...<br />double[] rData = common.queryDBForIndex(searchTerm);</pre>
      <p>This assignment stores data from a <em>GET</em> request parameter named <em>index</em> and stores it in the string <em>searchTerm</em>. Ensure that this input is validated:</p>
      <pre>String searchTerm = request.getParameter("index");</pre>
      <p>This assignment uses the input that was gathered above to store more input from a database. Verify that <em>searchTerm</em> is validated before this use, and also ensure that <em>rData</em> is validated as another source of input.</p>
      <pre>double[] rData = common.queryDBForIndex(searchTerm);</pre>
    </li>
    <li>
      <p>
        <strong>Trace data from source to sink. </strong>Trace each source of input from the immediate source through your application to its final destination. The final sink may be in memory, on the hard drive, sent over the network or stored in a data store such as a database.</p>
    </li>
    <li>
      <p>
        <strong>Identify validation routines. </strong>Each input source should have a validation routine associated with it. Ideally the validation will occur as soon as the input reaches your application. Shared validation routines are better than creating many throughout the code base, so check for consolidation of routines to aid testing and reduce the chance of one-off bugs. If any input source does not have a validation routine associated with it, flag it for fixing.</p>
    </li>
    <li>
      <p>
        <strong>Ensure quality of validators. </strong>Validation routines should check for length, range, format and type. Validation should first check for good data through whitelisting then for known malicious data through blacklisting. Do not rely on client-side validation alone as it can be bypassed easily.</p>
    </li>
  </ol>
  <h1>How to Fix</h1>
  <p>An application can take input via various ways: web interface, database, file system, other software running on the server, etc. Use the following steps to establish a validation strategy:</p>
  <ol>
    <li>
      <p>
        <strong>Establish your application's trust boundary:</strong> The notion is that all input not generated by your application is untrusted.</p>
    </li>
    <li>
      <p>
        <strong>Identify all sources of input</strong>: An application can have various sources of input and each one is an entry point to your application&amp;nbsp;that can potentially be used to break your application's security model. Enumerate all possible sources of input and make note of the expected input&amp;nbsp;at&amp;nbsp;each source. Potential sources of input in a web application typically include:</p>
      <ol>
        <li>URL based parameters </li>
        <li>Form based parameters </li>
        <li>Hidden fields </li>
        <li>Cookies </li>
        <li>HTTP headers </li>
        <li>Local filesystem </li>
        <li>Database </li>
        <li>Other related services</li>
      </ol>
    </li>
    <li>
      <p>
        <strong>Understand the input that your application can handle and process</strong>: After identifying the different entry points, define the format and type of input that&amp;nbsp;should be provided through each entry point. </p>
    </li>
    <li>
      <p />
      <strong>Create a set of validators</strong>: Build a validator for each format and type of expected input. Centralize your application's validators as it helps strengthen the code by limiting the amount of scattered validation code throughout your application. Place the set of validators on your application's trust boundary. Your application should accept input from the outside world only through its set of validators.</li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code produces a data analysis based on a financial index. Unfortunately, the application validates the user's input but not the returned data from the database. Therefore, the application is vulnerable to an integer overflow that can harm the business logic used in generating the data analysis.</p>
  <pre>import java.io.*;<br />import java.util.*;<br />import java.lang.*;<br />import javax.servlet.*;<br />import javax.servlet.http.*;<br />import java.util.regex.*;<br /><br />public final class DataAggregator extends HttpServlet<br />{<br />      public void doGet(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter("index");<br /><br />            try<br />            {<br />                  // The application validates the user-supplied input<br />                  if (validateSearchTerm(searchTerm))<br />                  {<br />                        String retString;<br />                         retString = "The queried index \"";<br />                        retString += encodeHtml(searchTerm);<br />                        retString += "\" produced the following results:&lt;br&gt; ";<br />                        out.println(retString);<br />                        aggregateData(out, searchTerm);<br />                  }<br />                  else<br />                  {<br />                        // Add the appropriate logging and exception handling<br />                        // mechanisms. Consult the Exception Handling and<br />                         // Logging sections<br />                         out.println("We cannot handle your request at the moment."<br />                                 + " Please try again later.");<br />                  }<br />            }<br /><br />            catch (Exception e)<br />            {<br />                  // Add the appropriate logging and exception handling<br />                   // mechanisms. Consult the Exception Handling and<br />                   // Logging sections <br />                  out.println("We cannot handle your request at the moment."<br />                           + " Please try again later.");<br />            }<br /><br />            out.flush();<br />            out.close();<br />      }<br /><br />      boolean validateSearchTerm(String input)<br />      {<br />            String goodPattern = "(\\w|\\d)+";<br />            int goodLength = 8;<br /><br />            if (input == null)<br />            {<br />                  return false;<br />            }<br /><br />            if(input.length() &gt; goodLength)<br />            {<br />                  return false;<br />            }<br /><br />            Pattern p = Pattern.compile(goodPattern);<br />            Matcher m = p.matcher(input);<br /><br />            if(!m.matches())<br />            {<br />                  return false;<br />            }<br /><br />            return true;<br />      }<br /><br />      void aggregateData(PrintWriter out, String searchTerm)<br />      {<br />            double[] rData = common.queryDBForIndex(searchTerm);<br />            // The application fails to validate the returned<br />            // data from the database<br />            // Business logic that performs certain data analysis<br />      }<br />}</pre>
  <h1>Solution Example</h1>
  <p>The following code produces a data analysis based on a financial index. Since the code validates all sources of input to the application, the application is secured against SQL injection and integer overflows.</p>
  <pre>import java.io.*;<br />import java.util.*;<br />import java.lang.*;<br />import javax.servlet.*;<br />import javax.servlet.http.*;<br />import java.util.regex.*;<br /><br />public final class DataAggregator extends HttpServlet<br />{<br />      public void doGet(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter("index");<br /><br />            try<br />            {<br />                  // The application validates the user-supplied input<br />                  if (validateSearchTerm(searchTerm))<br />                  {<br />                        String retString;<br />                         retString = "The queried index \"";<br />                        retString += encodeHtml(searchTerm);<br />                        retString += "\" produced the following results:&lt;br&gt; ";<br />                        out.println(retString);<br />                        aggregateData(out, searchTerm);<br />                  }<br />                  else<br />                  {<br />                        // Add the appropriate logging and exception<br />                        // handling mechanisms. Consult the Exception Handling<br />                        // and Logging sections <br />                        out.println("We cannot handle your request at the moment."<br />                                 + " Please try again later.");<br />                  }<br />            }<br /><br />            catch (Exception e)<br />            {<br />                  // Add the appropriate logging and exception handling mechanisms<br />                  // Consult the Exception Handling and Logging sections<br />                   out.println("We cannot handle your request at the moment."<br />                           + " Please try again later.");<br />            }<br /><br />            out.flush();<br />            out.close();<br />      }<br /><br />      void aggregateData(PrintWriter out, String searchTerm) throws Exception<br />      {<br />            double[] rData = common.queryDBForIndex(searchTerm);<br /><br />            // The application validates the returned data from the database<br />            if (validateRawDBData(rData))<br />            {<br />                  // Business logic that performs certain data analysis<br />            }<br />            else<br />            {<br />                  String errMsg = "Business logic not executed";<br />                  throw new Exception(errMsg);<br />            }<br />      }<br /><br />      boolean validateSearchTerm(String input)<br />      {<br />            String goodPattern = "(\\w|\\d)+";<br />            int goodLength = 8;<br /><br />            if (input == null)<br />            {<br />                  return false;<br />            }<br /><br />            if(input.length() &gt; goodLength)<br />            {<br />                  return false;<br />            }<br /><br />            Pattern p = Pattern.compile(goodPattern);<br />            Matcher m = p.matcher(input);<br /><br />            if(!m.matches())<br />            {<br />                  return false;<br />            }<br /><br />            return true;<br />      }<br /><br />      boolean validateRawDBData(double[] input)<br />      {<br />            boolean valid = true;<br /><br />            for (int i = 0; i &lt; input.length; i++)<br />            {<br />                  if (input[i] &lt; 0.0 || input[i] &gt; 100.0)<br />                  {<br />                        valid = false;<br />                  }<br />            }<br /><br />            return valid;<br />      }<br />}</pre>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="318429395" Content_Hash="-810331162">
    <Metadata>
      <Id>bcb144ff-0fe5-4a45-afea-1b31fba45f8d</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Accounts Are Locked After Consecutive Failed Login Attempts</Title>
      <Category>Authentication</Category>
      <Phase>Design</Phase>
      <Technology>Java</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Accounts Are Locked After Consecutive Failed Login Attempts</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that accounts&amp;nbsp;are locked after consecutive failed login attempts. </p>
  <h1>Why</h1>
  <p>Multiple, consecutive failed authentication attempts over a short period of time are a symptom that is used to detect when an account is under attack. Locking out the account prevents the attacker from compromising and accessing the account.</p>
  <h1>How to Check</h1>
  <p>Follow these steps to ensure your application will lock out an account after consecutive failed login attempts:</p>
  <ol>
    <li>
      <p>
        <strong>Verify your application has a lockout policy. </strong>An account lockout policy is typically application specific. Review your application's requirements and design specifications and verify the&amp;nbsp;following functionality:</p>
      <ul>
        <li>A mechanism for determining failed authentication attempts </li>
        <li>A mechanism for locking accounts that have exceeded the maximum number of allowed authentication attempts </li>
        <li>A mechanism for unlocking accounts that have exceeded the maximum number of allowed authentication attempts</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Ensure your application tracks login attempts. </strong>All authentication procedures should record the number of authentication attempts for each user. The login counter for each user&amp;nbsp;should be&amp;nbsp;reset to 0 upon a successful authentication</p>
    </li>
    <li>
      <p>
        <strong>Ensure your application enforces the lockout policy. </strong>All authentication procedures implement your application's lockout policy. The implementation should&amp;nbsp;match the lockout policy as the business requirements of your organization may change over time</p>
    </li>
  </ol>
  <p>
    <strong>Note:</strong> PCI DSS certification requires that logs should include failed access attempts, that a user gets locked out after no more than 6 failed login attempts, and the lockout lasts for&amp;nbsp;at least&amp;nbsp;30 minutes.</p>
  <h1>How to Fix</h1>
  <p>Use the following steps to successfully lock accounts after consecutive failed login attempts:</p>
  <ol>
    <li>
      <p>
        <strong>Determine a lockout policy. </strong>There are two variables to consider when determining a lockout policy:</p>
      <ul>
        <li>Number of allowed consecutive failed login attempts </li>
        <li>Amount of time that a locked account will remain locked</li>
      </ul>
      <p>A simple policy would be to lock an account after&amp;nbsp;five failed login attempts for the duration of 15 minutes. Although this is an effective method for blocking a brute force attack, it exposes your application to denial of service as an attacker can easily keep an account locked through a small stream of authentication requests.<br /><br />When determining the lockout policy, it is important to evaluate the risk of attacks against the user and the support costs associated with reactivating a locked account. For example, requiring the user to contact your organization's support staff&amp;nbsp;to reactivate a locked account will have a direct impact on support costs and would add general user frustration.&amp;nbsp;However, it is important to use extra care when designing more sophisticated variations of your application's lockout policy, such as correlating a single or multiple user login attempts with a source IP. When adding extra levels of complexity, carefully consider and evaluate the scenarios where your application's lockout policy can be circumvented or can harm your business. For instance, consider scenarios where an attacker would attempt to compromise a user through the use of multiple hosts, or multiple users would authenticate using a shared office IP.</p>
    </li>
    <li>
      <p>
        <strong>Track login attempts. </strong>Login attempts can be tracked with the use of a login counter. Increment the counter once a user tries to authenticate. Reset the counter to 0 after the user successfully authenticates. Example:</p>
      <pre>-- Authenticate the user<br />sql&gt; select login_attempts from users<br />      where user = {{username}} and pass = {{passDigest}};<br /> -- Reset the login counter<br />sql&gt; update users set login_attempts = 0 where user = {{username}};</pre>
    </li>
    <li>
      <p>
        <strong>Enforce the lockout policy. </strong>The lockout policy should be enforced at all points in the application where authentication is necessary. Example:</p>
      <pre>String dbStatement = "select login_attempts from users"<br />                   + "where user = ? and pass = ?;";<br />PreparedStatement st = dbConnection.prepareStatement(dbStatement);<br />st.setString(1, user);st.setString(2, passDigest);<br />ResultSet rs = st.executeQuery();<br /><br />if (rs.first())<br />{      <br />userIsValid = true;<br />      loginCount = rs.getInt(1);<br />}<br />else<br />{<br />      userIsValid = false;<br />}<br /><br />rs.close();<br /><br />if(userIsValid)<br />{<br />      if(loginCount &gt; 3)<br />      {<br />            throw new AccountIsLockedException();<br />      }<br /><br />      // The application checks the password's maturity<br />      checkPasswordMaturity(user);<br />}<br />else<br />{<br />      updateLastLoginAttempt(user);<br />}</pre>
    </li>
    <li>
      <p>
        <strong>Set an unlocking mechanism. </strong>Keep track of the lockout period. Based on your application's lockout policy, unlock the account after the lockout period has expired. Example:</p>
      <pre>-- Unlock all locked accounts whose 45 minute lockout period has expired<br />sql&gt; update users set login_attempts = 0<br />      where last_login &lt; (current_timestamp - interval '45' minute);</pre>
    </li>
  </ol>
  <p>
    <strong>Note:</strong> PCI DSS requirements state that an account should be locked out for at least 30 minutes after no more than six failed login attempts.</p>
  <h1>Problem Example</h1>
  <p>The following code executes the database transaction that is required during authentication. Because the transaction fails to check the login attempts counter, it is possible for an attacker to compromise an account through the use of brute force or a dictionary attack.</p>
  <pre>// The application fails to check the number of login attempts<br />String dbStatement = "select user from users where user = ? and pass = ?;";<br />st = dbConnection.prepareStatement(dbStatement);<br />st.setString(1, user);<br />st.setString(2, passDigest);<br />rs = st.executeQuery();</pre>
  <h1>Solution Example</h1>
  <p>The following code executes the database transaction that is required during authentication. Because the transaction checks the login attempts counter, it would be very expensive for an attacker to compromise an account through the use of brute force or a dictionary attack.</p>
  <pre>// The application checks the number of login attempts<br />String dbStatement = "select login_attempts from users where user = ? and pass = ?;";<br />PreparedStatement st = dbConnection.prepareStatement(dbStatement);<br />st.setString(1, user);<br />st.setString(2, passDigest);<br />ResultSet rs = st.executeQuery();<br /><br />if (rs.first())<br />{<br />      userIsValid = true;<br />      loginCount = rs.getInt(1);<br />}<br />else<br />{<br />      userIsValid = false;<br />}<br /><br />rs.close();<br /><br />if(userIsValid)<br />{<br />      if(loginCount &gt; 3)<br />      {<br />            throw new AccountIsLockedException();<br />      }<br />      checkPasswordMaturity(user);<br />}<br />else<br />{<br />      updateLastLoginAttempt(user);<br />}</pre>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1953811006" Content_Hash="472215520">
    <Metadata>
      <Id>bddea980-c4cd-41b1-a807-4cd2efe3957f</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>All Database Input Is Validated</Title>
      <Category>Data Access</Category>
      <Phase>Implementation</Phase>
      <Technology>Java</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>All Database Input Is Validated</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that all input passed to the database is validated.</p>
  <h1>Why</h1>
  <p>Unvalidated input can lead to persistent cross-site scripting, SQL injection and other vulnerabilities&amp;nbsp;that would allow an attacker to gain unauthorized access to sensitive data.</p>
  <h1>How to Check</h1>
  <p>Use the following steps to check if all input passed to database is validated:</p>
  <ol>
    <li>
      <p>
        <strong>Identify database entry points. </strong>Identify all locations within your application that interface with the database servers. Potential sources of input include:</p>
      <ul>
        <li>URL based parameters </li>
        <li>Form based parameters </li>
        <li>Hidden fields </li>
        <li>Cookies </li>
        <li>Local filesystem </li>
        <li>Javascript variables</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Trace data from source to sink. </strong>Trace each source of input from the immediate source, through your application and&amp;nbsp;to the backend database.</p>
    </li>
    <li>
      <p>
        <strong>Identify validation routines. </strong>Each input source should have a validation routine associated with it. Ideally the validation will occur as soon as the input reaches your application. Shared validation routines are better than creating many throughout the code base, so check for consolidation of routines to aid testing and reduce the chance of one-off bugs. If any input source does not have a validation routine associated with it, flag it for fixing.</p>
    </li>
    <li>
      <p>
        <strong>Ensure quality of validators. </strong>Validation routines should check for length, range, format and type.&amp;nbsp;The validator&amp;nbsp;should first check for good data&amp;nbsp;via whitelisting and then for known malicious data&amp;nbsp;via blacklisting. Do not rely on client-side validation alone as it can be bypassed easily.</p>
    </li>
    <li>
      <p>
        <strong>Ensure that parameterized queries are used. </strong>Verify that all database transactions are handled using <em>PreparedStatement</em> objects.</p>
    </li>
  </ol>
  <h1>How to Fix</h1>
  <p>To properly validate input passed to database:</p>
  <ol>
    <li>
      <strong>Identify database entry points. </strong>Identify all locations within your application that interface with the database servers. Potential sources of input include: <ul><li>URL-based parameters </li><li>Form-based parameters </li><li>Hidden fields </li><li>Cookies </li><li>Local filesystem </li><li>Javascript variables</li></ul></li>
    <li>
      <p>
        <strong>Create a set of validators. </strong>Determine the appropriate validation at each validator. Centralize the validators as it helps strengthen your code by limiting the amount of scattered validation code throughout the component. Place the validators along the database entry points. All data should pass through the validators before transmitted to the database servers.</p>
    </li>
    <li>
      <p>
        <strong>Use type safe SQL parameters in queries. </strong>Stored procedures and parameterized queries improve your application's robustness against SQL injection based attacks.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code allows the user to query a database. Unfortunately, the application fails to validate the user's input; therefore, an attacker can access the backend database on behalf of the application through the use of SQL injection. </p>
  <pre>public void doGet(HttpServletRequest request,<br />     HttpServletResponse response) throws ServletException, IOException{<br />     PrintWriter out = response.getWriter();<br />     String query = request.getParameter("query");<br />     String retData = "";<br /><br />     // The application fails to validate the user-supplied<br />     // query before submitting it to the database server<br />     retData = queryDB(query);<br /><br />     ...<br /><br />     out.flush();<br />     out.close();<br />}</pre>
  <h1>Solution Example</h1>
  <p>The following code allows the user to query a database. Because the application validates the user's input, it is much more difficult for an attacker to access the backend database through a SQL injection attack.</p>
  <pre>public void doGet(HttpServletRequest request,<br />     HttpServletResponse response) throws ServletException, IOException{<br />     PrintWriter out = response.getWriter();<br />     String query = request.getParameter("query");<br />     String retData = "";<br /><br />     // The application validates the user-supplied query<br />     // before submitting it to the database server<br />     if (validateQuery(query))<br />     {<br />          retData = queryDB(query);<br /><br />          ...<br /><br />     }<br /><br />     out.flush();<br />     out.close();<br />}<br /><br /><br />public boolean validateQuery(String input){<br /><br />      // The input can be only of numeric characters<br />      String goodPattern = "[0-9]++";<br /><br />      Pattern p = Pattern.compile(goodPattern);<br />      Matcher m = p.matcher(input);<br /><br />      if(!m.matches())<br />      {<br />            return false;<br />      }<br /><br />      return true;<br />}</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>A tutorial on regular expressions is available at: <a href="http://www.regular-expressions.info/">Regular-Expressions.info</a>. </li>
    <li>For more information on using regular expression in Java, see: <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/util/regex/Pattern.html">Class Pattern</a> in Java SDK. </li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1016741123" Content_Hash="1915369995">
    <Metadata>
      <Id>ca0d92eb-25a5-4904-923f-02eb9af3b1a4</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Write Access Only on Folders That Support Content Authoring And Are Configured for Authentication</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology> Any</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Write Access Only on Folders That Support Content Authoring And Are Configured for Authentication</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Check to ensure that write permissions are configured&amp;nbsp;only on folders that allow content authoring. Grant write access only to content authors. Also the folders that support content authoring should be configured to require authentication and SSL for encryption. </p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1548521529" Content_Hash="-1068016732">
    <Metadata>
      <Id>ca0e3ebf-1ddc-4141-b2e7-81d8a12d3292</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Application Avoids File Name And Path Input</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Application Avoids File Name And Path Input</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Do not accept file names or paths from users.</p>
  <h1>Why</h1>
  <p>Accepting file names or paths from users can result in attackers coercing your application into accessing arbitrary files and resources.</p>
  <h1>When</h1>
  <p>You should never accept a file name or path from a user under any circumstances.</p>
  <h1>How</h1>
  <p>If user control over file paths or file names is not absolutely necessary, remove the responsible code from the application. If you need to store a file from a user, store it in a database or other non-filesystem data store.&amp;nbsp;Keep the name the user provided as a reference to the file, but do not use it as any form of canonical name.</p>
  <p />
  <p>If the functionality is critical to the proper working of the application, then validate the input for directory traversal and canonicalization attacks:</p>
  <ol>
    <li>
      <p>
        <strong>Check File Names. </strong>Ensure that file paths only refer to files within your application's virtual directory hierarchy if that is appropriate. When checking file names, obtain the full name of the file by using the <em>System.IO.Path.GetFullPath</em> method. </p>
    </li>
    <li>
      <p>
        <strong>Check File Paths. </strong>If you use <em>MapPath</em> to map a supplied virtual path to a physical path on the server, use the overloaded <em>Request.MapPath</em> method that accepts a <em>bool</em> parameter so that you can prevent cross-application mapping: </p>
      <pre>try<br />{<br />  string mappedPath = Request.MapPath( inputPath.Text,<br />                         Request.ApplicationPath, false);<br />}<br />catch (HttpException)<br />{<br />  // Cross-application mapping attempted<br />}</pre>
      <p>The final <em>false</em> parameter prevents cross-application mapping. This means that a user cannot successfully supply a path that contains ".." to traverse outside of your application's virtual directory hierarchy. Any attempt to do this results in an exception of type <em>HttpException</em>. </p>
    </li>
  </ol>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1783455875" Content_Hash="-600397558">
    <Metadata>
      <Id>cd912611-c89d-44cd-ab4c-831af27b2738</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Protected Resources Are Mapped to HttpForbiddenHandler</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Protected Resources Are Mapped to HttpForbiddenHandler</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>
      <div>Web Application</div>
    </li>
  </ul>
  <h1>What to Check For</h1>
  <p>Check to ensure that Protected resources are mapped to HttpForbiddenHandler.</p>
  <br />
  <h1>How to Fix</h1>
  <p>HTTP handlers are located in the Machine.config file beneath the <strong>&lt;httpHandlers&gt;
</strong>element. HTTP handlers are responsible for processing Web requests for specific file&amp;nbsp;extensions. Remoting should not be enabled on front-end Web servers; enable remoting only on middle-tier application servers that are isolated from the Internet.</p>
  <blockquote>
    <strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;If you are running .NET 2.0, the &lt; httpHandlers&gt; setting is located in the machine-level Web.config file, located in the same directory as the Machine.config file.</blockquote>
  <p>The following file extensions are mapped in the Machine.config file to HTTP<strong></strong>handlers: </p>
  <ul>
    <li>.aspx is used for ASP.NET pages </li>
    <li>.rem and .soap are used for Remoting. </li>
    <li>.asmx is used for Web Services. </li>
    <li>.asax, .ascx, .config, .cs, .csproj, .vb, .vbproj, .webinfo, .asp, .licx, .resx,&amp;nbsp;and&amp;nbsp;.resources are protected resources and are mapped to
<strong>System.Web.HttpForbiddenHandler</strong>. </li>
  </ul>
  <p>For .NET&amp;nbsp;Framework resources, if you do not use a file extension, then map the extension to
<strong>System.Web.HttpForbiddenHandler</strong> in the Machine.config file, as shown in the following example:</p>
  <div>
    <pre>&lt;add verb="*" path="*.vbproj" type="System.Web.HttpForbiddenHandler" /&gt;</pre>
  </div>
  <p>In this case, the .vbproj file extension is mapped to <strong>System.Web.HttpForbiddenHandler</strong>. If a client requests a path that ends with .vbproj, then ASP.NET returns a message that states "This type of page is not served."
</p>
  <ul>
    <li>The following guidelines apply to handling .NET&amp;nbsp;Framework file extensions: </li>
    <li>
      <strong>Map extensions you do not use to HttpForbiddenHandler</strong>. If you do not serve ASP.NET pages, then map .aspx to
<strong>HttpForbiddenHandler</strong>. If you do not use Web Services, then map .asmx to
<strong>HttpForbiddenHandler</strong>. </li>
    <li>
      <strong>Disable Remoting on Internet-facing Web servers</strong>. Map remoting extensions (.soap and .rem) on Internet-facing Web servers to
<strong>HttpForbiddenHandler</strong>. </li>
  </ul>
  <h3>Disable .NET&amp;nbsp;Remoting</h3>
  <p>To disable .NET&amp;nbsp;Remoting disable requests for .rem and .soap extensions, use the following elements beneath<strong> &lt;httpHandlers&gt;</strong>:</p>
  <div>
    <pre>&lt;add verb="*" path="*.rem" type="System.Web.HttpForbiddenHandler"/&gt;<br />&lt;add verb="*" path="*.soap" type="System.Web.HttpForbiddenHandler"/&gt;</pre>
  </div>
  <blockquote>
    <strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;This does not prevent a Web application on the Web server from connecting to a downstream object by using the Remoting infrastructure. However, it prevents clients from connecting to objects on the Web server.</blockquote>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-585490819" Content_Hash="-1734164144">
    <Metadata>
      <Id>ce32cef6-e386-4348-b294-a562f7cd995b</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Latest Patches And Updates Are Installed</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology> Any</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Latest Patches And Updates Are Installed</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Check to ensure that the latest patches and updates are installed for your network firewall.</p>
  <h1>How to Fix</h1>
  <p>Subscribe to alert services provided by the manufacturer of your firewall and operating system to stay current with both security issues and service patches.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1872078445" Content_Hash="994240291">
    <Metadata>
      <Id>d022ebb5-71d5-49f6-b7e8-93606bee7a42</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Sample Applications Are Removed</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Sample Applications Are Removed</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>
      <div>Web Application</div>
    </li>
  </ul>
  <h1>What to Check For</h1>
  <p>Check to ensure that sample applications are removed&amp;nbsp;to reduce the areas where your web server can be attacked.</p>
  <h1>Why</h1>
  <p>Sample applications are typically not configured with high degrees of security. It is possible that an attacker could exploit an inherent weakness in a sample application or in its configuration to attack your Web site.
</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="588349834" Content_Hash="-880744850">
    <Metadata>
      <Id>d4ae5fa9-2156-42d1-8718-754a7df4e1f5</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>The ViewStateUserKey Is Used to Counter Cross-site Request Forgery Attacks</Title>
      <Category>Session Management</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>The ViewStateUserKey Is Used to Counter Cross-site Request Forgery Attacks</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that an unique key is assigned to each user's ViewState.</p>
  <h1>Why</h1>
  <p>A ViewState is the mechanism used by ASP.NET to keep track of server control state values. It is a hidden form field managed by the ASP.NET page framework and is an encoded aggregate of values of controls on a page. View state is enabled by default in ASP.NET and can be disabled or re-enabled at the machine, application, page, and control level by setting the <strong>EnableViewState</strong> property to <strong>false</strong> or <strong>true</strong> in config files.</p>
  <p>By default, there's nothing in the ViewState that ties its content to a particular user. The attacker can easily reuse the ViewState he obtained making legal access to the page to build a bogus request on behalf of another user. This is where <strong>ViewStateUserKey</strong> is useful.</p>
  <p>The <strong>ViewStateUserKey</strong> property adds user-specific information to the view state. Setting the <strong>ViewStateUserKey</strong> property of the page in the <strong>Page_Init</strong> event handler helps ensuring that any form information submitted came from the same user who requested the original page. It binds the content of the <strong>ViewState</strong> variable to individual users so that the malicious users cannot use the variable to generate an attack.</p>
  <p>This prevents Cross Site Request Forgery attacks, where attackers attempt to use their ViewState in the context of another user or to otherwise post form data as though they were another user. These attacks are also called One-Click Attacks.</p>
  <h1>How to Check</h1>
  <ol>
    <li>
      <p>
        <strong>Verify that your application's ASP.NET pages have Page_Init methods. </strong>Look for <strong>Page_Init</strong> methods in your application's ASP.NET. The declaration for <strong>Page_Init</strong> is:</p>
      <pre>protected void Page_Init(object sender, EventArgs e)</pre>
    </li>
    <li>
      <p>
        <strong>Verify that Page.ViewStateUserKey is set during page initialization. </strong>Ensure <strong>Page.ViewStateUserKey</strong> is initialized during page initialization. Example:</p>
      <pre>protected void Page_Init(object sender, EventArgs e<br />{<br />    Page.ViewStateUserKey = Session.SessionID;<br />}</pre>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>Suppose that a&amp;nbsp;web application does not set the <strong>ViewStateUserKey</strong> property in the Page_Init event handler, and this application allows a user to change the state of the application in a single request. This combination means the&amp;nbsp;application is susceptible to a Cross Site Request Forgery Attack. </p>
  <p>For example, consider a web application that allows a logged-in administrator to create a new user sending a single GET request.</p>
  <p>This GET request looks like this:</p>
  <pre>GET http://teammentorexample.com/adduser.aspx?username=joe&amp;password=1234&amp;usertype=user HTTP/1.1</pre>
  <p>The attacker discovers that this request will create a new user and creates his own request which he embeds in an e-mail with the following image tag:</p>
  <pre>&lt;img src=”http://teammentorexample.com/adduser.aspx?username=HACKER&amp;password=TEST&amp;usertype=admin” /&gt;</pre>
  <p>When the victim’s (the administrator in this case) e-mail client attempts to download the image located at the above source, the request is made without the knowledge of the victim. </p>
  <p>The Web page contains a hidden form field named __VIEWSTATE that is already filled with ViewState data. The ViewState can be re-used from a valid request that the attacker had previously made to the application. The ViewState content is not checked on the server or is only checked against tampering. The attacker lures the unsuspecting user into opening the email containing the malicious URL, causing the request to be sent to the server where the ViewState is valid. The server has no way of knowing that the ViewState originated from the attacker. ViewState validation does not counter this attack because the ViewState is valid and the page is executed under the security context of the victim user.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1075508154" Content_Hash="1043113460">
    <Metadata>
      <Id>d80b73f7-f6c9-4beb-b090-855ee2119327</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Destinations of Redirects And Forwards Are Calculated Without User Input</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Design</Phase>
      <Technology> Any</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Destinations of Redirects And Forwards Are Calculated Without User Input</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Verify that destinations of redirects and forwards are calculated without user input.</p>
  <h1>Why</h1>
  <p>Using input to calculate destinations of redirects or forwards may allow an attacker to create hyperlinks that appear to point to legitimate sites but redirect to malicious pages controlled by the attacker. This technique is often used by phishers to trick people into visiting fake sites that steal authentication credentials.</p>
  <h1>How to Check</h1>
  <p>Look for code that handles parameters to see if it performs redirects or forwards based on input. Redirects are also known as "transfers" in .NET. Ideally, redirects and forwards should not rely on user input to calculate their destinations.</p>
  <h1>How to Fix</h1>
  <p>Perform the following actions to calculate destinations of redirects and forwards without user input:</p>
  <ol>
    <li>
      <p>
        <strong>Find redirects and forwards.</strong> Find all pages that perform redirects or forwards. Redirects are also known as "transfers" in .NET.</p>
    </li>
    <li>
      <p>
        <strong>Identify dangerous redirects and forwards.</strong> Find all redirects and forwards that rely on user input to calculate their destinations.</p>
    </li>
    <li>
      <p>
        <strong>Rewrite redirects and forwards.</strong> Consider making design or code changes to get rid of each redirect or forward, if possible. If a redirect or forward is absolutely necessary, consider how it may be rewritten to operate without user input - this is usually possible based on assumptions made in the application design.</p>
    </li>
  </ol>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information about unvalidated redirects and forwards, please see <a href="http://www.owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards">http://www.owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards</a></li>
  </ul>
  <ul>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1626329431" Content_Hash="-42739680">
    <Metadata>
      <Id>d8748c6c-60cc-47e7-b07c-6becf5f993df</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Inactive User Accounts Are Automatically Locked</Title>
      <Category>Authorization</Category>
      <Phase>Design</Phase>
      <Technology>Java</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Inactive User Accounts Are Automatically Locked</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure the application automatically locks inactive user accounts. Verify that all instances of locking inactive accounts are logged.</p>
  <h1>Why</h1>
  <p>Inactive user accounts increase the attack surface of the application and can be used by an attacker as a means of entry.</p>
  <h1>How to Check</h1>
  <p>Follow these steps during the design phase to make sure your application has the capability to lock its inactive user accounts:</p>
  <ol>
    <li>
      <p>
        <strong>Verify your application stores the user's last login/inactivity information. </strong>Check if your application has the necessary procedures in place to store and retrieve last login and lockout information about its users. Common locations for storing such information are:</p>
      <ul>
        <li>Database that stores user account information </li>
        <li>Data structures (e.g. Java class) that represent user accounts </li>
        <li>Routines that handle user login </li>
        <li>Routines that retrieve and update user account information</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Verify your application has a lockout policy. </strong>An account lockout policy is typically application specific. Review your application's requirements and design specifications. Check for the following functionality:</p>
      <ul>
        <li>A mechanism for determining user inactivity </li>
        <li>A mechanism for locking inactive accounts </li>
        <li>A mechanism for unlocking disabled accounts </li>
        <li>Verify that the last-login timestamp is reset to the current timestamp upon a successful authentication attempt</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Verify the lockout policy is enforced by default. </strong>Make sure the functionality that enforces the lockout policy is enabled by default during deployment. </p>
      <ul>
        <li>Ensure that only users with administrative privileges can amend your application's lockout policy. </li>
        <li>Verify that all instances of modifying the lockout policy are logged. </li>
        <li>Check the following locations in the code to determine if the lockout policy is fully enforced: <ul><li>Account administration routines </li><li>Background database processes that perform user account maintenance </li><li>Authentication routines</li></ul></li>
      </ul>
    </li>
  </ol>
  <h1>How to Fix</h1>
  <p>Use the following steps when locking inactive user accounts:</p>
  <ol>
    <li>
      <p>
        <strong>Set a lockout policy. </strong>Create the application's lockout policy. Determine the necessary duration of inactivity before an account can be locked/disabled. This policy can vary depending on whether the account is of a normal user or an administrator. For example, disable normal accounts after 45 days of inactivity and administrative accounts after 30 days of inactivity.</p>
    </li>
    <li>
      <p>
        <strong>Keep track of user inactivity. </strong>Establish a mechanism to keep track of the last successful authentication. Successful authentication can be tracked via logs or a timestamp, which resides in the user database. Example: </p>
      <pre>sql&gt; select username, last_login_date from users;<br />+----------+-----------------+<br />| username | last_login_date |<br />+----------+-----------------+<br />| adam     |      2006-10-11 |<br />| sue      |      2006-10-11 |<br />| jim      |      2006-10-01 |<br />| richard  |      2006-10-01 |<br />| julie    |      2006-09-23 |<br />| sam      |      2006-06-23 |<br />+----------+-----------------+</pre>
    </li>
    <li>
      <p>
        <strong>Set a lockout mechanism. </strong>Establish a mechanism to verify the current period of inactivity and automatically set the disabled bit for inactive accounts. Using the application or database server's scheduler, activate such functionality to run during the hours with least user activity. Keep in mind that inactive accounts should be disabled, but not removed until it is confirmed that they should be completely removed. Create a log entry when an account has been disabled.</p>
      <p>For example, the following database transaction would lock all user accounts that have been inactive for more than 30 days. Such transactions should be scheduled to run once a day:</p>
      <pre>sql&gt; update users set locked = 1<br />      where (current_date - 30) &gt; last_login_date</pre>
      <p>
        <strong>Note:</strong> The statement above uses Oracle syntax. Please consult your database manual if you use a&amp;nbsp;different database engine.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following segment illustrates the user database of a multi-user application. In its current state, the application logs the last time the user has logged in but does not enforce a lockout policy for its inactive users; therefore, an attacker can gain unauthorized access to the application by compromising an inactive account.</p>
  <pre>sql&gt; select username, locked, last_login_date from users;<br />+----------+--------+-----------------+<br />| username | locked | last_login_date |<br />+----------+--------+-----------------+<br />| adam     |      0 |      2006-10-11 |<br />| sue      |      0 |      2006-10-11 |<br />| jim      |      0 |      2006-10-01 |<br />| richard  |      0 |      2006-10-01 |<br />| julie    |      0 |      2006-09-23 |<br />| sam      |      0 |      2006-06-23 |<br />+----------+--------+-----------------+</pre>
  <h1>Solution Example</h1>
  <p>The following segment illustrates the user database of a multi-user application. Because the application enforces a lockout policy, all of its inactive users have been locked and denied access to the application. Therefore, an attacker cannot compromise the application through its inactive users.</p>
  <pre>sql&gt; select username, locked, last_login_date from users;<br />+----------+--------+-----------------+<br />| username | locked | last_login_date |<br />+----------+--------+-----------------+<br />| adam     |      0 |      2006-10-11 |<br />| sue      |      0 |      2006-10-11 |<br />| jim      |      0 |      2006-10-01 |<br />| richard  |      0 |      2006-10-01 |<br />| julie    |      0 |      2006-09-23 |<br />| sam      |      1 |      2006-06-23 |<br />+----------+--------+-----------------+</pre>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-422710163" Content_Hash="1656032446">
    <Metadata>
      <Id>d8a09762-4ca7-4cdb-ba5f-5e60708ba73e</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Administrator Account Is Renamed And Has a Strong Password</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology> Any</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Administrator Account Is Renamed And Has a Strong Password</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Check to ensure that administrator account is renamed and has a strong password to improve security.</p>
  <h1>How to Fix</h1>
  <p>The default local Administrator account is a target for malicious use because of its elevated privileges on the computer. To improve security, rename the default Administrator account and assign it a strong password.</p>
  <p>If you intend to perform local administration, configure the account to deny network logon rights and require the administrator to log on interactively. By doing so, you prevent users (well intentioned or otherwise) from using the Administrator account to
 log on to the server from a remote location. If a policy of local administration is too inflexible, implement a secure remote administration solution.
</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-2071687126" Content_Hash="1481864278">
    <Metadata>
      <Id>dbca5b87-2fb0-462e-a16f-c0bd06e27abe</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Administrative Interfaces Are Enumerated And Secured</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology> Any</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Administrative Interfaces Are Enumerated And Secured</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that the administrative interfaces are enumerated and secured when securing your network devices.</p>
  <h1>How to Check</h1>
  <p>Use Terminal Access Controller Access Control System (TACACS) or Remote Authentication Dial-In User Service (RADIUS) authentication for highly secure environments as a means of limiting administrative access to the network.
</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-661591742" Content_Hash="-1278694099">
    <Metadata>
      <Id>dea54698-3b7a-4a77-a623-68e5490df744</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>SSL Is Used When Transmitting Credentials</Title>
      <Category>Authentication</Category>
      <Phase>Implementation</Phase>
      <Technology>Java</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>SSL Is Used When Transmitting Credentials</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that SSL&amp;nbsp;is used when transmitting credentials and never unencrypted connections.</p>
  <h1>Why</h1>
  <p>Using SSL prevents the credentials from being&amp;nbsp;identified or tampered with as they are transmitted over the network.</p>
  <h1>How to Check</h1>
  <ol>
    <li>
      <p>
        <strong>Verify that a dedicated SSL-enabled server is used for the authentication component of your application. </strong>Ensure that your application's authentication component runs on a dedicated subdomain and a server that accepts only HTTPS traffic. Disallowing unencrypted HTTP connections will prevent accidental or malicious unsecured connections. Check that the server uses valid SSLv3 certificates that have been signed by a trusted certification authority. Disallowing lower SSL versions, such as SSLv1 and SSLv2 will ensure that weaker encryption methods can not be exploited by an attacker.<br /><br />The following URL should connect and prompt for login credentials:</p>
      <pre>https://login.example.com/myapp/login</pre>
      <p>An HTTP URL to the same server and component should either be disallowed or redirect to its HTTPS counterpart:</p>
      <pre>http://login.example.com/myapp/login</pre>
    </li>
    <li>
      <p>
        <strong>Identify forms that send credentials. </strong>Forms are defined by a <em>&lt;form&gt;</em> tag in the HTML document, such as the one below:</p>
      <pre>&lt;form method="POST" action="https://login.example.com/myapp/login"&gt;</pre>
      <p>Forms that include credentials usually, but won't always, include an input field with a <em>TYPE</em> attribute set to <em>password</em>:</p>
      <pre>&lt;input <strong>type</strong>="<strong>password</strong>" name="pass" size=25&gt;</pre>
    </li>
    <li>
      <p>
        <strong>Ensure that form data is sent using HTTPS. </strong>Examine the <em>ACTION</em> attribute of the <em>&lt;form&gt;</em> tag and ensure it posts to an absolute URL path and includes HTTPS in the URL, as shown below: </p>
      <pre>&lt;form method="POST" <strong>action</strong>="<strong>https</strong>://login.example.com/myapp/login"&gt;</pre>
    </li>
  </ol>
  <h1>How to Fix</h1>
  <p>Using Secure Socket Layer (SSL) over HTTP requires the following steps:</p>
  <ol>
    <li>
      <p>
        <strong>Create a certificate request.</strong> Using your hosting server or OpenSSL, generate an SSL certificate request. Example:</p>
      <pre># Generate private key<br />openssl genrsa -des3 -out privkey.pem 2048 <br /># Generate certificate request using private key<br />openssl req -new -key privkey.pem -out cert.csr</pre>
    </li>
    <li>
      <p>
        <strong>Present the request to a Certification Authority (CA).</strong> If all conditions for obtaining an SSL certificate are met, the CA will produce a new SSL certificate based on the certificate request. Because the requirements for obtaining an SSL certificate depend on the Certification Authority, consult with the Certification Authority in regards to the administrative steps necessary for obtaining such certificate.</p>
    </li>
    <li>
      <p>
        <strong>Install the certificate.</strong> Consult with the hosting server's documentation on how to install the SSL certificate.</p>
    </li>
    <li>
      <p>
        <strong>Ensure credentials are sent over SSL.</strong> Place the authentication portion of your application on a dedicated subdomain. Configure the server to accept only HTTPS traffic for the authentication subdomain. Ensure that form posts containing credentials are sent over HTTPS. This is accomplished by using absolute URL paths in the action field. Example:</p>
      <pre>&lt;form method="POST" action="https://login.example.com/myapp/login"&gt;</pre>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>In the following snippet, the credentials are transmitted over unprotected HTTP. This allows an attacker to easily steal credentials from sniffed traffic.</p>
  <pre>&lt;html&gt;<br />  &lt;head&gt;<br />    &lt;title&gt;login form&lt;/title&gt;<br />  &lt;/head&gt;<br />  &lt;body&gt;<br />    &lt;form method="POST" action="http://login.example.com/myapp/login"&gt;<br />    &lt;input type="text" name="user" size=25&gt;&lt;br&gt;<br />    &lt;input type="password" name="pass" size=25&gt;&lt;br&gt;<br />    &lt;input type="submit" name="submit" value="log in"&gt;<br />    &lt;/form&gt;<br />  &lt;/body&gt;<br />&lt;/html&gt;</pre>
  <h1>Solution Example</h1>
  <p>In the following snippet, the credentials are transmitted over HTTPS. This makes it difficult for an attacker to steal credentials from sniffed traffic:</p>
  <pre>&lt;html&gt;<br />  &lt;head&gt;<br />    &lt;title&gt;login form&lt;/title&gt;<br />  &lt;/head&gt;<br />  &lt;body&gt;<br />    &lt;form method="POST" action="https://login.example.com/myapp/login"&gt;<br />    &lt;input type="text" name="user" size=25&gt;&lt;br&gt;<br />    &lt;input type="password" name="pass" size=25&gt;&lt;br&gt;<br />    &lt;input type="submit" name="submit" value="log in"&gt;<br />    &lt;/form&gt;<br />  &lt;/body&gt;<br />&lt;/html&gt;</pre>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="774308299" Content_Hash="2129668446">
    <Metadata>
      <Id>df857b61-edaf-4ec5-8402-a169cc6f5eb1</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Remote Administration of the Server Is Secured</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Remote Administration of the Server Is Secured</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>
      <div>Web Application</div>
    </li>
  </ul>
  <h1>What to Check For</h1>
  <p>Ensure that all remote administrative sessions take place over an encrypted channel, sessions timed out quickly and accounts locked out when suspicious behavior is detected.</p>
  <br />
  <h1>How to Fix</h1>
  <p>Administrators often need to be able to administer multiple servers. Make sure the requirements of your remote administration solution do not compromise security. If you need remote administration capabilities, then the following recommendations help improve
 security: </p>
  <ul>
    <li>
      <strong>Restrict the number of administration accounts</strong>. This includes restricting the number of administration accounts as well as restricting which accounts are allowed to log on remotely.
</li>
    <li>
      <strong>Restrict the tools</strong>. The main options include Internet Services Manager and Terminal Services. Another option is Web administration (using the IISAdmin virtual directory), but this is not recommended and this option is removed by IISLockdown.exe.
 Both Internet Services Manager and Terminal Services use Windows security. The main considerations here are restricting the Windows accounts and the ports you use.
</li>
    <li>
      <strong>Restrict the computers that are allowed to administer the server</strong>. IPSec can be used to restrict which computers can connect to your Web server.
</li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="98922925" Content_Hash="1987901431">
    <Metadata>
      <Id>eaeadcd7-9f67-4ce1-938e-1e7c6b02da65</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>The Anonymous Account Does Not Have Write Access to Web Content Directories And Cannot Execute Command-line Tools</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>The Anonymous Account Does Not Have Write Access to Web Content Directories And Cannot Execute Command-line Tools</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Check to ensure that the&amp;nbsp;anonymous account does not have write access to Web content directories and cannot execute command-line tools because attackers target this well known account to perform malicious actions.</p>
  <h1>How to Fix</h1>
  <p>To secure the anonymous account: </p>
  <ul>
    <li>
      <strong>Deny write access to Web content directories</strong>.
<p>Make sure that it is not possible for this account to write to content directories, for example, to deface Web sites.
</p></li>
    <li>
      <strong>Restrict access to System tools</strong>.
<p>In particular, restrict access to command-line tools located in \WINNT\System32.
</p></li>
    <li>
      <strong>Assign permissions to groups instead of individual accounts</strong>.
<p>Assigning users to groups and applying permissions to groups instead of individual accounts is good practice. For the anonymous account, create a group and add the anonymous account to it and then explicitly deny access to the group for key directories and
 files. Assigning permissions to a group allows you to more easily change the anonymous account or create additional anonymous accounts because you do not need to recreate the permissions.
</p><blockquote><strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;IISLockdown denies write access to content directories for the anonymous account by applying a deny write access control entry (ACE) for the Web Anonymous Users and Web Applications groups. It also adds a deny execute ACL
 on command-line tools.</blockquote></li>
    <li>
      <strong>Use separate accounts for separate applications</strong>.
<p>If your Web server hosts multiple applications, use a separate anonymous account for each application. Add the accounts to an anonymous Web users group, for example, the
<strong>Web Anonymous Users</strong> group created by IISLockdown, and then configure NTFS permissions using this group.
</p><p>For more information about using multiple anonymous accounts and hosting multiple applications, see Chapter 20, "<a href="http://msdn2.microsoft.com/en-us/library/aa302436.aspx">Hosting Multiple ASP.NET Applications</a>."
</p></li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1213197793" Content_Hash="-753327192">
    <Metadata>
      <Id>ebd306f3-91f7-4ee4-82a6-d647d15aecd5</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Unused Services Are Disabled</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology> Any</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Unused Services Are Disabled</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Check to ensure that&amp;nbsp;all unused services are disabled. Also make sure that Trivial File Transfer Protocol (TFTP) is disabled, Internet-facing administration points are removed, and ACLs configured to limit administrative access.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1020094340" Content_Hash="1005251255">
    <Metadata>
      <Id>ef0a7a3d-5739-47d8-9e46-0c733e158311</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Resource Kit Tools, Utilities, And SDKs Are Removed</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Resource Kit Tools, Utilities, And SDKs Are Removed</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>
      <div>Web Application</div>
    </li>
  </ul>
  <h1>What to Check For</h1>
  <p>Check to ensure that resource kit tools, utilities, and SDKs are removed from the Web Server if they are installed.</p>
  <br />
  <h1>How to Fix</h1>
  <p>SDKs and resource kits should not be installed on a production Web server. Remove them if they are present.
</p>
  <ul>
    <li>Ensure that only the .NET Framework Redistributable package is installed on the server and no SDK utilities are installed. Do not install Visual Studio&amp;nbsp;.NET on production servers.
</li>
    <li>Ensure that access to powerful system tools and utilities, such as those contained in the \Program Files directory, is restricted. IISLockdown does this for you.
</li>
    <li>Debugging tools should not be available on the Web server. If production debugging is necessary, then you should create a CD that contains the necessary debugging tools.
</li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="796334780" Content_Hash="-550672902">
    <Metadata>
      <Id>f362b5ea-cb80-412f-a9da-da17ff28de75</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Unused Protocols Are Blocked by Default</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology> Any</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Unused Protocols Are Blocked by Default</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Check to ensure that unused protocols are blocked by default when configuring your network firewall.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-704644251" Content_Hash="-18548869">
    <Metadata>
      <Id>f527a834-7f1b-41dd-9383-d386de47b9da</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Page ViewStateUserKey Is Used to Counter One-click Attacks</Title>
      <Category>Session Management</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Page ViewStateUserKey Is Used to Counter One-click Attacks</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Check to ensure that all forms that require authentication or can be used to trigger important functionality are protected with ViewStateUserKey.</p>
  <h1>Why</h1>
  <p>A one-click attack consists of posting a malicious HTTP form to a known, vulnerable Web site. It is called "one-click" because it usually begins with an unaware victim clicking on an alluring link received through e-mail or found when navigating a crowded forum.&amp;nbsp; By following the link, the user inadvertently triggers a remote process that ends up submitting the malicious form to a site.&amp;nbsp; This allows an attacker to perform any action caused by the vulnerable form with the credentials of the victim.</p>
  <p>
    <strong>ViewStateUserKey</strong> makes it much harder for hackers to use the content of the client-side view state to prepare malicious posts against the site.&amp;nbsp; Each time a form is invoked, a unique key is generated.&amp;nbsp; The key contains encrypted time and session information, and the form submission is rejected if it is used in another session or after the session timeout has expired. </p>
  <h1>How to Check</h1>
  <p>Use the following steps to check whether ViewStateUserKey is used properly:</p>
  <ol>
    <li>
      <p>
        <strong>Identify pages that should be protected. </strong>Review your application and make a list of all the forms that should be protected with ViewStateUserKey.&amp;nbsp; Forms that meet either of the following criteria should be protected:</p>
      <ul>
        <li>The form requires authentication </li>
        <li>The form triggers important application behavior or a write operation to a persistent store (eg. SQL database)</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Check to see if the pages are protected. </strong>ViewStateUserKey can be set per page or in the <strong>OnInit</strong> virtual method of the page-derived class.&amp;nbsp; </p>
      <ol>
        <li>First check <strong>OnInit</strong>, if you find protection there, then all of your pages are covered.<br /><br /><pre>protected override OnInit(EventArgs e) {<br />&amp;nbsp;&amp;nbsp; base.OnInit(e); <br />&amp;nbsp;&amp;nbsp; ViewStateUserKey = Session.SessionID;<br />}</pre></li>
        <li>Next check the individual pages, for instance:<br /><br /><pre>void Page_Init (object sender, EventArgs e) {<br />&amp;nbsp;&amp;nbsp; ViewStateUserKey = Session.SessionID;<br />}</pre></li>
      </ol>
    </li>
  </ol>
  <h1>How to Fix</h1>
  <p>The&amp;nbsp;following code added to each&amp;nbsp;of your pages will set the key based on SessionID.</p>
  <pre>void Page_Init (object sender, EventArgs e) {<br />   ViewStateUserKey = Session.SessionID;<br />}</pre>
  <p>Alternatively, you can add this code to the <strong>OnInit</strong> virtual method of the <strong>Page</strong>-derived class.&amp;nbsp; (Note that you must set this property in the <strong>Page.Init</strong> event).&amp;nbsp; This will allow you to write the code once rather than per page.</p>
  <pre>protected override OnInit(EventArgs e) {<br />   base.OnInit(e); <br />   ViewStateUserKey = Session.SessionID;<br />}</pre>
  <h1>Related Items</h1>
  <ul>
    <li>
      <a href="aa797ec2-627d-4b17-8c17-5a8405415344">Use Page ViewState User Key to Counter One-Click Attacks</a>
    </li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1211791601" Content_Hash="-193147458">
    <Metadata>
      <Id>fb83e483-3a9b-424c-8288-a66900d3a738</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Application Does Not Rely Only on Request Validation</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Application Does Not Rely Only on Request Validation</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that your application does not rely solely upon ASP.NET request validation to protect against malicious input.</p>
  <h1>Why</h1>
  <p>Request validation will catch some attacks; however, it provides only basic input validation. Do not rely on it. Use it as an extra precautionary measure in addition to your own input validation. Only you can define what represents good input for your application. </p>
  <h1>How to Check</h1>
  <p>To check for this problem, you must determine if your application is relying solely upon request validation to provide input and data validation. Use the following steps:&amp;nbsp;</p>
  <ol>
    <li>
      <p>
        <strong>Find all sources of input in your application.</strong> During design time identify all of the potential sources of input to your application. Scour the source code to discover sources of input that may have been missed in the design. Compile a list that you can use in the following steps. </p>
    </li>
    <li>
      <p>
        <strong>Identify validation routines.</strong> Each input source should have a data validation routine associated with it.&amp;nbsp;Ideally the validation will occur as soon after the input reaches your application as possible. Shared validation routines are better than creating many spread throughout your code base, so check for consolidation of routines to aid testing and reduce the chance of one-off bugs. If an input source does not have a validation routine associated with it, flag it for fixing.</p>
    </li>
    <li>
      <p>
        <strong>Ensure quality of validation routines.</strong> Validation routines&amp;nbsp;should check for length, range, format, and type. Validation should check first&amp;nbsp;for known valid and safe data and then for malicious, dangerous data. Do not rely on filtering out all malicious data because&amp;nbsp;it is too easy to miss something. Do not rely on client-side validation alone as it can be easily bypassed.</p>
    </li>
  </ol>
  <h1>How to Fix</h1>
  <p>Check for known good data and constrain input by validating it for type, length, format, and range.&amp;nbsp;</p>
  <p>
    <strong>Note</strong>: Validating input does not remove the need to format output, parameterize queries, or otherwise handle user input carefully.</p>
  <h1>Problem Example</h1>
  <p>An ASP.NET application uses forms authentication; however, it relies upon request validation to validate the form of the username and password entered by the user.&amp;nbsp;The application does not contain any validation routines to check input for length, range, format and type.</p>
  <h1>Solution Example</h1>
  <p>An ASP.NET application uses forms authentication and has a variety of other input fields for user interaction.&amp;nbsp; Request validation has been left on as a precautionary measure; however, it is not the sole defense mechanism against malicious input. The application authors have included validation routines through which all untrusted input and data is passed before it is used by the application.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="807602496" Content_Hash="-1385664248">
    <Metadata>
      <Id>fe3f09f3-6718-48ed-afc1-717959c86a58</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Untrusted Input Passed to Data Access Methods Is Validated</Title>
      <Category>Data Access</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1><p>Check to ensure that your application validates untrusted input that is&nbsp;passed to data access methods.</p><h1>How to Fix</h1><p>If your data access methods receive input parameters from outside the trust boundary of your data access code, make sure you validate them for type, length, format, and range. You can use regular expressions for text input and perform type and range checks on numeric data. If you do not do this, your data access code is potentially susceptible to SQL injection. </p><p>Only omit input parameter validation in your data access methods if you know for certain that data can only be supplied by trusted code, such as your application's business logic, which you know has thoroughly validated the data passed to it.</p><blockquote><strong>Note</strong>&nbsp;&nbsp;&nbsp;Avoid storing encoded data; instead, encode the data as close as possible to the output.</blockquote><hr><p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1615350162" Content_Hash="-488176236">
    <Metadata>
      <Id>ff63f731-227d-4ef9-bb72-9c59fea7664b</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Role Manager Is Used for Roles Authorization Rather than Custom Code</Title>
      <Category>Authorization</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Checklist Item</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Ensure that&amp;nbsp;the ASP.NET Role Manager is used for role-based authorization&amp;nbsp;rather than&amp;nbsp;custom code.</p>
  <h1>Why</h1>
  <p>ASP.NET provides a role manager feature that automatically creates, manages and looks up roles for the authenticated user. Role managers reduce the possibilities&amp;nbsp;of serious security issues from programmer errors&amp;nbsp;as well as&amp;nbsp;reduce the amount of custom code needed for an application. </p>
  <h1>How to Check</h1>
  <p>Use the following steps to check if your application is using the Role Manager:</p>
  <ol>
    <li>Check for the existence of the &lt;<strong>roleManager</strong>&gt; element beneath the &lt;<strong>system.web</strong>&gt; section of your application's Web.config file and make sure the <strong>enabled</strong> attribute is set to <strong>true.</strong></li>
    <li>Ensure there is a connection string in the &lt;<strong>connectionStrings</strong>&gt; section that points to your roles store. </li>
    <li>Ensure there is a specific provider configured in the &lt;<strong>roleManager</strong>&gt;<strong></strong>element. </li>
    <li>Check that the <strong>defaultProvider</strong> attribute on the &lt;<strong>roleManager</strong>&gt; element points to your chosen role provider. </li>
    <li>Check your application's code and ensure it is using the Role Manager API (for example <strong>Roles.IsUserInRole </strong>and <strong>Roles.CreateRole</strong>) whenever a roles check takes place.</li>
  </ol>
  <h1>How to Fix</h1>
  <ol>
    <li>User authentication access checks </li>
    <li>Role access from the configured role store by the <strong>RoleManager</strong> HTTP module using the configured role provider </li>
    <li>URL and file authorization </li>
    <li>Programmatic role checks</li>
  </ol>
  <p>This order means that role information cannot be used for an unauthenticated user. It also means that role access can be used for URL and file authorization.</p>
  <p>To use the role manager feature in an ASP.NET application, you need to do the following: </p>
  <ol>
    <li>Add a &lt;<strong>roleManager</strong>&gt; element beneath the &lt;<strong>system.web</strong>&gt; section of your application's Web.config file and enable role manager by setting its <strong>enabled</strong> attribute to <strong>true</strong>. </li>
    <li>Add a connection string to the &lt;<strong>connectionStrings</strong>&gt; section to point to your roles store. If you are using the <strong>AuthorizationStoreRoleProvider</strong>, this is an LDAP query string pointing to your Authorization Manager Policy store in Active Directory or ADAM. If you are using the <strong>SqlRoleProvider</strong>, this is a database connection string that points to your role store database. </li>
    <li>Configure the specific provider in the &lt;<strong>roleManager</strong>&gt;<strong></strong>element in your application's Web.config file. The role manager system supports the following providers: </li>
    <li>If your application roles are in an Authorization Manager Policy store in Active Directory or ADAM, use the <strong>AuthorizationStoreRoleProvider</strong>. </li>
    <li>If your application roles are in a SQL Server database, use the <strong>SqlRoleProvider.</strong></li>
    <li>If your application uses Windows groups as roles, use the <strong>WindowsTokenRoleProvider</strong>. Note that this is recommended to be used with Windows Authentication only. </li>
    <li>If your application roles are in a store other than those previously listed, create a custom roles provider inheriting <strong>RoleProvider</strong> base class. </li>
    <li>Set the <strong>defaultProvider</strong> attribute on the &lt;<strong>roleManager</strong>&gt; element to the chosen role provider. </li>
  </ol>
  <p>To check roles and manage roles, use the Role Manager API (for example <strong>Roles.IsUserInRole </strong>and <strong>Roles.CreateRole</strong>). </p>
  <h1>Related Items</h1>
  <ul>
    <li>
      <a href="/article/69cae495-2512-4216-b5d5-4e701ad6b65f">Use ASP.NET Role Manager for Roles Authorization</a>
    </li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1203409825" Content_Hash="-997746395">
    <Metadata>
      <Id>00c5fcad-6dc3-4362-bfa3-a55379abe094</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Validate All Values Sent from the Client</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Design</Phase>
      <Technology> Any</Technology>
      <Type>Guideline</Type>
      <DirectLink>Validate All Values Sent from the Client</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Check that your application validates all input parameters, including regular and hidden form fields, query strings, and cookies.</p>
  <h1>Why</h1>
  <p>To protect your application from denial of service attacks and code injection attacks, including SQL injection and XSS.</p>
  <h1>When</h1>
  <p>This is an important guideline and should be followed all the time.&amp;nbsp;</p>
  <h1>How</h1>
  <p>Restrict the fields that the user can enter and modify and validate all values coming from the client. If you have predefined values in your form fields, users can change them and post them back to receive different results. Permit only known good values wherever possible. For example, if the input field is for a state, only inputs matching a state postal code should be permitted.</p>
  <p>The <strong>System.Text.RegularExpressions.Regex</strong> class helps validate input parameters. For example, the following code shows how to use this class to validate a name passed through a query string parameter. The same technique can be used to validate other forms of input parameters, for example, from cookies or form fields. For example, to validate a cookie parameter, use <strong>Request.Cookies</strong> instead of <strong>Request.QueryString</strong>.</p>
  <div>
    <div>
    </div>
    <div>
      <pre>using System.Text.RegularExpressions;<br />. . .<br />private void Page_Load(object sender, System.EventArgs e)<br />{<br />&amp;nbsp; // Name must contain between 1 and 40 alphanumeric characters<br />&amp;nbsp; // together with (optionally) special characters '`´ for names such<br />&amp;nbsp; // as D'Angelo<br />&amp;nbsp; if (!Regex.IsMatch(Request.QueryString["name"], <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @"^[a-zA-Z'`-´\s]{1,40}$"))<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new Exception("Invalid name parameter");<br />&amp;nbsp; // Use individual regular expressions to validate all other<br />&amp;nbsp; // query string parameters<br />&amp;nbsp; . . .<br />}</pre>
    </div>
  </div>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information see, "Chapter 4 - Design Guidelines for Secure Web Applications" at <a href="http://msdn2.microsoft.com/en-us/library/aa302420.aspx">http://msdn2.microsoft.com/en-us/library/aa302420.aspx</a></li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-539372229" Content_Hash="1554891582">
    <Metadata>
      <Id>04f887c2-3d04-4e9b-99e2-74b18bbd6f2b</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Lock Accounts After Consecutive Failed Login Attempts</Title>
      <Category>Authentication</Category>
      <Phase>Design</Phase>
      <Technology>Java</Technology>
      <Type>Guideline</Type>
      <DirectLink>Lock Accounts After Consecutive Failed Login Attempts</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Lock users' accounts after consecutive failed login attempts.</p>
  <h1>Why</h1>
  <p>Multiple consecutive failed authentication attempts over a short period of time are a symptom that is used to detect when an account is under attack. Locking out the account can prevent&amp;nbsp;an attacker from compromising and accessing the account.</p>
  <h1>When</h1>
  <p>Your application should lock an account if the user has unsuccessfully tried to authenticate multiple times within a small period of time.</p>
  <h1>How</h1>
  <p>Use the following steps to successfully lock accounts after consecutive failed login attempts:</p>
  <ol>
    <li>
      <p>
        <strong>Determine a lockout policy. </strong>There are two variables to consider when determining a lockout policy:</p>
      <ul>
        <li>Number of allowed consecutive failed login attempts </li>
        <li>Amount of time that a locked account will remain locked</li>
      </ul>
      <p>A simple policy would be to lock an account after&amp;nbsp;five failed login attempts for the duration of 15 minutes. Although this is an effective method for blocking a brute force attack, it exposes your application to denial of service as an attacker can easily keep an account locked through a small stream of authentication requests.<br /><br />When determining the lockout policy, it is important to evaluate the risk of attacks against the user and the support costs associated with reactivating a locked account. For example, requiring the user to contact your organization's support staff&amp;nbsp;to reactivate a locked account will have a direct impact on support costs and would add general user frustration.&amp;nbsp;However, it is important to use extra care when designing more sophisticated variations of your application's lockout policy, such as correlating a single or multiple user login attempts with a source IP. When adding extra levels of complexity, carefully consider and evaluate the scenarios where your application's lockout policy can be circumvented or can harm your business. For instance, consider scenarios where an attacker would attempt to compromise a user through the use of multiple hosts, or multiple users would authenticate using a shared office IP.</p>
    </li>
    <li>
      <p>
        <strong>Track login attempts. </strong>Login attempts can be tracked with the use of a login counter. Increment the counter once a user tries to authenticate. Reset the counter to 0 after the user successfully authenticates. Example:</p>
      <pre>-- Authenticate the user<br />sql&gt; select login_attempts from users<br />      where user = {{username}} and pass = {{passDigest}};<br /> -- Reset the login counter<br />sql&gt; update users set login_attempts = 0 where user = {{username}};</pre>
    </li>
    <li>
      <p>
        <strong>Enforce the lockout policy. </strong>The lockout policy should be enforced at all points in the application where authentication is necessary. Example:</p>
      <pre>String dbStatement = "select login_attempts from users"<br />                   + "where user = ? and pass = ?;";<br />PreparedStatement st = dbConnection.prepareStatement(dbStatement);<br />st.setString(1, user);st.setString(2, passDigest);<br />ResultSet rs = st.executeQuery();<br /><br />if (rs.first())<br />{      <br />userIsValid = true;<br />      loginCount = rs.getInt(1);<br />}<br />else<br />{<br />      userIsValid = false;<br />}<br /><br />rs.close();<br /><br />if(userIsValid)<br />{<br />      if(loginCount &gt; 3)<br />      {<br />            throw new AccountIsLockedException();<br />      }<br /><br />      // The application checks the password's maturity<br />      checkPasswordMaturity(user);<br />}<br />else<br />{<br />      updateLastLoginAttempt(user);<br />}</pre>
    </li>
    <li>
      <p>
        <strong>Set an unlocking mechanism. </strong>Keep track of the lockout period. Based on your application's lockout policy, unlock the account after the lockout period has expired. Example:</p>
      <pre>-- Unlock all locked accounts whose 45 minute lockout period has expired<br />sql&gt; update users set login_attempts = 0<br />      where last_login &lt; (current_timestamp - interval '45' minute);</pre>
    </li>
  </ol>
  <p>
    <strong>Note:</strong> PCI DSS requirements state that an account should be locked out for at least 30 minutes after no more than six failed login attempts.</p>
  <h1>Problem Example</h1>
  <p>The following code executes the database transaction that is required during authentication. Because the transaction fails to check the login attempts counter, it is possible for an attacker to compromise an account through the use of brute force or a dictionary attack.</p>
  <pre>// The application fails to check the number of login attempts<br />String dbStatement = "select user from users where user = ? and pass = ?;";<br />st = dbConnection.prepareStatement(dbStatement);<br />st.setString(1, user);<br />st.setString(2, passDigest);<br />rs = st.executeQuery();</pre>
  <h1>Solution Example</h1>
  <p>The following code executes the database transaction that is required during authentication. Because the transaction checks the login attempts counter, it would be very expensive for an attacker to compromise an account through the use of brute force or a dictionary attack.</p>
  <pre>// The application checks the number of login attempts<br />String dbStatement = "select login_attempts from users where user = ? and pass = ?;";<br />PreparedStatement st = dbConnection.prepareStatement(dbStatement);<br />st.setString(1, user);<br />st.setString(2, passDigest);<br />ResultSet rs = st.executeQuery();<br /><br />if (rs.first())<br />{<br />      userIsValid = true;<br />      loginCount = rs.getInt(1);<br />}<br />else<br />{<br />      userIsValid = false;<br />}<br /><br />rs.close();<br /><br />if(userIsValid)<br />{<br />      if(loginCount &gt; 3)<br />      {<br />            throw new AccountIsLockedException();<br />      }<br />      checkPasswordMaturity(user);<br />}<br />else<br />{<br />      updateLastLoginAttempt(user);<br />}</pre>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="856043699" Content_Hash="-1996235025">
    <Metadata>
      <Id>0ad428be-72ab-4438-b6c9-b585f0f54948</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Don&amp;#39;t Use Redirects Or Forwards If Possible</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Design</Phase>
      <Technology> Any</Technology>
      <Type>Guideline</Type>
      <DirectLink>Don&amp;#39;t Use Redirects Or Forwards If Possible</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Avoid using redirects or forwards if possible.</p>
  <h1>Why</h1>
  <p>Redirects or forwards may be manipulated by an attacker to create hyperlinks that appear to point to legitimate sites, but actually point to attacker-controlled malicious pages. This technique is oftened used by phishers to trick people into trusting a fake web site.</p>
  <h1>When</h1>
  <p>Use this guideline when writing a web application that uses redirects or forwards. Avoid using redirects or forwards in web applications, if possible.</p>
  <h1>How</h1>
  <p>Perform the following actions to avoid using redirects or forwards:</p>
  <br />
  <ol>
    <li>
      <p>
        <strong>Enumerate redirects and forwards.</strong> Review application code to find all redirects and forwards used by the application.</p>
    </li>
    <li>
      <p>
        <strong>Review application design.</strong> Determine how redirects and forwards figure into the application design. Consider making design changes to remove the need for redirects and forwards.</p>
    </li>
    <li>
      <p>
        <strong>Remove redirects or forwards.</strong> Remove the redirects and forwards that are not necessary after changes to the application design.</p>
    </li>
    <li>
      <p>
        <strong>Secure the remaining redirects or forwards.</strong> If there appears to be no reasonable way to get rid of redirects or forwards, use related guidelines to secure the remaining redirects or forwards.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>Consider an on-line banking application that has an insecure redirect:</p>
  <pre>http://www.onlinebank.com/redirect.asp?url=[destination]</pre>
  <p>A phisher may create the following hyperlink to point to his own site and send it in spam messages to millions of people:</p>
  <pre>http://www.onlinebank.com/redirect.asp?url=www.phisher.com</pre>
  <p>When a user sees a link that appears to point to his bank at onlinebank.com in an e-mail message, he clicks that link and sees a web site that looks exactly like the bank's, but is actually a phishing web site used to steal authentication credentials. The user enters his account number and PIN into the web page, receives an error message telling him to try again, and is redirected to the bank's real site. After entering his credentials again, the user successfuly views his account. However, the phisher now has the user's online banking information.</p>
  <h1>Solution Example</h1>
  <p>The best solution to unvalidated redirects or forwards is to not use redirects or forwards at all. Considering the problem example above, a simple solution would be to remove the redirect.asp page after making the necessary changes to the application design.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information about unvalidated redirects and forwards, please see <a href="http://www.owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards">http://www.owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards</a></li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="286184972" Content_Hash="-291139050">
    <Metadata>
      <Id>0ba54c5c-7064-4224-8d6d-b4906db5da59</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Use Type Safe SQL Parameters When Constructing SQL Queries</Title>
      <Category>Data Access</Category>
      <Phase>Implementation</Phase>
      <Technology>Java</Technology>
      <Type>Guideline</Type>
      <DirectLink>Use Type Safe SQL Parameters When Constructing SQL Queries</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Use Prepared Statements to execute SQL statements. Do not generate SQL statements directly from user input.</p>
  <h1>Why</h1>
  <p>Parameterized Queries mitigate the number one risk for database-facing Web applications: SQL injection. This powerful attack is language independent, as it depends on the algorithm used to generate SQL strings passed to the database and affects the database engine, not the actual application.</p>
  <p>It exploits the creation of the SQL string, in which user input is embedded manually with escape sequences (such as the single quote (<strong>'</strong>) or double quote (<strong>"</strong>) characters). Using this method, an attacker inserts valid SQL statement fragments as part of user input so they, in turn, are embedded within the SQL query that is submitted to the database engine for execution. Successful exploitation allows an attacker to potentially compromise the entire database and often the underlying operating system. </p>
  <p>Parameterized Queries offer a simple yet efficient mitigation since they automatically contain user-input in a non-escaped form, "compiling" the query and passing the input as parameters, much like a function call. There is no known method of injecting custom SQL over Parameterized Queries.</p>
  <p>Additionally, using Parameterized queries offers two significant advantages:</p>
  <ul>
    <li>
      <strong>Greater Efficiency</strong>: The database engine needs to "compile" the statement only once, allowing for greater efficiency in query invocation. </li>
    <li>
      <strong>Greater Security</strong>: The database engine automatically handles the parsing and embedding of user input, effectively negating any potential for SQL injection due to attackers taking advantage of delimiter characters such as a single quote (<strong>'</strong>) or a double quote (<strong>"</strong>). </li>
  </ul>
  <h1>When</h1>
  <p>Type-safe SQL parameters should be used whenever SQL statements need to be executed by the database. </p>
  <h1>How</h1>
  <p>One way of making the application less susceptible to SQL injection attacks is by using stored procedures. Stored procedures are subroutines stored in the database that are available to applications for accessing the data. </p>
  <p>Just using stored procedures isn't a complete remedy for SQL injection. The important thing to do is use parameters with stored procedures, or else your stored procedures can be susceptible to SQL injection if they use unfiltered input. Stored procedures provide several security advantages: </p>
  <ul>
    <li>By parameterizing input parameters and type-enforcing them, user input is effectively filtered. </li>
    <li>Stored procedures are allowed by most databases&amp;nbsp;to execute under different security privileges than&amp;nbsp;from the database user, thereby restricting the ability of the application to do anything beyond the actions specified in the stored procedures. For instance, an application would have execute access to a stored procedure but no access to the base tables. </li>
  </ul>
  <p>To use type-safe SQL parameters, follow these steps:</p>
  <ol>
    <li>
      <p>
        <strong>If possible, use stored procedures. </strong>Stored procedures are pre-compiled statements that are stored on the database server. Using stored procedures improves your application's performance and security.&amp;nbsp;</p>
    </li>
    <li>
      <p>
        <strong>Identify the SQL queries. </strong>Locate all SQL queries throughout your application. Example:</p>
      <blockquote>
        <pre>Connection cn = MyApp.getDBConnection();<br />Statement st = cn.createStatement();<br />String query = "select login_attempts from myappUsers where user = \"" + user<br />             + "\" and pass = \"" + new String(passDigest) + "\";";<br />ResultSet rs = st.executeQuery(query);</pre>
      </blockquote>
    </li>
    <li>
      <p>
        <strong>Identify the parameters in each SQL query. </strong>After locating all SQL queries, identify the parameters in each query. Understand the format and type of each parameter's data.</p>
    </li>
    <li>
      <p>
        <strong>Use PreparedStatement. </strong>Java supports parameterized queries via its <strong>PreparedStatement</strong> class. <strong>PreparedStatement</strong> is mapped by most databases to a parameterized query or a stored procedure. Although the implementation may differ&amp;nbsp;among databases, the functionality is the same. Turn all SQL queries into parameterized queries. To accomplish this, turn all <strong>Statement</strong> objects into <strong>PreparedStatement</strong> objects. For example, the SQL query from Step 1 would be:</p>
      <blockquote>
        <pre>Connection cn = MyApp.getDBConnection();<br />PreparedStatement st = cn.prepareStatement("select login_attempts from myappUsers"<br />                     + " where user = ? and pass = ?;");<br />st.setString(1, user);<br />st.setString(2, new String(passDigest));<br />ResultSet rs = st.executeQuery();.</pre>
      </blockquote>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code validates the user based on a given username and password. It hashes the password with a random salt, then it compares the username and the produced hash against the data stored in the backend database. Unfortunately, the SQL query is dynamically crafted by using the user's input. If there is no proper input validation, an attacker can access the application's database server through the use of SQL injection.</p>
  <blockquote>
    <pre>public boolean validateUser(String user, char[] pass)<br />{<br />      // Hash the credentials before querying the credential store<br />      // The application crafts the SQL query based on user's input<br />      Connection cn = MyApp.getDBConnection();<br />      Statement st = cn.createStatement();<br />      String query = "select login_attempts from myappUsers where user = \""<br />                    + user + "\" and pass = \"" + passHash + "\";";<br />      ResultSet rs = st.executeQuery(query);<br />       // Execute the rest of the authentication steps<br />}</pre>
  </blockquote>
  <h1>Solution Example</h1>
  <p>The following code validates the user based on given username and password. It hashes the password with a random salt, then it compares the username and the produced hash against the data stored in the backend database. Because the application uses <strong>PreparedStatement</strong>, it is much more difficult for an attacker to gain access to the application's database server through the use of SQL injection. </p>
  <blockquote>
    <pre>public boolean validateUser(String user, char[] pass)<br />{<br />      // Hash the credentials before querying the credential store<br />      // The application uses parameterized queries<br />      Connection cn = MyApp.getDBConnection();<br />      PreparedStatement st = cn.prepareStatement("select user from myappUsers"<br />                            + " where user = ? and pass = ?;");<br />      st.setString(1, user);<br />      st.setString(2, passHash);<br />      ResultSet rs = st.executeQuery();<br />       // Execute the rest of the authentication steps<br />}</pre>
  </blockquote>
  <h1>Additional Resources</h1>
  <ul>
    <li>To learn more about using parameterized queries in Java, see: Documentation for <a href="http://java.sun.com/j2se/1.4.2/docs/api/java/sql/PreparedStatement.html">Interface PreparedStatement</a>. </li>
    <li>For more information about preventing SQL injection attacks, visit: <a href="http://www.owasp.org/index.php/Reviewing_Code_for_SQL_Injection">Reviewing Code for SQL Injection</a> from OWASP. </li>
    <li>To learn more about SQL server security, visit: <a href="http://www.sqlsecurity.com/">SQLSecurity.com</a>.</li>
  </ul>
  <ul>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1040956955" Content_Hash="-1331855137">
    <Metadata>
      <Id>0eb30137-081e-4451-8ed2-36ff674d37d8</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Do Not Rely on Client State Management Options</Title>
      <Category>Session Management</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1><p>Avoid using any of the client-side state management options, such as view state, cookies, query strings, or hidden form fields, to store sensitive data. </p><h1>Why</h1><p>All information that is store on the client side can be tampered with by the client. Storing sensitive information on the client can compromise the integrity and confidentiality of your application's data. </p><h1>When</h1><p>Uniformly applicable whenever a sensitive info is being stored somewhere to maintain state. </p><h1>How</h1><p>Use the following steps when considering the use of client state management:</p><ol><li><p><strong>Identify sensitive information. </strong>Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to, names of customers, government issued ID numbers, credit card and other financial information, passwords, and private keys. Some industries, such as health care and banking, have regulatory standards that define sensitive information. Use regulatory requirements, as they apply to your application, to identify sensitive data. Sensitive data can be defined as follows:</p><ul><li>Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with others. </li><li>Information that a user provides that they would not want shared with other users of the application. </li><li>Information that comes from an external trusted source that is not designed to be shared with users.</li></ul><strong></strong></li><li><p><strong>Identify the use.</strong> Identify the use of the sensitive data. Consult with your application's design, functional requirements, and security documentation to determine whether it is necessary to use client state management for handling certain sensitive data. </p></li><li><p><strong>Choose appropriate management options.</strong> Sensitive data should always be stored into server-side state management options such as a database. If your application's documentation requires client state management, ensure that strong encryption is applied.</p></li><li><p><strong>Apply appropriate management options.</strong> Identify all uses of sensitive data. Ensure that the appropriate management options are applied.</p></li></ol><h1>Problem Example</h1><p>The following snippet shows an application that keeps track of the current user via the use of cookies. Unfortunately, an attacker can change the userID value of the cookie and impersonate another user.</p><pre>Response.Cookies["userID"].Value = "joe";</pre><h1>Solution Example</h1><p>The following snippet shows an application that keeps track of the current user via the use of server-side sessions. Therefore, it is impossible for an attacker to change the userID value and impersonate another user.</p><pre>Session["userID"] = "joe";</pre><h1>Additional Resources</h1><ul><li>To learn more about parameter manipulation and ways to prevent it, see: <a href="http://www.cgisecurity.com/owasp/html/ch11s04.html">Parameter Manipulation</a>. </li><li>To learn more about session management, see: <a href="http://www.securityfocus.com/infocus/1774">Basic Web Session Impersonation</a>.</li></ul><hr><p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-579462224" Content_Hash="-534753636">
    <Metadata>
      <Id>21a9dbc2-dc93-46ea-b8a6-61e8398940c6</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Validate All Data Passed Between Native And Java Code</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology>Java</Technology>
      <Type>Guideline</Type>
      <DirectLink>Validate All Data Passed Between Native And Java Code</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Validate all data that is passed between Java code and native code.</p>
  <h1>Why</h1>
  <p>Unchecked input and/or output can lead to buffer overflows, injection based attacks such as SQL injection and cross-site scripting, etc., that can&amp;nbsp;exploit weaknesses in the application.</p>
  <h1>When</h1>
  <p>Your application should always verify data that is passed between native code and Java.</p>
  <h1>How</h1>
  <p>There are several things to consider when validating input/output between native and Java code: </p>
  <ol>
    <li>
      <p>
        <strong>Check language barriers. </strong>Distinguishing&amp;nbsp;the boundaries between native and Java code is very important. Because the Java sandbox provides multiple security checks to its code, it is important to know the boundary&amp;nbsp;between&amp;nbsp;where the Java sandbox ends and the compiled code begins&amp;nbsp;to interact&amp;nbsp;directly with the CPU, so you can&amp;nbsp;compensate for&amp;nbsp;the lack of such checks inside the native code.</p>
    </li>
    <li>
      <p>
        <strong>Validate for length, range, format and type. </strong>After discovering the language boundaries, determine the type, format and structure of the data that is passed between Java and native code. Build a validator for each type of data that is passed between the two environments. </p>
    </li>
    <li>
      <p>
        <strong>Construct a set of validators. </strong>Centralize your application's validators as it helps strengthen the code by limiting the amount of scattered validation code throughout your application. Place the set of validators on the language barriers. Your application should pass data between native and Java code only through its set of validators.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following segment shows a JNI code that utilizes a COM object. Making the assumption that the Java code will handle data validation, the JNI segment does not verify that the passed input is a valid GUID. Since invalid GUIDs may cause unhandled exceptions, an attacker can force the application to disclose its call stack and possibly its source filenames.</p>
  <pre>#include &lt;jni.h&gt;<br />#include &lt;sys/types.h&gt;<br />#include &lt;fcntl.h&gt;<br />#include &lt;stdio.h&gt;<br />#include &lt;atlbase.h&gt;<br />#include &lt;windows.h&gt;<br />#include &lt;wtypes.h&gt;<br />JNIEXPORT jboolean<br />JNICALL Java_Identifier_invokeObject<br />      (JNIEnv * env, jobject jobj, jstring jguid)<br />{<br />      HRESULT result;<br />      CLSID clsid;<br />      IUnknown *pIunkn;<br />      LPWSTR guid;<br />      jboolean iscopy;<br />      jboolean ret = false;<br />      char* temp_guid = (*env)-&gt;GetStringUTFChars(env, jguid, &amp;iscopy);<br />      //The application fails to verify that the GUID is valid<br />      guid = SysAllocStringLen(0, 38);<br />      MultiByteToWideChar(CP_ACP, 0, temp_guid, -1, guid, 38);<br />      result = GUIDFromString(guid, &amp;clsid);<br />      ...<br />      return ret;<br />}</pre>
  <h1>Solution Example</h1>
  <p>The following segment shows a JNI code that utilizes a COM object. Because the passed input is validated as being a GUID, the application reduces the risk of unhandled exceptions.</p>
  <pre>#include &lt;jni.h&gt;<br />#include &lt;sys/types.h&gt;<br />#include &lt;fcntl.h&gt;<br />#include &lt;stdio.h&gt;<br />#include &lt;atlbase.h&gt;<br />#include &lt;windows.h&gt;<br />#include &lt;wtypes.h&gt;  <br />JNIEXPORT jboolean <br />JNICALL Java_Identifier_invokeObject<br />      (JNIEnv * env, jobject jobj, jstring jguid)<br />{<br />      HRESULT result;<br />      CLSID clsid;<br />      IUnknown *pIunkn;<br />      LPWSTR guid;<br />      jboolean iscopy;<br />      jboolean ret = false;<br />      char* temp_guid = (*env)-&gt;GetStringUTFChars(env, jguid, &amp;iscopy);<br />      // The application verifies that the input matches the criteria for a GUID<br />      if(!validGUID(temp_guid))<br />      {<br />            return ret;<br />      }<br />      guid = SysAllocStringLen(0, 38);<br />      MultiByteToWideChar(CP_ACP, 0, temp_guid, -1, guid, 38);<br />      result = GUIDFromString(guid, &amp;clsid);<br />       ...<br />      return ret;<br />}<br /><br />bool validGUID(char *guid)<br />{<br />      // Check that GUID is of right length<br />      if(strlen(guid) != 38) return false;<br />      // Sample GUID: {1EF4A023-143A-4e0e-AD72-69C2C68C2D70<br />}<br />      if(guid[0]  != '{') return false;<br />      if(guid[9]  != '-') return false;<br />      if(guid[14] != '-') return false;<br />      if(guid[19] != '-') return false;<br />      if(guid[24] != '-') return false;<br />      if(guid[37] != '}') return false;<br />      int i=1;<br />      while(i&lt;37)<br />      {<br />            if((guid[i] &gt;= 'a' &amp;&amp; guid[i] &lt;= 'f')<br />                  || (guid[i] &gt;= 'A' &amp;&amp; guid[i] &lt;= 'F')<br />                  || (guid[i] &gt;= '0' &amp;&amp; guid[i] &lt;= '9')<br />            {<br />                  // GUID is valid<br />            }<br />            else<br />            {<br />                  return false;<br />            }<br />            i++;<br />            if(i == 9 || i == 14 || i == 19 || i == 24)<br />            {<br />                  i++;<br />            }<br />      }<br /><br />      return true;<br />}</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>To learn more about JNI, see: <a href="http://java.sun.com/j2se/1.3/docs/guide/jni/spec/jniTOC.doc.html">Java Native Interface Specification</a>. </li>
    <li>For more information about the security issues that JNI introduces, see: <a href="http://www.owasp.org/index.php/Unsafe_JNI">Unsafe JNI</a> from OWASP. </li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1115049748" Content_Hash="-165647311">
    <Metadata>
      <Id>22701ae6-1207-4e89-b62c-537bd112fb84</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Disable Directory Browsing</Title>
      <Category>Server Hardening</Category>
      <Phase>Deployment</Phase>
      <Technology>Java</Technology>
      <Type>Guideline</Type>
      <DirectLink>Disable Directory Browsing</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Disable directory browsing for your application's web directories.</p>
  <h1>Why</h1>
  <p>Directory browsing allows an attacker to browse your application's directory structure in search of unprotected files and components.</p>
  <h1>When</h1>
  <p>Disable directory browsing at all times.</p>
  <h1>How</h1>
  <p>Use the following steps to successfully disable directory browsing:</p>
  <ol>
    <li>
      <p>
        <strong>Identify if directory browsing is enabled. </strong>Navigate to your application's directories. Identify&amp;nbsp;whether your application's server correctly returns an HTTP error message. If it incorrectly returns&amp;nbsp;the directory contents, continue with the following steps.</p>
    </li>
    <li>
      <p>
        <strong>Locate the default servlet's configuration. </strong>Open your application's deployment descriptor (e.g. web.xml), and locate the default servlet's configuration. If the default servlet is present, it is mapped to the root directory of your application. Example: </p>
      <pre>&lt;servlet&gt;<br />      &lt;servlet-name&gt;default_servlet&lt;/servlet-name&gt;<br />      &lt;servlet-class&gt;<br />            org.apache.catalina.servlets.DefaultServlet<br />      &lt;/servlet-class&gt;<br />&lt;/servlet&gt;<br />&lt;servlet-mapping&gt;<br />      &lt;servlet-name&gt;default_servlet&lt;/servlet-name&gt;<br />      &lt;url-pattern&gt;/&lt;/url-pattern&gt;<br />&lt;/servlet-mapping&gt;</pre>
    </li>
    <li>
      <p>
        <strong>Deny directory browsing in the default servlet's configuration. </strong>Initialize the default servlet with the parameter <em>listings</em> set to <em>false</em>. Example:</p>
      <pre>&lt;servlet&gt;<br />      &lt;servlet-name&gt;default_servlet&lt;/servlet-name&gt;<br />      &lt;servlet-class&gt;<br />            org.apache.catalina.servlets.DefaultServlet<br />      &lt;/servlet-class&gt;<br /><strong>      &lt;init-param&gt;<br /></strong>            &lt;param-name&gt;listings&lt;/param-name&gt;<br />            &lt;param-value&gt;false&lt;/param-value&gt;<br /><strong>      &lt;/init-param&gt;<br /></strong>&lt;/servlet&gt;<br />&lt;servlet-mapping&gt;<br />      &lt;servlet-name&gt;default_servlet&lt;/servlet-name&gt;<br />      &lt;url-pattern&gt;/&lt;/url-pattern&gt;<br />&lt;/servlet-mapping&gt;</pre>
    </li>
    <li>
      <p>
        <strong>Ensure your JSP files are located under the WEB-INF/ directory of your web application.</strong> This ensures that an attacker cannot directly access those pages, however your application can perform internal forwards to these pages.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>An application is deployed on a production server. Unfortunately, the developers did not disable directory browsing. This allows an attacker to search for unprotected configuration files.</p>
  <h1>Solution Example</h1>
  <p>An application is deployed on a production server. Because the developers have disabled directory browsing, it is difficult for an attacker to use HTTP browsing to search for unprotected configuration files.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-263995202" Content_Hash="-1647361047">
    <Metadata>
      <Id>280d4fb4-9004-4304-8d93-a41b583f86cf</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Do Not Rely on Client-side Validation</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Do Not Rely on Client-side Validation</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Do not rely on client-side validation for security purposes. Use server-side validation to ensure that data is safe and perform security decisions based on that. Client-side validation&amp;nbsp;should be used solely to&amp;nbsp;reduce round trips to the server and to improve the user experience.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; </p>
  <h1>Why</h1>
  <p>Client side validation can be easily bypassed. For example, a malicious user could disable&amp;nbsp;the client-side script routines by disabling JavaScript.&amp;nbsp;Users&amp;nbsp;may also construct their own&amp;nbsp;form posts using custom html, or&amp;nbsp;using an&amp;nbsp;HTTP proxy to modify form posts.&amp;nbsp;&amp;nbsp;If developers rely on the controls in the client's user interface and do not validate all results on the back end, it may introduce injection vulnerabilities that would allow an attacker to bypass data input restrictions and gain access to unintended application functionality.</p>
  <h1>When</h1>
  <p>During implementation, ensure all input from&amp;nbsp;the client is&amp;nbsp;validated, even if the input is not stored.</p>
  <h1>How</h1>
  <p>It's important to specify what input is acceptable, rather then trying to specify all&amp;nbsp;the&amp;nbsp;variations&amp;nbsp;of input that are&amp;nbsp;illegal (whitelisting as opposed to blacklisting).&amp;nbsp;Use ASP.NET validator controls to check user input on the server side and provide feedback to the user when input fails to pass validation requirements.&amp;nbsp;Follow these steps on each form page in an application: </p>
  <ol>
    <li>
      <p>
        <strong>Determine the required fields.</strong> Use the required field validator control to ensure all required fields are present. Here is an example that declares a textfield in an ASP page that is a required field:</p>
      <pre>&lt;td&gt;<br />&amp;nbsp;&amp;nbsp; &lt;asp:RequiredFieldValidator runat=server <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ControlToValidate=txtName<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ErrorMessage="User ID is required."&gt; *<br />&amp;nbsp;&amp;nbsp; &lt;/asp:RequiredFieldValidator&gt;<br />&lt;/td&gt;<br />&lt;td&gt;User ID:&lt;/td&gt;<br />&lt;td&gt;&lt;input type=text runat=server id=txtName&gt;&lt;/td&gt;</pre>
      <p>The * is displayed next to the label if the input is blank. The error message is reported in a summary. The "ControlToValidate" property specifies the ID of the control to validate. The final step is to add a validation summary to the top of the page like so:</p>
      <pre>&lt;asp:ValidationSummary runat=server <br />HeaderText="There were errors on the page:" /&gt;<br /></pre>
    </li>
    <li>
      <p>
        <strong>Enforce numeric range&amp;nbsp;constraints.</strong> Use the RangeValidator control to ensure any numeric values are constrained to a specific, acceptable&amp;nbsp;range. Here is an example that declares an integer field&amp;nbsp;in an ASP page that has&amp;nbsp;a valid range from 1 to 50:</p>
      <pre>&lt;td&gt;</pre>
      <pre>  &lt;asp:RangeValidator id="Range1"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ControlToValidate="txtState"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; MinimumValue="1"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; MaximumValue="50"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Type="Integer"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; EnableClientScript="false"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Text="The value must be from 1 to 10!"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; runat="server"&gt; * </pre>
      <pre>&amp;nbsp; &lt;/asp:RangeValidator&gt;<br />&lt;/td&gt;<br />&lt;td&gt;State:&lt;/td&gt;<br />&lt;td&gt;&lt;input type=text runat=server id=txtState&gt;&lt;/td&gt;</pre>
    </li>
    <li>
      <p>
        <strong>Validate&amp;nbsp;verification fields.</strong> Fields such as password entry are often verified by having the user re-type them to ensure they are correct. Use the CompareValidator control to make the comparisons and ensure validity/integrity. Here is an example that declares&amp;nbsp;two password&amp;nbsp;fields&amp;nbsp;in an ASP page that&amp;nbsp;must match in order to validate properly:</p>
      <pre>&lt;asp:CompareValidator runat=server<br />            ControlToValidate=txtRePWord<br />            ControlToCompare=txtPWord<br />             ErrorMessage="Passwords do not match." /&gt;</pre>
      <p>In this case, the two fields being compared are "txtPWord" and "txtRePWord". If they do not&amp;nbsp;match, validation fails with the error message, "Passwords do not match.".&amp;nbsp;</p>
    </li>
    <li>
      <p>
        <strong>Enforce type constraints on string fields.</strong> String fields are the most difficult type of input to effectively validate because the range of acceptable&amp;nbsp;characters is much larger then numeric&amp;nbsp;and enumerated types. Regular expression provide a flexible mechanism for dictating valid patterns and characters. Use the RegularExpressionValidator to perform a variety of checks on string-based fields such as zip codes and phone numbers.&amp;nbsp; Here is an example that declares an&amp;nbsp;text field&amp;nbsp;in an ASP page that should represent a five digit zip code, consisting entirely of numeric digits, and a validator to enforce those constraints:</p>
      <pre>&lt;input type=text runat=server id=txtZip&gt;<br />      &lt;asp:RegularExpressionValidator runat=server<br />             ControlToValidate="txtZip"<br />             ErrorMessage="Zip code must be 5 digits, all numbers."<br />             ValidationExpression="[0-9]{5}"&gt; * </pre>
      <pre>      &lt;/asp:RegularExpressionValidator&gt;</pre>
      <pre>&lt;td&gt;Zip code:&lt;/td&gt;<br />&lt;td&gt;&lt;input type=text runat=server id=txtZip&gt;&lt;/td&gt;</pre>
    </li>
    <li>
      <p>
        <strong>Use custom validation to handle remaining&amp;nbsp;input constraints.</strong> The built-in ASP.NET&amp;nbsp;validation controls handle&amp;nbsp;most of the cases that commonly arise in&amp;nbsp;web applications, but there&amp;nbsp;may be&amp;nbsp;times when they are not appropriate.&amp;nbsp;The CustomValidator enables custom validation code that can plugs into the existing validation system.&amp;nbsp;Here is an example that declares a&amp;nbsp;text field&amp;nbsp;in an ASP page. For this particular text field, there is business logic that needs to be satisfied which is not easily constrainable by the&amp;nbsp;other&amp;nbsp;validation constructs, so a&amp;nbsp;custom validator is implementated that ensures the&amp;nbsp;string&amp;nbsp;in the text field&amp;nbsp;does not start&amp;nbsp;with the letter "a":</p>
      <pre>&lt;%@ Page Language="vb" %&gt;<br />&lt;script runat=server&gt;</pre>
      <pre>public sub CheckID(source as Object, args as ServerValidateEventArgs)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; args.IsValid = args.Value.substring(0, 1).tolower() &lt;&gt; "a"<br />end sub </pre>
      <pre>&lt;/script&gt;</pre>
      <p>To call this function, add a CustomValidator, which is designed to call developer code to perform its check. Here is the declaration:</p>
      <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:CustomValidator runat=server<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; controltovalidate="txtName" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; errormessage="ID is already in use." <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; OnServerValidate="CheckID" /&gt;</pre>
      <p>It is worth noting that this could have been done with the RegularExpression validation control, but in this case it makes more sense to use custom validation since&amp;nbsp;a type of high-level validation that could conceivably be more complex then a simple pattern match is being defined (e.g., the validation rules might change based on application state).&amp;nbsp;</p>
    </li>
    <li>
      <p>
        <strong>Use the Regex class to validate other sources</strong>
      </p>
      <p>Most Web applications accept input from various sources, including HTML controls, server controls, query strings, and cookies. Validate input from all of these sources to help prevent injection attacks. Use regular expressions to help validate input. The following example shows how to use the <strong>Regex</strong> class. </p>
      <pre>using System.Text.RegularExpressions ;<br /> // Instance method:Regex reg = new Regex(@"^[a-zA-Z'.\s]{1,40}$");<br />Response.Write(reg.IsMatch(Request.QueryString["Name"]));<br />// Static method:<br />if (!Regex.IsMatch(Request.QueryString["Name"],@"^[a-zA-Z'.\s]{1,40}$"))<br /> {<br />   // Name does not match expression<br /> }</pre>
      <p>If you cannot cache your regular expression for frequent use, you should use the static <strong>IsMatch</strong> method where possible for performance reasons, to avoid unnecessary object creation.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>Consider a very simple form for an online shopping cart. The cart component consists of two components:</p>
  <ol>
    <li>
      <p>An HTML form that contains all of the fields that make up the order to be submitted for processing:</p>
      <pre>&lt;html&gt;<br />  &lt;head&gt;<br />    &lt;title&gt;Widget shopping cart&lt;/title&gt;<br />  &lt;/head&gt;<br />  &lt;body&gt;<br />&amp;nbsp;&amp;nbsp;  &lt;H1&gt;welcome to the most boring shopping cart on the web!&lt;/H1&gt; </pre>
      <pre>    A widget's current price is $19.95 USD. Please use the following form to submit an order.</pre>
      <pre>    &lt;form action="process_order.aspx" method="POST"&gt;  <br />      &lt;p&gt;Please enter the number of widgets you would like to purchase:&lt;/p&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;   quantity:&lt;br/&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;  &amp;nbsp;&lt;select name="WidgetQuantity"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;  &amp;nbsp; &lt;option value="1"&gt;1&lt;/option&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;   &lt;option value="2"&gt;2&lt;/option&gt; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;   &lt;option value="3"&gt;3&lt;/option&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;   &lt;option value="4"&gt;4&lt;/option&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;  &lt;/select&gt;</pre>
      <pre>      ...<br />      &lt;input type="submit" value="order"/&gt;<br />    &lt;/form&gt;</pre>
      <pre>  &lt;/body&gt;<br />&lt;/html&gt;</pre>
    </li>
    <li>
      <p>An ASP.NET page that processes the form submissions and performs the necessary steps to create the order.</p>
      <pre>int&amp;nbsp;dQuantity = Request("WidgetQuantity");<br />double dPrice = 19.95;</pre>
      <pre>double dCost = dQuantity * dPrice;</pre>
      <p>This server side page is problematic because it lacks validation to ensure the quantity field is correct.&amp;nbsp;The application&amp;nbsp;works fine in the case where a user plays by the rules and submits the form as it is shown, because the&amp;nbsp;quantity field ensures that the range constraints for the order quantity are always valid.&amp;nbsp;However, if a clever user decides to construct their own form and submits a negative WidgetQuantity field, it causes a negative balance. Depending on what e-commerce system is used, this could result in a credit to the user's account. It also&amp;nbsp;might subtract the negative balance from the company's inventory, which would carry significant ramifications and costs&amp;nbsp;later on.</p>
    </li>
  </ol>
  <h1>Solution Example</h1>
  <p>Consider the following ASP.NET page that processes the form submissions and performs the necessary steps to create an order:</p>
  <pre>&lt;%@ Page Language="vb" %&gt;<br />&lt;script runat=server&gt;<br />public sub OnSubmit(source as Object, e as EventArgs)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; if Page.IsValid then<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ' Now we can perform our transaction.<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int dQuantity = Request("WidgetQuantity");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; double dPrice = 19.95;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; double dCost = dQuantity * dPrice;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; end if<br />end sub<br />&lt;/script&gt;<br />&lt;html&gt;<br />&lt;head&gt;<br />&lt;title&gt;Validation Sample&lt;/title&gt;<br />&lt;/head&gt;<br />&lt;body&gt;</pre>
  <pre>&lt;form runat=server&gt;<br />&lt;asp:ValidationSummary runat=server headertext="There were errors on the page:" /&gt;</pre>
  <pre>&lt;table&gt;<br />&amp;nbsp; &lt;tr&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;td&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:RequiredFieldValidator runat=server <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; controltovalidate="WidgetQuantity"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; errormessage="WidgetQuantity is required."&gt;*<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/asp:RequiredFieldValidator&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/td&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;td&gt;A widget's current price is $19.95 USD. Please use the following form to submit an order.&lt;/td&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;td&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;select name="WidgetQuantity"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;option value="1"&gt;1&lt;/option&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;option value="2"&gt;2&lt;/option&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;option value="3"&gt;3&lt;/option&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;option value="4"&gt;4&lt;/option&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/select&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:RegularExpressionValidator runat=server display=dynamic<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; controltovalidate="WidgetQuantity"&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; errormessage="WidgetQuantity must be a non-zero, positive integer." <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; validationexpression="[1-9]{1}[0-9]{0,7}" /&gt;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/td&gt;<br />&amp;nbsp; &lt;/tr&gt;<br />...<br />&lt;/table&gt;&lt;br&gt;<br />&lt;input type=submit runat=server id=cmdSubmit value=Submit onserverclick=OnSubmit&gt;<br />&lt;/form&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;</pre>
  <p>The ASP.NET Validator control provides client-side validation to reduce roundtrips to the server and improve user experience, but also provides server-side validation to&amp;nbsp;&amp;nbsp;ensure that the widget quantity field is&amp;nbsp;a positive integer. It is also validated as a required field that must be provided before submitting the order.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>
      <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnaspp/html/pdc_userinput.asp">User Input Validation in ASP.NET&amp;nbsp;</a>
    </li>
    <li>
      <a href="http://msdn2.microsoft.com/en-us/library/e5a8xz39.aspx">Validation Server Control Syntax </a>
    </li>
    <li>
      <a href="http://en.wikipedia.org/wiki/Code_injection">General Purpose Code Injection article</a>
    </li>
  </ul>
  <ul>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1924235309" Content_Hash="1149515648">
    <Metadata>
      <Id>2c70968c-33b3-46a2-a157-c3022f3d7bd8</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Avoid Dynamic Queries That Accept User Input</Title>
      <Category>Data Access</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Avoid Dynamic Queries That Accept User Input</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Avoid constructing SQL queries in code that include user input; instead, prefer parameterized stored procedures that use type safe SQL parameters.&amp;nbsp;If stored procedures&amp;nbsp;cannot be used, use parameterized dynamic SQL statements.</p>
  <h1>Why</h1>
  <p>Database queries constructed dynamically&amp;nbsp;from user input&amp;nbsp;are susceptible to SQL injection. A successful SQL injection attack enables a malicious user to execute commands&amp;nbsp;on the&amp;nbsp;application's database instance by using the privileges granted to&amp;nbsp;the application's login. Using stored procedures with parameterized SQL is recommended because SQL parameters are type safe&amp;nbsp;and treated as&amp;nbsp;literal values by the database,&amp;nbsp;not as executable code. Parameters are also checked for type and length. </p>
  <h1>When</h1>
  <p>Always use parameterized SQL queries. Avoid constructing SQL queries directly from&amp;nbsp;any input, including form fields, query string parameters, and cookies.&amp;nbsp;&amp;nbsp;</p>
  <h1>How</h1>
  <p>To protect&amp;nbsp;an application from SQL injection, perform the following steps:</p>
  <ol>
    <li>
      <p>
        <strong>Use parameters with stored procedures.</strong> Stored procedures alone&amp;nbsp;will not prevent SQL injection.&amp;nbsp;Lack&amp;nbsp;of&amp;nbsp;parameter usage means that&amp;nbsp;stored procedures will be susceptible to SQL injection, especially if they use unfiltered input. The following code shows how to use SqlParameterCollection when calling a stored procedure:</p>
      <pre>using System.Data;<br />using System.Data.SqlClient;</pre>
      <pre>using (SqlConnection connection = new SqlConnection(connectionString))<br />{<br />&amp;nbsp; DataSet userDataset = new DataSet();<br />&amp;nbsp; SqlDataAdapter myCommand = new SqlDataAdapter( <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "LoginStoredProcedure", connection);<br />&amp;nbsp; myCommand.SelectCommand.CommandType = CommandType.StoredProcedure;<br />&amp;nbsp; myCommand.SelectCommand.Parameters.Add("@au_id", SqlDbType.VarChar, 11);<br />&amp;nbsp; myCommand.SelectCommand.Parameters["@au_id"].Value = AuthId.Text;</pre>
      <pre>&amp;nbsp; myCommand.Fill(userDataset);<br />}</pre>
      <p>In this case, the @au_id parameter is treated as a literal value and not as executable code. Also, the parameter is checked for type and length. In the preceding code example, the input value cannot be longer than 11 characters. If the data does not conform to the type or length defined by the parameter, the SqlParameter class throws an exception.</p>
    </li>
    <li>
      <p>
        <strong>Use parameters with dynamic SQL.</strong> If stored procedures are unavailable, use parameters when constructing dynamic SQL statements. The following code shows how to use SqlParametersCollection with dynamic SQL:</p>
      <pre>using System.Data;<br />using System.Data.SqlClient;</pre>
      <pre>using (SqlConnection connection = new SqlConnection(connectionString))<br />{<br />&amp;nbsp; DataSet userDataset = new DataSet();<br />&amp;nbsp; SqlDataAdapter myDataAdapter = new SqlDataAdapter(<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "SELECT au_lname, au_fname FROM Authors WHERE au_id = @au_id", <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connection);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp; myCommand.SelectCommand.Parameters.Add("@au_id", SqlDbType.VarChar, 11);<br />&amp;nbsp; myCommand.SelectCommand.Parameters["@au_id"].Value = AuthId.Text;<br />&amp;nbsp; myDataAdapter.Fill(userDataset);<br />}</pre>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>An ASP.NET book purchasing application has a query interface that allows book titles and authors to be de retrieved by submitting an ISBN. The appllication developer's writes a SQL query&amp;nbsp;to accomplish this task:</p>
  <pre>string SQLstr = "SELECT book_name, author_name FROM book WHERE book_ISBN = '" + ISBN.Text + "'";</pre>
  <p>The&amp;nbsp;ISBN input is from a textfield in the&amp;nbsp;web&amp;nbsp;form which is used to directly generate&amp;nbsp;the SQL statement. For example:</p>
  <pre>SELECT book_name, author_name FROM book WHERE book_ISBN = '0321194330'</pre>
  <p>Consider what happens when a user types the following string in the&amp;nbsp;ISBN text box, which is expecting an ISBN in the form nnnnnnnnnn:</p>
  <pre>' ; DROP DATABASE pubs&amp;nbsp; --<br />&amp;nbsp; </pre>
  <p>The code inserts the user's malicious input and generates the following query.</p>
  <pre>SELECT book_name, author_name FROM book WHERE book_ISBN = ''; DROP DATABASE pubs --'&amp;nbsp; </pre>
  <p>In this case, the ' (single quotation mark) character that starts the rogue input terminates the current string literal in the SQL statement. The ; (semicolon) character tells SQL that this is the end of the current statement, which is then followed by the following malicious SQL code. Finally, the -- (double dash) sequence of characters is a SQL comment that tells SQL to ignore the rest of the text. In this case, SQL ignores the closing ' (single quotation mark) character, which would otherwise cause a SQL parser error.</p>
  <h1>Solution Example</h1>
  <p>An ASP.NET book purchasing application has a query interface that allows book titles and authors to be de retrieved by submitting an ISBN. The appllication developer's writes a SQL query&amp;nbsp;to accomplish this task:</p>
  <pre>string SQLstr = "book_name, author_name FROM book WHERE book_ISBN = '" + ISBN.Text + "'";</pre>
  <p>The ISBN input is from a textfield in the&amp;nbsp;web&amp;nbsp;form which is used to directly generate&amp;nbsp;the SQL statement. For example:</p>
  <pre>SELECT book_name, author_name FROM book WHERE book_ISBN = '0321194330'</pre>
  <p>The&amp;nbsp;SQL&amp;nbsp;statement can be made safer by re-writing it as a parameterized, stored procedure:</p>
  <pre>using System.Data;<br />using System.Data.SqlClient;</pre>
  <pre>using (SqlConnection connection = new SqlConnection(connectionString))<br />{<br />&amp;nbsp; DataSet userDataset = new DataSet();<br />&amp;nbsp; SqlDataAdapter myDataAdapter = new SqlDataAdapter(<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "'0321194330'= @isbn",&amp;nbsp;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connection);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp; myCommand.SelectCommand.Parameters.Add("@isbn", SqlDbType.VarChar, 11);<br />&amp;nbsp; myCommand.SelectCommand.Parameters["@isbn"].Value = ISBN.Text;<br />&amp;nbsp; myDataAdapter.Fill(userDataset);<br />}</pre>
  <p>The SQL query statement&amp;nbsp;is constructed similarly to&amp;nbsp;the&amp;nbsp;first SQL statement, except that the&amp;nbsp;ISBN column selection criteria is represented as a placeholder rather than directly concatenated into the SQL query. The next two lines specify the variable type, the expected length, and the&amp;nbsp;value of the&amp;nbsp;ISBN field used in this particular query.&amp;nbsp; This protects against SQL injection attacks because @isbn is specified as a VarChar, which means it can't possibly be an executable SQL statement.&amp;nbsp;Consequently, it will&amp;nbsp;be interpreted by the database driver as a&amp;nbsp;String literal.&amp;nbsp;&amp;nbsp;</p>
  <p>It is important to note that while parameterized, stored procedures will help reduce the risk of SQL injection, there are other script injection vulnerabilities that will be possible. For more information see&amp;nbsp;the related guideline, "Validate Untrusted Input Passed to Data Access Methods".</p>
  <ul>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1665382395" Content_Hash="-1083124832">
    <Metadata>
      <Id>30a0fcea-6b9a-4f9b-b377-ef89fb6ec927</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Use SSL to Protect Session Cookies on Authenticated Pages</Title>
      <Category>Session Management</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Use SSL to Protect Session Cookies on Authenticated Pages</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Use SSL to protect session cookies on authenticated pages. </p>
  <h1>Why</h1>
  <p>Failing to protect authentication tickets is a common vulnerability that can lead to unauthorized spoofing and impersonation, session hijacking, and elevation of privilege.</p>
  <h1>When</h1>
  <p>All systems which use cookies for authentication should protect those cookies via SSL on all pages which require authentication, and ensure that the cookies are not used/sent for pages which do not require authentication and do not use SSL. </p>
  <h1>How</h1>
  <p>Set <strong>requireSSL="true"</strong> on the &lt;<strong>forms</strong>&gt; element, as shown in the following code.</p>
  <pre>&lt;forms loginUrl="Secure\Login.aspx"<br />       requireSSL="true" ... /&gt;  </pre>
  <br />
  <p>By setting <strong>requireSSL="true"</strong>, you set the <strong>secure</strong> cookie property that determines whether browsers should send the cookie back to the server. With the <strong>secure</strong> property set, the cookie is sent by the browser only to a secure page that is requested using an HTTPS URL.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1663006208" Content_Hash="1772302196">
    <Metadata>
      <Id>320f3578-7231-41d3-be4b-db79957bd496</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Do Not Rely on Request Validation</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Design</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Do Not Rely on Request Validation</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>1</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Do not rely on the ASP.NET request validation feature to detect all bad input. Use it only as an extra precautionary measure in addition to your own input validation.</p>
  <h1>Why</h1>
  <p>The ASP.NET request validation feature only performs basic input validation and should not be relied upon to detect all types of malicious data. It is not sufficient even for preventing attacks like cross site scripting and SQL injection, and each application has specific validation needs—what is good input to one application may be bad input for another.</p>
  <h1>When</h1>
  <p>When user input is submitted from a webpage back to the server.</p>
  <h1>How</h1>
  <p>Request validation is enabled by default. You can see this by examining the <strong>validateRequest</strong> attribute, which is set to true on the <strong>&lt;pages&gt;</strong> element in the <strong>Machine.config.comments </strong>file. This will automatically try to validate all input submitted to the web application. Ensure that it is enabled for all pages except those that need to accept a range of HTML elements. If you need to disable it for a page, set the <strong>ValidateRequest</strong> attribute to <strong>false</strong> by using the <strong>@Page</strong> directive as follows:</p>
  <pre>&lt;%@ Page Language="C#" ValidateRequest = "false" %&gt;</pre>
  <p>This feature can also be called explicitly by the server by using the <strong>Request.ValidateInput()</strong> call.</p>
  <p>Remember, whether using the page directive to automatically validate or calling <strong>Request.ValidateInput() </strong>explicitly, our aim is to only use this feature as an added precaution. In order to ensure that you are handling user data correctly, ensure that you are following all of these steps: </p>
  <ol>
    <li>Always validate input as strictly as possible against the expected input format via regular expressions.</li>
    <li>Ensure that all queries are fully parameterized, especially if they use user input.</li>
    <li>Do not make any security decisions based on user input.</li>
    <li>Do not allow users to input filenames or paths.</li>
  </ol>
  <h1>Problem Example</h1>
  <p>In this example which uses an online shopping cart. The cart component consists of two components:</p>
  <ol>
    <li>
      <p>An HTML form that contains all of the fields that make up the order to be submitted for processing:</p>
      <pre>&lt;html&gt;<br />  &lt;head&gt;<br />    &lt;title&gt;Widget shopping cart&lt;/title&gt;<br />  &lt;/head&gt;<br />  &lt;body&gt;<br />    &lt;H1&gt;welcome to the most boring shopping cart on the web!&lt;/H1&gt;<br />     A widget's current price is $19.95 USD. Please use the following form to submit an order.<br />    &lt;form action="process_order.aspx" method="POST"&gt;<br />       &lt;p&gt;Please enter the number of widgets you would like to purchase:&lt;/p&gt;<br />       quantity:&lt;br/&gt;<br />       &lt;select name="WidgetQuantity"&gt;<br />        &lt;option value="1"&gt;1&lt;/option&gt;<br />        &lt;option value="2"&gt;2&lt;/option&gt;<br />        &lt;option value="3"&gt;3&lt;/option&gt;<br />        &lt;option value="4"&gt;4&lt;/option&gt;<br />      &lt;/select&gt;<br />      ...<br />      &lt;input type="submit" value="order"/&gt;<br />    &lt;/form&gt;<br />  &lt;/body&gt;<br />&lt;/html&gt;</pre>
    </li>
    <li>
      <p>An ASP.NET page that relies on the request validation feature and processes the form submissions and performs the necessary steps to create the order.</p>
      <pre>......<br />try<br />{<br />   Request.ValidateInput();<br />}<br />catch(HttpRequestValidationException e)<br />{<br />   //error out<br />}<br />int dQuantity = Request("WidgetQuantity");<br />double dPrice = 19.95;<br />double dCost = dQuantity * dPrice;<br />......</pre>
    </li>
  </ol>
  <p>This server side page is problematic because it solely relies on the ASP.NET request validation feature. The application works fine in the case where a user plays by the rules and submits the form as it is shown, because the quantity field ensures that the range constraints for the order quantity are always valid. However, if a clever user decides to construct their own form and submits a negative WidgetQuantity field, it causes a negative balance. Depending on what e-commerce system is used, this could result in a credit to the user's account. It also might subtract the negative balance from the company's inventory, which would carry significant ramifications and costs later on.</p>
  <h1>Solution Example</h1>
  <p>Consider the following ASP.NET page that processes the form submissions and performs the necessary steps to create an order:</p>
  <pre>&lt;%@ Page Language="vb" %&gt;<br />&lt;script runat=server&gt;public sub OnSubmit(source as Object, e as EventArgs)<br />    if Page.IsValid then<br />        ' Now we can perform our transaction.<br />        int dQuantity = Request("WidgetQuantity");<br />        double dPrice = 19.95;<br />        double dCost = dQuantity * dPrice;<br />    end if<br />end sub<br />&lt;/script&gt;<br />&lt;html&gt;<br />&lt;head&gt;<br />&lt;title&gt;Validation Sample&lt;/title&gt;<br />&lt;/head&gt;<br />&lt;body&gt;<br />&lt;form runat=server&gt;<br />&lt;asp:ValidationSummary runat=server headertext="There were errors on the page:" /&gt;<br />&lt;table&gt;<br />  &lt;tr&gt;<br />    &lt;td&gt;<br />        &lt;asp:RequiredFieldValidator runat=server<br />             controltovalidate="WidgetQuantity"<br />             errormessage="WidgetQuantity is required."&gt;<br />        &lt;/asp:RequiredFieldValidator&gt;<br />    &lt;/td&gt;<br />    &lt;td&gt;A widget's current price is $19.95 USD. Please use the following form to submit an order.&lt;/td&gt;<br />    &lt;td&gt;<br />      &lt;select name="WidgetQuantity"&gt;<br />        &lt;option value="1"&gt;1&lt;/option&gt;<br />        &lt;option value="2"&gt;2&lt;/option&gt;<br />        &lt;option value="3"&gt;3&lt;/option&gt;<br />        &lt;option value="4"&gt;4&lt;/option&gt;<br />      &lt;/select&gt;<br />     &lt;asp:RegularExpressionValidator runat=server display=dynamic<br />            controltovalidate="WidgetQuantity"<br />            errormessage="WidgetQuantity must be a non-zero, positive integer." <br />            validationexpression="[1-9]{1}[0-9]{0,7}" /&gt;<br />    &lt;/td&gt;<br />  &lt;/tr&gt;<br />...<br />&lt;/table&gt;<br />&lt;br&gt;<br />&lt;input type=submit runat=server id=cmdSubmit value=Submit onserverclick=OnSubmit&gt;<br />&lt;/form&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;</pre>
  <p>The ASP.NET Validator control provides client-side validation to reduce roundtrips to the server and improve user experience, but also provides server-side validation to ensure that the widget quantity field is a positive integer. It is also validated as a required field that must be provided before submitting the order.</p>
  <ul>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="858304197" Content_Hash="-1400433876">
    <Metadata>
      <Id>3651c42d-4155-44b5-8645-629d9cacba07</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Use URL Authorization for Page And Directory Access Control</Title>
      <Category>Authorization</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Use URL Authorization for Page And Directory Access Control</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Use URL authorization to control which users and groups of users have access to the application or to parts of the application. </p>
  <h1>Why</h1>
  <p>Rather than having to password protect pages, URL Authorization allows you to tie page access to user accounts or roles.&amp;nbsp;&amp;nbsp;</p>
  <h1>When</h1>
  <p>If your application restricts access to some pages use URL Authorization to enforce these restrictions.</p>
  <h1>How</h1>
  <p>To configure URL authorization, use an &lt;<strong>authorization</strong>&gt; element in Web.config and specify which user and/or role names are allowed access to the current directory or the nominated directory or file. ASP.NET on Windows Server 2003 or later protects all files in a given directory, even those not mapped to ASP.NET, such as .html, .gif, and .jpg files. </p>
  <p>Authorization settings in Web.config refer to all of the files in the current directory and all subdirectories unless a subdirectory contains its own Web.config with an &lt;<strong>authorization</strong>&gt; element. In this case, the settings in the subdirectory override the parent directory settings. </p>
  <p>URL authorization can be used for both forms authentication and Windows authentication. In the case of Windows authentication, user names take the form "DomainName\WindowsUserName" and role names take the form "DomainName\WindowsGroupName". The local administrators group is referred to as "BUILTIN\Administrators". The local users group is referred to as "BUILTIN\Users". The following example shows Windows users and Windows roles. </p>
  <pre>&lt;authorization&gt;  <br />&lt;allow users="DomainName\Bob, DomainName\Mary" /&gt;  <br />&lt;allow roles="BUILTIN\Administrators, DomainName\Manager" /&gt;  <br />&lt;deny users="*" /&gt;<br />&lt;/authorization&gt;  </pre>
  <p>The following example uses a custom role. </p>
  <pre>&lt;authorization&gt;  <br />&lt;allow roles="Manager"/&gt;  <br />&lt;deny users="*"/&gt;<br />&lt;/authorization&gt;  </pre>
  <p>To apply authorization rules to a specific file or folder, enclose the &lt;<strong>authorization</strong>&gt; element inside a &lt;<strong>location</strong>&gt; element as shown here. </p>
  <pre>&lt;location path="Secure" &gt;  <br />&lt;system.web&gt;    <br />&lt;authorization&gt;      <br />&lt;deny users="?" /&gt;    <br />&lt;/authorization&gt;  <br />&lt;/system.web&gt;<br />&lt;/location&gt;  </pre>
  <p>This example denies access to unauthenticated users and forces a redirect to the login page that is specified on the &lt;<strong>forms</strong>&gt; element. </p>
  <p>The following example shows how you can apply authorization to a specific file (Page.aspx). </p>
  <pre>&lt;location path="page.aspx"&gt;    <br />&lt;authorization&gt;        <br />...    <br />&lt;/authorization&gt;<br />&lt;/location&gt;  </pre>
  <p>If necessary, you can apply different authorization rules for separate pages based on the identity, or more commonly, the role membership of the caller, by using multiple &lt;<strong>authorization</strong>&gt; elements within separate &lt;<strong>location</strong>&gt; elements. </p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="394746691" Content_Hash="1233623451">
    <Metadata>
      <Id>387ba9ba-9ea5-4ab2-8c00-cfb169557daa</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Use Type Safe SQL Parameters When Constructing SQL Queries</Title>
      <Category>Data Access</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Use Type Safe SQL Parameters When Constructing SQL Queries</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>1</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Use type-safe parameters when constructing dynamic SQL queries or when passing parameters to stored procedures. </p>
  <h1>Why</h1>
  <p>If you use the Parameters collection, SQL treats the input is as a literal value rather then as executable code. The Parameters collection can be used to enforce type and length constraints on input data. Values outside of the range trigger an exception. If type safe SQL parameters are not used, attackers might be able to execute injection attacks that are embedded in the unfiltered input.</p>
  <h1>When</h1>
  <p>This guideline is applicable whenever there is an SQL statement that is built dynamically. It is also appropriate whenever stored procedures are utilized.</p>
  <h1>How</h1>
  <p>One way of making the application less susceptible to SQL injection attacks is by using stored procedures. Stored procedures are subroutines stored in the database that are available to applications for accessing the data. </p>
  <p>Just using stored procedures isn't a complete remedy for SQL injection. The important thing to do is use parameters with stored procedures, else, your stored procedures can be susceptible to SQL injection if they use unfiltered input. Stored procedures provide several security advantages:</p>
  <ul>
    <li>By parameterizing input parameters and type enforcing them, user input is effectively filtered </li>
    <li>Stored procedures are allowed to execute under different security privileges from the database user by most databases, thereby restricting the ability of the application to do anything beyond the actions specified in the stored procedures. For instance, an application would have execute access to a stored procedure, but no access to the base tables.</li>
  </ul>
  <p>To use type safe SQL parameters, follow these steps:</p>
  <ol>
    <li>
      <p>
        <strong>If possible, use stored procedures.</strong> Stored procedures are pre-compiled statements that are stored on the database server. Using stored procedures improves your application's performance and security.</p>
    </li>
    <li>
      <p>
        <strong>Determine the parameters in the SQL query or stored procedure being constructed.</strong> All parameters that result from user input or another untrusted source should be escaped, by specifying variable names in the query:</p>
      <pre>SELECT * from books WHERE ISBN = '@isbn'</pre>
    </li>
    <li>
      <p>
        <strong>Declare the explicit data types for each parameter in the SQL statement.</strong> When executing the SQL statement, specify the data type and length for each parameter in the query:</p>
      <pre>myCommand.SelectCommand.Parameters.Add("@isbn", SqlDbType.VarChar, 10);</pre>
    </li>
    <li>
      <p>
        <strong>Specify the value for each parameter.</strong> The untrusted input is then specified, so that it can be properly handled when the SQL statement executes:</p>
      <pre>myCommand.SelectCommand.Parameters["@isbn"].Value = '0494483923';</pre>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>Consider an ASP.NET application that handles employee payroll functionality for a small company. One of the pages requires retrieving an employee record from a table based on a username and password supplied via a login dialog. The developer of the application created an SQL SELECT query to accomplish said task:</p>
  <pre>using (SqlConnection myConnection = new SqlConnection(connectionString))<br /><pre>SqlConnection myConnection = new SqlConnection("Data Source=localhost\\sqlexpress;<br />            Initial Catalog=EmployeePayroll;<br />            Integrated Security=True");<br />string SQLstr = "SELECT * from users WHERE username = '" + un.Text + <br />              "' AND password = '" + <br />              pass.Text + "'";</pre><pre>SqlCommand myCommand = new SqlCommand(SQLstr, myConnection);</pre><pre>SqlDataAdapter myDataAdapter = new SqlDataAdapter(myCommand);</pre><pre>myCommand.Connection.Open();</pre><pre>SqlDataReader myReader = myCommand.ExecuteReader();<br /></pre></pre>
  <p>In the preceding example, the SELECT statement will work as expected, assuming that the input is perfectly constrained. However, what happens if a user enters unexpected input such as '1234' for a password, and this for a username:</p>
  <pre>mjones' AND 1=1; -- </pre>
  <p>This will result in the SQL statement being executed at the database level:</p>
  <pre>SELECT * from users WHERE username = 'mjones' AND 1=1; --'  AND password = '1234';</pre>
  <p>This will allow the person entering data into the dialog box to select the account details of mjones without the correct password.</p>
  <h1>Solution Example</h1>
  <p>Consider an ASP.NET application that handles employee payroll functionality for a small company. One of the pages requires retrieving an employee record from a table based on a username and password supplied via a login dialog. The developer of the application uses the following SQL query to take advantage of type safe parameters with the SqlParameterCollection when constructing the query dynamically:</p>
  <pre>
    <pre>using System.Data;<br />using System.Data.SqlClient;    </pre>
    <pre>using (SqlConnection connection = new SqlConnection(connectionString))<br />{<br />&amp;nbsp; DataSet userDataset = new DataSet();<br />&amp;nbsp; SqlDataAdapter myDataAdapter = new SqlDataAdapter(<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "SELECT * from users WHERE username = '@uname' AND password = '@pwd'", connection);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp; myCommand.SelectCommand.Parameters.Add("@uname", SqlDbType.VarChar, 24);<br />&amp;nbsp; myCommand.SelectCommand.Parameters.Add("@pwd", SqlDbType.VarChar, 16);  
  myCommand.SelectCommand.Parameters["@uname"].Value = un.Text;  
  myCommand.SelectCommand.Parameters["@pwd"].Value = pass.Text;
&amp;nbsp; myDataAdapter.Fill(userDataset);
}  </pre>
  </pre>
  <p>In the preceding code example, the input values are constrained for length and escaped. If the data does not conform to the type or length defined by the parameter, the SqlParameter class throws an exception.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>To learn more about SQL injection, see: <a href="http://en.wikipedia.org/wiki/SQL_injection">SQL Injection</a> in Wikipedia. </li>
    <li>To learn more about countering SQL injection in ASP.NET, visit: <a href="http://msdn2.microsoft.com/en-us/library/ms998271.aspx">How To: Protect From SQL Injection in ASP.NET</a>. </li>
    <li>To learn more about countering injection-based attacks in ASP.NET, see: <a href="http://msdn2.microsoft.com/en-us/library/bb355989.aspx">How To: Protect From Injection Attacks in ASP.NET</a>.</li>
  </ul>
  <ul>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="425409876" Content_Hash="1701196091">
    <Metadata>
      <Id>3ace3004-81fc-4876-b9c6-effd6f351112</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Use SSL to Protect User Credentials And Authentication Cookies</Title>
      <Category>Authentication</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Use SSL to Protect User Credentials And Authentication Cookies</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Use Secure Sockets Layer (SSL) to protect the authentication credentials and authentication cookies passed between browser and server. </p>
  <h1>Why</h1>
  <p>By using SSL, you make it much more difficult for an attacker to monitor the network connection and obtain authentication credentials and capture authentication cookies to gain spoofed access to your application. </p>
  <p>SSL also can improve user trust in your application as it authenticates the server to the client, thus proving the end point for communications.</p>
  <h1>When</h1>
  <p>SSL should be used for forms based authentication. </p>
  <p>If you cannot use SSL, reduce the session lifetime with the timeout attribute on the forms element.</p>
  <h1>How</h1>
  <ol>
    <li>
      <p>
        <strong>Restrict the authentication cookie to HTTPS connections. </strong>Cookies support a "secure" property that determines whether or not browsers should send the cookie back to the server. With the secure property set, the cookie is sent by the browser only to a secure page that is requested using an HTTPS URL.</p>
      <p>Set the secure property by using <strong>requireSSL="true"</strong> on the <strong>&lt;forms&gt;</strong> element as follows:</p>
      <pre>&lt;forms loginUrl="Secure\Login.aspx"<br />       requireSSL="true" . . . /&gt;&amp;nbsp;</pre>
    </li>
    <li>
      <p>
        <strong>Encrypt the cookie and check its integrity. </strong>Encrypt the cookie and check its integrity, even if you are using SSL. This prevents an attacker from viewing or modifying the cookie if he or she manages to steal it through a XSS exploit. In this event, the attacker can still use the cookie to gain access to your application. The best way to mitigate this risk is to implement the appropriate countermeasures to prevent XSS attacks (described under "Cross-Site Scripting" earlier in this chapter), and limit the cookie lifetime as described in the next recommendation.</p>
      <p>To provide privacy and integrity for the cookie, set the <strong>protection</strong> attribute on the <strong>&lt;forms&gt;</strong> element as follows:</p>
      <blockquote>
        <pre>&lt;forms protection="All"    Privacy and integrity&amp;nbsp;</pre>
      </blockquote>
      <p>A secure &lt;<strong>forms</strong>&gt; element configuration is shown here:</p>
      <pre>&lt;forms loginUrl="Secure\Login.aspx"<br />       protection="All"<br />       requireSSL="true"<br />       timeout="00:30:00" <br />       slidingExpiration="true"<br />       name="YourAppName"<br />       path="/Secure" /&gt;</pre>
    </li>
  </ol>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1079776515" Content_Hash="1992471098">
    <Metadata>
      <Id>4471ff4d-d052-4fe2-afd9-1c57a4bc0273</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Use Stored Procedures</Title>
      <Category>Data Access</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Use Stored Procedures</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>1</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Always use stored procedures when interacting with a database. This increases performance and reduces the risk of a successful SQL injection attack.</p>
  <h1>Why</h1>
  <p>Attackers can use a SQL Injection Attack to manipulate the database in unforeseen ways. SQL injection allows an attacker to assume the credentials of the SQL account used to connect to the database, which may lead to arbitrary reading, writing, updating, or deleting of data. In an improperly secured database this can also lead to remote code execution through the use of certain stored procedures that allow for direct Operating System command injection.</p>
  <h1>When</h1>
  <p>Whenever interaction with a database is required</p>
  <h1>How</h1>
  <p>First the stored procedure will have to be created on the database, this can be done using the following SQL syntax:</p>
  <pre>CREATE PROCEDURE <br />sp_AddNewUser( @UserName nvarchar(255), @Email  nvarchar(255), <br />@FirstName nvarchar(255), @LastName nvarchar(255)) AS</pre>
  <pre>-- INSERT the new user<br />INSERT INTO Users_Table(UserName, Email, FirstName, LastName)<br />VALUES(@UserName, @Email, @FirstName, @LastName)<br />--This will return the new user’s IDSELECT SCOPE_IDENTITY()</pre>
  <p>Now to call the stored procedure we can use the following .NET code:</p>
  <pre>//create a new connection using our connection string<br />SqlConnection myConnection = new SqlConnection(connection string)<br />;myConnection.Open();<br />//create a new command that specifies our store procedure<br />SqlCommand myCommand = new SqlCommand("sp_AddNewUser", myConnection);<br />//Specify our command is a stored proceduremy<br />Command.CommandType = Command<br />Type.StoredProcedure;<br />//Create a new parameter to carry the username<br />SqlParameter UserParameter = new SqlParameter("@UserName", SqlDbType.VarChar);<br />UserParameter.Direction = ParameterDirection.Input;<br />UserParameter.Value = "TestUser";<br />//Add the parameter to the command<br />myCommand.Parameters.Add(UserParameter);<br />//Repeat this code to add commands for each parameter in the SPROC<br />//Execute the command on the Database<br />myCommand.ExecuteNonQuery();</pre>
  <h1>Problem Example</h1>
  <p>There are many ways to create a SQL injection vulnerability, and it’s even possible to do using stored procedures. The vulnerability lies in dynamically creating a SQL statement without bound parameters. In the following example the developer has built the SELECT statement by appending the components of the statements together with user provided input.</p>
  <p>The developer wants to execute the following command where [username] is the username of the user whose e-mail we would like to return</p>
  <pre>SELECT Email from Users_Table where <br />UserName = [username];<br /></pre>
  <pre>The following code will create that statement an execute it on the database:<br />//create a new connection using our connection string<br />SqlConnection myConnection = new SqlConnection(connection string);<br />myConnection.Open();<br />//create a new command that specifies our store procedure<br />string selectCommand = "SELECT Email from Users_Table WHERE UserName = "<br />         + userNameBox.Text;<br />SqlCommand myCommand = new SqlCommand(selectCommand);<br />//Execute the command on the Database<br />SqlDataReader myReader = myCommand.ExecuteReader();</pre>
  <h1>Solution Example</h1>
  <p>First a stored procedure needs to be created on the database, the following SQL syntax can be used to create the same select statement as above:</p>
  <pre>CREATE PROCEDURE sp_ReturnEmail( @UserName nvarchar(255)) <br />ASSELECT Email FROM Users_Table where UserName = @UserName;</pre>
  <p>Now the following code can be used to query the database using the stored procedure:</p>
  <pre>//create a new connection using our connection string<br />SqlConnection myConnection = new SqlConnection(connection string);<br />myConnection.Open();<br />//create a new command that specifies our store procedure<br />SqlCommand myCommand = new SqlCommand("sp_ReturnEmail", myConnection);<br />//Specify our command is a stored procedure<br />myCommand.CommandType = CommandType.StoredProcedure;<br />//Create a new parameter to carry the username<br />SqlParameter UserParameter = new SqlParameter("@UserName", SqlDbType.VarChar);U<br />serParameter.Direction = ParameterDirection.Input;UserParameter.Value = [username];<br />//Add the parameter to the command<br />myCommand.Parameters.Add(UserParameter);<br />//Execute the command on the Database<br />SqlDataReader myReader = myCommand.ExecuteReader();</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>To learn more about stored procedures, visit: <a href="http://en.wikipedia.org/wiki/Stored_procedure">Stored procedure</a>. </li>
    <li>For more information on using stored procedures, visit: <a href="http://aspnet.4guysfromrolla.com/articles/062905-1.aspx">Returning a Scalar value from a Stored Procedure</a>.</li>
  </ul>
  <ul>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1921146325" Content_Hash="484327814">
    <Metadata>
      <Id>47e03443-3e6b-4187-ad9a-843ad1ecdf5d</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Use SSL Between Untrusted Server Applications</Title>
      <Category>Communication Security</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Use SSL Between Untrusted Server Applications</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Use an encrypted communication channel to protect data sent between servers.&amp;nbsp;The Secure Sockets Layer (SSL) protocol can be used to secure the communication link between&amp;nbsp;servers.&amp;nbsp;&amp;nbsp; </p>
  <h1>Why</h1>
  <p>Servers rarely co-exist in a secure environment.&amp;nbsp;Eavesdropping and spoofing are threats when two or more entities must communicate over an untrusted medium such as the public internet, or even&amp;nbsp;a LAN. Using SSL&amp;nbsp;prevents&amp;nbsp;attackers from&amp;nbsp;monitoring the network connection to obtain authentication credentials in plain text. Not using SSL could allow an attacker&amp;nbsp;to capture the authentication cookies&amp;nbsp;and gain spoofed access to&amp;nbsp;any applications that transmit data over the network.</p>
  <h1>When</h1>
  <p>If&amp;nbsp;communicating&amp;nbsp;servers are not inside a physically secure data center where the network eavesdropping threat is negligible,&amp;nbsp;it&amp;nbsp;is important to use an encrypted communication channel to protect data sent between servers. SSL is used when an application does not trust other applications on a server. Use SSL when granular channel protection for a particular application running on a server is needed&amp;nbsp;rather than&amp;nbsp;for all applications and services. It is also an appropriate choice when fixed ip addresses are not available. SSL only works with TCP/IP communication&amp;nbsp;protocol as well as named pipes.</p>
  <p>Use IPSec to help protect the communication channel between two servers and to restrict which computers can communicate with one another. For example, you can help protect a database server by establishing a policy that permits requests only from a trusted client computer such as an application or Web server. You can also restrict communication to specific IP protocols and TCP/UDP ports.</p>
  <h1>How</h1>
  <p>Here is how to use SSL&amp;nbsp;to&amp;nbsp;protect communication between servers:</p>
  <ol>
    <li>
      <p>Install a Server Authentication Certificate on the server. </p>
    </li>
    <li>
      <p>Install the Issuing CA's certificate&amp;nbsp;so the&amp;nbsp;two communicating applications may negotiate an SSL connection.&amp;nbsp;</p>
    </li>
    <li>
      <p>Use the "https://" connection protocol in the code to ensure traffic between the 2 server applications are encrypted.</p>
    </li>
    <li>
      <p>Verify that Communication Is Encrypted. Use Network Monitor to verify that data sent between the application server and database server is encrypted. Start by sending data in clear text form and then enable encryption first by configuring the server and then by configuring the client.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>An e-commerce application written in ASP.NET enables customers to pay their bills online through a unified broker. The application's web component&amp;nbsp;relies on an independant&amp;nbsp;account management system that resides on another server. The web&amp;nbsp;component communicates with the account management system using a SQL&amp;nbsp;socket connection.&amp;nbsp; The two servers&amp;nbsp;are located in a competitively priced data center that houses a number of other customers, all of which are able&amp;nbsp;to access the building&amp;nbsp;at all times. A malicious user&amp;nbsp;purchases hosting services at the same company, and&amp;nbsp;after exploring the hosting environment, learns that the hosted accounts are networked using a shared&amp;nbsp;bus topology&amp;nbsp;that allows for network snooping. The attacker is able to setup a sniffer, and captures all of the communication between the account management component and the web component, since SQL connections are not encrypted by default. The attacker can now log in as a legitimate user&amp;nbsp;on the account management server and make changes at will.&amp;nbsp;&amp;nbsp;</p>
  <h1>Solution Example</h1>
  <p>An e-commerce application written in ASP.NET enables customers to pay their bills online through a unified broker. The application's web component&amp;nbsp;relies on an independant&amp;nbsp;account management system that resides on another server. The web&amp;nbsp;component communicates with the account management system using a SQL&amp;nbsp;socket connection. The two servers&amp;nbsp;are located in a competitively priced data center that houses a number of other customers, all of which are able&amp;nbsp;to access the building&amp;nbsp;at all times. The Developer of the application setup encrypted SSL traffic by installing a Server Authenticaion Certificate on the machine hosting the account management component, and installed the issuing CA's certificate on the&amp;nbsp;server hosting the web component. &amp;nbsp;The components use OLE-DB to communicate, so the developer inserted the following configuration directives in the web.config file:</p>
  <pre>"Provider=SQLOLEDB.1;Integrated Security=SSPI;Persist Security <br />&amp;nbsp; Info=False;Initial Catalog=Northwind;Data Source=sql01;Use <br />&amp;nbsp; Encryption for Data=True"</pre>
  <p>The developer then uses the following call to connect to the database using the SSL tunnel for data encryption:</p>
  <pre>// Replace the server name in the following connection string with the name of your database <br />serverSqlConnection conn = new SqlConnection("server='sql01';<br />  database=NorthWind;IntegratedSecurity='SSPI'");</pre>
  <p>Because&amp;nbsp;traffic between the two components is encrypted, the transmission medium&amp;nbsp;is&amp;nbsp;less&amp;nbsp;likely to affect the ability of the two components to communicate securely.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>Using Secure Sockets Layer <a href="http://msdn2.microsoft.com/en-us/library/ds8bxk2a.aspx">http://msdn2.microsoft.com/en-us/library/ds8bxk2a.aspx</a></li>
    <li>Internet Protocol Version 6 <a href="http://msdn2.microsoft.com/en-us/library/3x7ak53z(VS.80).aspx">http://msdn2.microsoft.com/en-us/library/3x7ak53z(VS.80).aspx</a>&amp;nbsp; </li>
    <li>Wikipedia SSL encyclopedia entry <a href="http://en.wikipedia.org/wiki/Secure_Sockets_Layer">http://en.wikipedia.org/wiki/Secure_Sockets_Layer</a></li>
  </ul>
  <ul>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1556968893" Content_Hash="934498104">
    <Metadata>
      <Id>4880b800-8273-4ef5-b094-efa3d09e6e10</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Encode All Output Data</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology>Java</Technology>
      <Type>Guideline</Type>
      <DirectLink>Encode All Output Data</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Encode all input that is displayed back to the user.</p>
  <h1>Why</h1>
  <p>Proper encoding of echoed input prevents injection attacks such as cross-site scripting.</p>
  <h1>When</h1>
  <p>If user input will be echoed back to the client in any way, encode it before displaying it. This includes input that is immediately echoed back as well as input that is stored first (such as in a database) before being echoed back later.</p>
  <h1>How</h1>
  <p>Encoding the echoed user input prevents injection attacks such as cross-site scripting. Use the following steps to ensure all echoed input is encoded:</p>
  <ol>
    <li>
      <p>
        <strong>Identify all echoed input. </strong>Locate all places inside your application where user-supplied data will be returned to the client. Such data can be of a reflective or persistent nature:</p>
      <ul>
        <li>
          <strong>Reflective</strong>: In a reflective setting, the input is immediately returned to the client. For example, search engines present the searched query when displaying the results. </li>
        <li>
          <strong>Persistent</strong>: In a persistent setting, the input is stored and returned to the client when retrieved from the database. For example, message boards store the users' posts inside a database and return them when a given topic is viewed.</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Determine the&amp;nbsp;type of encoding. </strong>After identifying all echoed input, determine how the input is returned to client. Data is said to be in a HTML context when that data is rendered as a part of a HTML document and is understood by the browser to be HTML. There are other contexts available to Web Applications, such as JavaScript context, CSS context, etc. Data is said to be in a JavaScript context when it is included in JavaScript code and is interpreted as JavaScript by the browser, and so on. Data has to be encoded differently for different contexts to prevent Cross-Site Scripting vulnerabilities. The differences of encoding arise from the fact that different contexts have different special symbols and keywords. Output encoding routines have to be designed with the understanding of the context of the output in mind.</p>
      <ul>
        <li>
          <p>
            <strong>URL encoding</strong>: URL encoding allows your application to maintain the original URL, yet display it to the user in a non-malicious way. Because HTTP headers allow a substitution schema, all characters/symbols are preserved by displaying their ASCII codes instead of the actual character/symbol. For example, <em>&lt;</em> is represented by <em>%3C</em> where <em>3C</em> is the ASCII value for <em>&lt;</em>:</p>
          <pre>String encodedUrl = URLEncoder.encode(url);</pre>
        </li>
        <li>
          <p>
            <strong>HTML encoding</strong>: HTML encoding is used when the echoed input is returned as regular text or HTML content. Input should be encoded by substituting certain characters with their respective HTML values.</p>
        </li>
        <li>
          <p>
            <strong>HTML Attribute Encoding</strong>: HTML Attribute encoding is used to encode dynamic data that is output in an attribute of an HTML tag, except&amp;nbsp;URL, CSS, and JavaScript event handler attributes.</p>
        </li>
        <li>
          <p>
            <strong>JavaScript Encoding</strong>: JavaScript encoding is used to encode dynamic data that is output into the JavaScript context, including certain event handlers in HTML tags.</p>
        </li>
        <li>
          <p>
            <strong>CSS Encoding</strong>: CSS encoding is used to encode dynamic data that is output into the CSS context.</p>
        </li>
        <li>
          <p>
            <strong>DOM Encoding</strong>: DOM encoding is used to encode dynamic data that is used in situations where the DOM is involved. These instances are more complicated and often involve multiple output contexts, which necessitates chaining in many circumstances.</p>
        </li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Apply the encoding. </strong>After identifying the echoed input and determining the appropriate encoding method, apply the encoding before the input is returned to the client. There are different encoding libraries available. Different libraries have different capabilities and weaknesses. Please refer to the vendor's documentation for each potential encoding library.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code produces a data analysis based on a financial index. Because it does not HTML encode the echoed input, the application is vulnerable to reflective cross-site scripting.</p>
  <pre>import java.io.*;<br />import java.util.*;<br />import java.lang.*;<br />import javax.servlet.*;<br />import javax.servlet.http.*;<br />import java.util.regex.*;<br /><br /><br />public final class DataAggregator extends HttpServlet<br />{<br />      public void doGet(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter("index");<br /><br />            try<br />            {<br />                  if (validateSearchTerm(searchTerm))<br />                  {<br />                        String retString;<br /><br />                        retString = "The queried index \"";<br /><br />                        // The application does not HTML encode <br />                        //     the returned input<br />                        retString += searchTerm;<br /><br />                        retString += "\" results in:&lt;br&gt; ";<br />                        out.println(retString);<br />                        common.aggregateData(out, searchTerm);<br />                  }<br />                  else<br />                  {<br />                        // Add appropriate logging and exception handling<br />                        // mechanisms. Consult the Exception Handling and<br />                        // Logging sections<br />                        out.println("Unable to process at the moment."<br />                                 + " Please try again later.");<br />                  }<br />            }<br /><br />            catch (Exception e)<br />            {<br />                  // Add the appropriate logging and exception handling<br />                  // mechanisms. Consult the Exception Handling<br />                  // and Logging sections<br /><br />                  out.println("Unable to process at the moment."<br />                           + " Please try again later.");<br />            }<br /><br />            out.flush();<br />            out.close();<br />      }<br />}</pre>
  <h1>Solution Example</h1>
  <p>The following code produces a data analysis based on a financial index. Because the code HTML encodes the echoed input, it is impossible for an attacker to exploit the application via reflective cross-site scripting.</p>
  <pre>import java.io.*;<br />import java.util.*;<br />import java.lang.*;<br />import javax.servlet.*;<br />import javax.servlet.http.*;<br />import java.util.regex.*;<br /><br />public final class DataAggregator extends HttpServlet<br />{<br />      public void doGet(HttpServletRequest request,HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter("index");<br /><br />            try<br />            {<br />                  if (validateSearchTerm(searchTerm))<br />                  {<br />                        String retString;<br /><br />                        retString = "The queried index \"";<br /><br />                        // The application HTML encodes the echoed input<br />                        retString += encodeHtml(searchTerm);<br />                        retString += "\" results in :&lt;br&gt; ";<br />                        out.println(retString);<br />                        common.aggregateData(out, searchTerm);<br />                  }<br />                  else<br />                  {<br />                        // Add the appropriate logging and exception<br />                        // handling mechanisms. Consult the Exception<br />                        // Handling and Logging sections<br />                        out.println("Unable to process at the moment."<br />                                + " Please try again later.");<br />                  }<br />            }<br />            catch (Exception e)<br />            {<br />                  // Add the appropriate logging and exception<br />                  // handling mechanisms. Consult the Exception<br />                  // Handling and Logging sections<br />                  out.println("Unable to process at the moment."<br />                           + " Please try again later.");<br />            }<br /><br />            out.flush();<br />            out.close();<br />      }<br /><br />      public String encodeHtml(String input)<br />      {<br />            StringBuffer out = new StringBuffer();<br /><br />            for (int i = 0; i &lt; input.length(); i++)<br />            {<br />                  char c = input.charAt(i);<br />                  if (c == '&lt;')<br />                  {<br />                        out.append("&lt;");<br />                  }<br />                  else if (c == '&gt;')<br />                  {<br />                        out.append("&gt;");<br />                  }<br />                  else if (c == '\"')<br />                  {<br />                        out.append(""");<br />                  }<br />                  else if (c == '\'')<br />                  {<br />                        out.append(""");<br />                  }<br />                  else if (c == '&amp;')<br />                  {<br />                        out.append("&amp;");<br />                  }<br />                  else if (c &gt; 0x20 &amp;&amp; c &lt; 0x126)<br />                  {<br />                        out.append(c);<br />                  }<br />                  else<br />                  {<br />                        out.append("&amp;#" + (int)c + ";");<br />                  }<br />            }<br />             return out.toString();<br />      }<br />}</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>To learn more about preventing cross-site scripting, see: <a href="http://support.microsoft.com/kb/252985">How to prevent cross-site scripting security issues</a>.</li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1905721199" Content_Hash="-393509813">
    <Metadata>
      <Id>500a3e89-2937-41b8-99cc-a19dc7696ed6</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Perform Role-based Security Checks</Title>
      <Category>Authorization</Category>
      <Phase>Design</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Perform Role-based Security Checks</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Enumerate the different types of users and create specific roles for them. When authorizing access to a resource, build the security checks on a per-role basis rather than on a per-user basis.</p>
  <h1>Why</h1>
  <p>Application roles allow administrators to group users into categories that need the same level of privileges. The mechanism provides an easy and clear way to discover and manage the least privileges necessary for the execution of a given task. It provides a more robust and flexible way of managing the application's users.</p>
  <h1>When</h1>
  <p>If your application uses access control and authorizes its users to application resources.</p>
  <h1>How</h1>
  <p>To apply this concept access control should be based on a user's role rather than the actual user.</p>
  <p>Use the following steps when designing the role-based security:</p>
  <ol>
    <li>
      <p>
        <strong>Understand the different types of users</strong>: Enumerate the different types of users needed for the application. Understand how they willl use the application and to which resources they will need access. Create a spreadsheet mapping the actions each role is authorized to perform with the corresponding system components. Use this spreadsheet to identify the different types of users according to the functionality they need. Creating a threat model may be a useful step to ensure that you correctly understand the implications of this matrix.</p>
    </li>
    <li>
      <p>
        <strong>Establish the roles</strong>: Define which resources can be accessed by each role. There are two approaches when enforcing role-based security - programmatic and declarative.</p>
      <ul>
        <li>
          <p>
            <strong>Programmatically</strong>: The programmatic approach to role-based security is written inside the code and provides additional runtime flexibility. It allows your application to dynamically create and assign roles so that user privileges can be granted and revoked without the need of restarting your application. When using the programmatic approach to role-based security, place access control checks at the appropriate locations in your application. For example, the following code requires users to be shareholders in order to generate a financial report:</p>
          <pre>public void GenerateFinancialReport(DateTime startDate, DateTime endDate)<br />{<br />    if (HttpContext.Current.User.IsInRole("ShareHolders"))<br />    {<br />        // Generate the relevant financial report<br />    }<br />}</pre>
          <p>Additionally, your application can programmatically check if a user is member of a local Windows group.</p>
          <pre>public void RetrieveLogs(ref Hashtable logTable)<br />{<br />    WindowsPrincipal user = new WindowsPrincipal((WindowsIdentity)HttpContext.Current.User.Identity);<br />    if (user.IsInRole(WindowsBuiltInRole.Administrator))<br />    {<br />        // Add logic for retrieving logs<br />    }<br />}</pre>
        </li>
        <li>
          <p>
            <strong>Declarative</strong>: The declarative approach to role-based security is done via the configuration files. It allows easy manageability as the declarations can be modified without having to recompile. By using the declarative approach, you can easily manage the security settings for large portions of the application without changing the source code. ASP.NET applications that use declarative security specify the appropriate roles inside <strong>web.config</strong>. The following elements enforce role-based security through <strong>web.config</strong>:</p>
          <ul>
            <li>
              <p>
                <strong>roleManager</strong>: Configures the ASP.NET role manager. Applicable only if form-based authentication is used. Example:</p>
              <pre>&lt;connectionStrings&gt;<br />  &lt;add name="MyAppSqlConnection"<br />       connectionString="Server=serv02.example.com; Database=myapp; Integrated Security=SSPI;"<br />       providerName="System.Data.SqlClient"/&gt;<br /> ...<br /> &lt;system.web&gt;<br />   &lt;roleManager enabled="true" cacheRolesInCookie="false" defaultProvider ="ProjectRoleProvider"&gt;<br />    &lt;providers&gt;<br />      &lt;clear /&gt;<br />      &lt;add name="MyAppRoleProvider"<br />            type="System.Web.Security.SqlRoleProvider"<br />            connectionStringName="MyAppSqlConnection"<br />            applicationName="MyApp"/&gt;</pre>
            </li>
            <li>
              <p>
                <strong>authorization</strong>: Encapsulates the authorization settings for a resource.</p>
            </li>
            <li>
              <p>
                <strong>allow</strong>: Represents the users and roles that are allowed access to the given resource.</p>
            </li>
            <li>
              <p>
                <strong>deny</strong>: Represents the users and roles that are denied access to the given resource.</p>
            </li>
          </ul>
          <p>For example:</p>
          <pre>&lt;!-- web.config --&gt;<br />&lt;system.web&gt;<br />   &lt;authentication mode="Windows" /&gt;<br />   &lt;authorization&gt;<br />    &lt;allow roles="BUILTIN\Administrators"/&gt;<br />    &lt;deny users="*"/&gt;<br />  &lt;/authorization&gt;<br />&lt;/system.web&gt;</pre>
          <p>Additionally, if your application uses form-based authentication, you can configure your application's access controls through Visual Studio's ASP.NET Configuration, available by accessing the <strong>Website -&gt; ASP.NET Configuration</strong> menu.</p>
          <p>Note that if you use Windows authentication, you will need to manage your application's users and user roles through managing Windows users and groups.</p>
        </li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Manage the users</strong>: Assign the users into their respective user roles. The application should enforce the security policy according to the user roles instead of the actual user. Based on your application's mechanism to enforce role-based access controls, use one of the following techniques to manage your application's users:</p>
      <ul>
        <li>
          <p>
            <strong>Programmatically</strong>: ASP.NET allows you to manage your application's users through the <strong>Roles</strong> class.</p>
          <p>Use the following methods to assign users into roles:</p>
          <ul>
            <li>
              <strong>AddUserToRole</strong>
            </li>
            <li>
              <strong>AddUserToRoles</strong>
            </li>
            <li>
              <strong>AddUsersToRole</strong>
            </li>
            <li>
              <strong>AddUsersToRoles</strong>
            </li>
          </ul>
          <p>Example:</p>
          <pre>Roles.AddUserToRole("eric", "ShareHolders");</pre>
          <p>Use the following methods to remove users from roles:</p>
          <ul>
            <li>
              <strong>RemoveUserFromRole</strong>
            </li>
            <li>
              <strong>RemoveUserFromRoles</strong>
            </li>
            <li>
              <strong>RemoveUsersFromRole</strong>
            </li>
            <li>
              <strong>RemoveUsersFromRoles</strong>
            </li>
          </ul>
          <p>Example:</p>
          <pre>Roles.RemoveUserFromRole("eric", "ShareHolders");</pre>
        </li>
        <li>
          <p>
            <strong>Declarative</strong>: Use the ASP.NET Role Manager to manage your application's users. If your application uses form-based authentication, you can configure your application's access controls through Visual Studio's ASP.NET Configuration, available by accessing the <strong>Website -&gt; ASP.NET Configuration</strong> menu.</p>
        </li>
        <li>
          <p>
            <strong>Windows</strong>: If your application uses Windows authentication, use the Windows <strong>Local Users and Groups</strong> service to manage your application's users. If your server is connected to your organization's NT Domain or Active Directory forest, user and role management will be performed by your organization's network administrators.</p>
        </li>
      </ul>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following segment illustrates an application's access control policy. Because the application does not enforce role-based security, it has a policy entry for each separate user; therefore managing the users' access rights can be quite difficult when the number of users to the application grows.</p>
  <pre>&lt;authorization&gt;<br />  &lt;allow users="NTDomain\joe, NTDomain\sarah, NTDomain\bill, NTDomain\sue"/&gt;<br />  &lt;deny users="*"/&gt;<br />&lt;/authorization&gt;</pre>
  <h1>Solution Example</h1>
  <p>The following segment illustrates an application's access control policy. Because the application enforces role-based security, it provides a policy entry for each group of users; therefore increasing the application's users has no impact on the ability to manage the users' access rights as only the group permissions need to be modified.</p>
  <pre>&lt;authorization&gt;<br />  &lt;allow roles="NTDomain\Employees"/&gt;<br />  &lt;deny users="*"/&gt;<br />&lt;/authorization&gt;</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>To learn more about the roleManager element in web.config, visit: Documentation for <a href="http://msdn2.microsoft.com/en-us/library/ms164660(vs.80).aspx">roleManager Element</a> in MSDN.</li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1917746851" Content_Hash="-1666851222">
    <Metadata>
      <Id>518f71dd-7173-4801-8a48-c0108b294809</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Validate All Input Passed to Database</Title>
      <Category>Data Access</Category>
      <Phase>Implementation</Phase>
      <Technology>Java</Technology>
      <Type>Guideline</Type>
      <DirectLink>Validate All Input Passed to Database</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Validate all input before it is passed to the database.</p>
  <h1>Why</h1>
  <p>Unvalidated input can lead to persistent cross-site scripting, SQL injection and other vulnerabilities which would allow an attacker to gain unauthorized access to sensitive data.</p>
  <h1>When</h1>
  <p>If your application uses a backend database server, then validate all input before it is passed to the database.</p>
  <h1>How</h1>
  <p>To properly validate input passed to database:</p>
  <ol>
    <li>
      <strong>Identify database entry points. </strong>Identify all locations within your application that interface with the database servers. Potential sources of input include: <ul><li>URL-based parameters </li><li>Form-based parameters </li><li>Hidden fields </li><li>Cookies </li><li>Local filesystem </li><li>Javascript variables</li></ul></li>
    <li>
      <p>
        <strong>Create a set of validators. </strong>Build a set of validators that work with the database-specific language. Determine the appropriate validation at each validator. Centralize the validators as it helps strengthen your code by limiting the amount of scattered validation code throughout the component. Place the validators along the database entry points. All data should pass through the validators before transmitted to the database servers.</p>
    </li>
    <li>
      <p>
        <strong>Use type safe SQL parameters in queries. </strong>Stored procedures and parameterized queries improve your application's robustness against SQL injection based attacks.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code allows the user to query a database. Unfortunately, the application fails to validate the user's input; therefore, an attacker can access the backend database on behalf of the application through the use of SQL injection. </p>
  <pre>public void doGet(HttpServletRequest request,<br />     HttpServletResponse response) throws ServletException, IOException{<br />     PrintWriter out = response.getWriter();<br />     String query = request.getParameter("query");<br />     String retData = "";<br /><br />     // The application fails to validate the user-supplied<br />     // query before submitting it to the database server<br />     retData = queryDB(query);<br /><br />     ...<br /><br />     out.flush();<br />     out.close();<br />}</pre>
  <h1>Solution Example</h1>
  <p>The following code allows the user to query a database. Because the application validates the user's input, it is much more difficult for an attacker to access the backend database through a SQL injection attack.</p>
  <pre>public void doGet(HttpServletRequest request,<br />     HttpServletResponse response) throws ServletException, IOException{<br />     PrintWriter out = response.getWriter();<br />     String query = request.getParameter("query");<br />     String retData = "";<br /><br />     // The application validates the user-supplied query<br />     // before submitting it to the database server<br />     if (validateQuery(query))<br />     {<br />          retData = queryDB(query);<br /><br />          ...<br /><br />     }<br /><br />     out.flush();<br />     out.close();<br />}<br /><br /><br />public boolean validateQuery(String input){<br /><br />      // The input can be only of numeric characters<br />      String goodPattern = "[0-9]++";<br /><br />      Pattern p = Pattern.compile(goodPattern);<br />      Matcher m = p.matcher(input);<br /><br />      if(!m.matches())<br />      {<br />            return false;<br />      }<br /><br />      return true;<br />}</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>A tutorial on regular expressions is available at <a href="http://www.regular-expressions.info/">Regular-Expressions.info</a>. </li>
    <li>For more information on using regular expression in Java, see: Documentation for <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/util/regex/Pattern.html">Class Pattern</a> in Java SDK. </li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1461077660" Content_Hash="-171755971">
    <Metadata>
      <Id>52a195b8-bc65-413c-8308-31649d8fb60b</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Encrypt the Data Or Secure the Communication Channel</Title>
      <Category>Communication Security</Category>
      <Phase>Design</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Encrypt the Data Or Secure the Communication Channel</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>When passing sensitive data over the network, check that the data is either encrypted by the application or that the data is only passed over encrypted communication links.</p>
  <h1>Why</h1>
  <p>Sensitive data passed across the network to and from the database server may include application specific data or database login credentials. To ensure the privacy and integrity of data over the network, either use a platform-level solution (such as that provided by a secure datacenter where IPSec encrypted communication channels are used between servers) or configure your application to establish SSL connections to the database.</p>
  <h1>When</h1>
  <p>When you pass sensitive data over the network, make sure it remains private and unaltered.</p>
  <h1>How</h1>
  <p>If you are sending sensitive data over the network to the client, encrypt the data or secure the channel. A common practice is to use SSL between the client and Web server. Between servers, an increasingly common approach is to use IPSec. For securing sensitive data that flows through several intermediaries, for example, Web service Simple Object Access Protocol (SOAP) messages, use message level encryption.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>Design Guidelines for Secure Web Applications <a href="http://msdn2.microsoft.com/en-us/library/aa302420.aspx">http://msdn2.microsoft.com/en-us/library/aa302420.aspx</a></li>
    <li>Architecture and Design Review for Security <a href="http://msdn2.microsoft.com/en-us/library/aa302420.aspx">http://msdn2.microsoft.com/en-us/library/aa302420.aspx</a></li>
    <li>Security Question List: ASP.NET 2.0 <a href="http://msdn2.microsoft.com/en-us/library/ms998375.aspx">http://msdn2.microsoft.com/en-us/library/ms998375.aspx&amp;nbsp;</a></li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="467720348" Content_Hash="-24882224">
    <Metadata>
      <Id>539222c3-efd5-4387-b4e7-b24f9f461ba6</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Limit Session Lifetime</Title>
      <Category>Session Management</Category>
      <Phase>Design</Phase>
      <Technology> Any</Technology>
      <Type>Guideline</Type>
      <DirectLink>Limit Session Lifetime</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Reduce the lifetime of sessions to mitigate the risk of session hijacking and replay attacks.</p>
  <h1>Why</h1>
  <p>Even when using SSL, there's still&amp;nbsp;a risk of session hijacking and replay; there are lots of other out-of-band ways to steal session tokens.&amp;nbsp; The shorter the session timeout, however, the less time an attacker has to capture a session cookie and use it to access your application.</p>
  <h1>When</h1>
  <p>All applications should consider the length of their sessions carefully, and any application protecting any sensitive information should make it as short as possible.</p>
  <h1>How</h1>
  <p>There are two pieces of information that need to be handled to limit the session lifetime.&amp;nbsp; The first is the actual session cookie and the second is the server side session state.&amp;nbsp; With most frameworks, each time the user takes an action on the site the timestamps on the session cookie&amp;nbsp;and the corresponding field in the server-side session state&amp;nbsp;are both reset to the current time.&amp;nbsp; If someone attempts to use an expired cookie, the timestamp in the server-side session state for that session is checked and the request is disallowed.&amp;nbsp; If the session is old enough that the server-side state has been deleted, it's denied immediately.&amp;nbsp; In web farms, the timestamp may be embedded in the cookie and cryptographically signed, freeing up servers from the need to keep a single explicit session-state table.</p>
  <p>Most web application frameworks will handle the details for you, so you'll only need to specify a simple timeout value.&amp;nbsp; In some situations, you'll be able to choose whether the session timer should reset after each action (an idle timer, the default) or if it should be a single fixed timer from the initial login (an absolute timer).&amp;nbsp; The latter is useful for fast transactions and especially security critical situations.</p>
  <p>For most situations, thirty minutes is the maximum that an idle session should be accepted.&amp;nbsp; For sites which handle sensitive information, ten minutes is more appropriate.&amp;nbsp; If you want to allow a user to browse a site and let sessions sit for long periods of time and retain a customized experience, you can seperate out the cookies that control site customization from those that control access to more sensitive information or functionality; the customization cookies can be persisted while the actual session is expired.</p>
  <h1>Problem Example</h1>
  <p>A web site uses the default (one hour) session time set by their web application framework.&amp;nbsp; When a user in an internet cafe forgets to log off, an attacker using the machine after them can browse to the site and use the old session to gain access to the victim's sensitive information.</p>
  <h1>Solution Example</h1>
  <p>A web site locks down its session timeouts to ten minutes, overriding the default set by their web application framework.&amp;nbsp; When a user in an internet cafe forgets to log off, an attacker using the machine after them cannot browse to the site and use the old session to gain access to the victim's sensitive information, because the session has already expired.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information see, "Chapter 4 - Design Guidelines for Secure Web Applications" at <a href="http://msdn2.microsoft.com/en-us/library/aa302420.aspx">http://msdn2.microsoft.com/en-us/library/aa302420.aspx</a>&amp;nbsp;&amp;nbsp; </li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1741103882" Content_Hash="-1856361385">
    <Metadata>
      <Id>5785aae6-b3d7-47d7-ab4e-31be81f29caf</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Store Passwords Securely</Title>
      <Category>Authentication</Category>
      <Phase>Implementation</Phase>
      <Technology>Java</Technology>
      <Type>Guideline</Type>
      <DirectLink>Store Passwords Securely</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Store passwords in a secure fashion. Do not store in plain text or use an easy-to-crack encryption or obfuscation scheme.</p>
  <h1>Why</h1>
  <p>Storing passwords in plaintext or using weak encryption can aid an attacker when stealing them. Compromised passwords may aid an attacker into accessing, modifying and deleting sensitive data.</p>
  <h1>How</h1>
  <p>Use the following steps to store passwords securely:</p>
  <ol>
    <li>
      <p>
        <strong>Choose user-identifiable data. </strong>User-identifiable data will be used to generate a secure key. This data should be tied to the user's account, and it should be different for every user. For example, a valid email address would fit into this category. If your application uses the email address approach, confirm that the address is real and verify that no&amp;nbsp;two users are sharing an email address.</p>
    </li>
    <li>
      <p>
        <strong>Generate the&amp;nbsp;key. </strong>Use the user-identifiable data and some random salt to generate the key. Because encryption key sizes need to be 256 bit, it is recommended to generate the key by hashing the user-identifiable data with some random salt. This technique makes it impossible for an attacker to obtain the encryption key&amp;nbsp;unless he also&amp;nbsp;obtains your application's random salt.<br /><br />Make sure that you securely clean-up all instances of the generated encryption key as it can help an attacker compromise the protected password if the key is exposed.&amp;nbsp;Example of generating an encryption key:</p>
      <blockquote>
        <pre>byte[] salt = MyApp.generateSalt();<br />String userMail = myapp@example.com;<br />MessageDigest md = MessageDigest.getInstance("SHA-512");<br />md.update(userMail.getBytes("UTF-8"));<br />md.update(salt);<br />byte[] rawKey = md.digest();<br />md.reset();</pre>
      </blockquote>
      <p>If your application uses a randomly generated salt, make sure that your application encrypts the random salt and stores it into a configuration file. Always use <strong>SecureRandom</strong> and not <strong>Random</strong> to generate the salt. Example of using <strong>SecureRandom</strong> to generate a random salt:</p>
      <blockquote>
        <pre>public static byte[] generateSalt() throws NoSuchAlgorithmException<br />{<br />      // Note that salt is declared as private static byte[] and is<br />      // initialized to null.<br />       if (salt == null)<br />      {<br />            SecureRandom srand = SecureRandom.getInstance("SHA1PRNG");<br />                          salt = new byte[4];<br />            srand.nextBytes(salt);<br />      }<br />       return salt;<br />}</pre>
      </blockquote>
    </li>
    <li>
      <p>
        <strong>Choose an&amp;nbsp;appropriate encryption function. </strong>Choose a strong symmetric encryption algorithm that will not be easy for an attacker to break; such as AES.</p>
      <blockquote>
        <pre>byte[] salt = MyApp.generateSalt();<br />String userMail = myapp@example.com;<br />MessageDigest md = MessageDigest.getInstance("SHA-512");<br />md.update(userMail.getBytes("UTF-8"));<br />md.update(salt);<br />byte[] rawKey = md.digest();<br />md.reset();<br />SecretKeySpec skeySpec = new SecretKeySpec(rawKey, "AES");<br />// Set up cipherCipher cipher = Cipher.getInstance("AES");<br />cipher.init(Cipher.ENCRYPT_MODE, skeySpec);<br />// Note that pass is declared as byte[] and contains the user's password<br />byte[] encrypted = cipher.doFinal(pass);</pre>
      </blockquote>
      <p>Because of import control restrictions, Java initially ships with a limited set of cryptography. To fully utilize Java's crypto strength, it is recommended to install the "Unlimited Strength" Jurisdiction Policy Files.</p>
    </li>
  </ol>
  <p>
    <strong>Note:</strong> Never store the user credentials or their encrypted values on the client side (e.g. in cookies, hidden fields, etc.). Use sessions when there is a need to track the user or to&amp;nbsp;store their encrypted credentials. For more information, consult the Session Management section.</p>
  <h1>Problem Example</h1>
  <p>The following code authenticates a user based on a username and password. The supplied credentials are compared to the credentials stored in the backend database. Unfortunately, the credentials in the database are in plaintext and could be stolen if the database is compromised.</p>
  <blockquote>
    <pre>public boolean validateUser(String user, char[] pass)<br />{<br />      // Query the credential store with the provided credentials<br />      ...<br />}</pre>
  </blockquote>
  <h1>Solution Example</h1>
  <p>The following code validates the user based on a&amp;nbsp;given username and password. It uses the user's valid email address and a random salt to encrypt the user's password. Then it compares the username and the produced digest against the data stored in the backend database. Therefore, the password is stored encrypted in the database.</p>
  <blockquote>
    <pre>public boolean validateUser(String user, char[] pass)<br />{<br />       ...<br />       // Encrypt the credentials<br />      try<br />      {<br />            userEmail = MyApp.getEmailForUser(user);<br />            passDigest = encryptCredentials(userEmail, pass, salt);<br />      }<br />      catch (GeneralSecurityException gse)<br />      {<br />            // Add the appropriate logging and exception handling mechanisms<br /><br />            return false;<br />      }<br />      catch (IOException ioe)<br />      {<br />            // Add the appropriate logging and exception handling mechanisms<br />            return false;<br />      }<br />       // Query the credential store and execute the rest of the authentication steps<br />      ...<br />}<br />public static byte[] encryptCredentials(String email, char[] pass, byte[] salt)<br />       throws GeneralSecurityException, IOException<br />{<br />      MessageDigest md;<br />      byte[] tempPass;<br />      byte[] rawKey;<br />      // Generate encryption key<br />      md = MessageDigest.getInstance("SHA-512");<br />      md.update(email.getBytes("UTF-8"));<br />      md.update(salt);<br />      rawKey = md.digest();<br />      md.reset();<br />      SecretKeySpec skeySpec = new SecretKeySpec(rawKey, "AES");<br />      // Set up cipher<br />      Cipher cipher = Cipher.getInstance("AES");<br />      cipher.init(Cipher.ENCRYPT_MODE, skeySpec);<br />      // Convert char[] to byte[]<br />      tempPass = new byte[pass.length];<br />      for (int i = 0; i &lt; pass.length; i++)<br />      {<br />            tempPass[i] = (byte)pass[i];<br />      }<br />      // Encrypt password<br />      byte[] encrypted = cipher.doFinal(tempPass);<br />            //Clean tempPass<br />      for (int i = 0; i &lt; tempPass.length; i++)<br />      {<br />            tempPass[i] = 0;<br />      }<br />      return encrypted;<br />}</pre>
  </blockquote>
  <h1>Additional Resources</h1>
  <ul>
    <li>To learn more about the JCE API, see: <a href="http://download.oracle.com/javase/1.4.2/docs/guide/security/jce/JCERefGuide.html">Java Cryptography Extension for the Java 2 SDK, v 1.4</a>. </li>
    <li>For more information about securely generating random numbers, see: Documentation for <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/security/SecureRandom.html">Class SecureRandom</a> in Java SDK.</li>
  </ul>
  <ul>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1240136721" Content_Hash="-1956968452">
    <Metadata>
      <Id>5c75910d-7463-4da7-837d-916185d5dc43</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Use Mapping Values When Redirecting on User Input</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology> Any</Technology>
      <Type>Guideline</Type>
      <DirectLink>Use Mapping Values When Redirecting on User Input</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Use mapping values to perform redirects or forwards based on user input.</p>
  <h1>Why</h1>
  <p>Using mapping values when performing redirects or forwards prevents malicious users from creating hyperlinks that use the redirects or forwards to point to pages other than those intended by the application design.</p>
  <h1>When</h1>
  <p>Use this guideline when writing a web application that uses redirects or forwards. Avoid using redirects or forwards in web applications, if possible.</p>
  <h1>How</h1>
  <p>Perform the following actions to calculate destinations of redirects and forwards based on mapping values:</p>
  <ol>
    <li>
      <p>
        <strong>Identify redirects and forwards.</strong> Review code to find all redirects and forwards.</p>
    </li>
    <li>
      <p>
        <strong>Enumerate destinations.</strong> Make a list of all destinations pointed to by redirects and forwards.</p>
    </li>
    <li>
      <p>
        <strong>Define mapping values.</strong> Define mapping values for all destinations used by redirects and forwards. A mapping value is a short identifying string that symbolically represents a resource.</p>
    </li>
    <li>
      <p>
        <strong>Rewrite redirects and forwards.</strong> Rewrite redirects and forwards to use mapping values as input to calculate the final destinations of redirects or forwards.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>Consider an on-line banking application that has an insecure redirect:</p>
  <pre>http://www.onlinebank.com/redirect.asp?url=[destination]</pre>
  <p>A phisher may create the following hyperlink to point to his own site and send it in spam messages to millions of people:</p>
  <pre>http://www.onlinebank.com/redirect.asp?url=www.phisher.com</pre>
  <p>When a user sees a link that appears to point to his bank at onlinebank.com in an e-mail message, he clicks that link and sees a web site that looks exactly like the bank's, but is actually a phishing web site used to steal authentication credentials. The user enters his account number and PIN into the web page, receives an error message telling him to try again, and is redirected to the bank's real site. After entering his credentials again, the user successfuly views his account. However, the phisher now has the user's online banking information.</p>
  <h1>Solution Example</h1>
  <p>The simplest solution&amp;nbsp;is to get rid of the redirect altogether, but if it is necessary for application design, then mapping values may be used to mitigate this vulnerability. For example, if redirect.asp is used by the application to redirect to balance.asp, a mapping value called "balance" may be created to signify balance.asp. The page redirect.asp should then be rewritten to accept mapping values as input, instead of urls. The following url should then redirect to balance.asp:</p>
  <pre>http://www.onlinebank.com/redirect.asp?map=balance</pre>
  <p>However, the following malicious hyperlink will no longer work, because supplied input will not match any mapping value defined in the application:</p>
  <pre>http://www.onlinebank.com/redirect.asp?url=www.phisher.com</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information about unvalidated redirects and forwards, please see <a href="http://www.owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards">http://www.owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards</a></li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1564656131" Content_Hash="1368633218">
    <Metadata>
      <Id>5d671ebe-781c-4de8-b1ef-f8e69fd13f73</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Restrict All Role Caching Cookies to HTTPS Connections</Title>
      <Category>Authorization</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1><p>Use the <strong>cookieRequireSSL</strong> attribute to restrict role caching cookies to HTTPS connections if role caching is being used. </p><h1>Why</h1><p>Sending cookies out exclusively over SSL makes it much harder for an attacker to sniff the cookie values off the wire.&nbsp; If an attacker can get a copy of an authorization cookie, they can potentially emulate that role, allowing them to elevate their privilege in the system. </p><h1>When</h1><p>All systems which use authorization cookies should use SSL for those cookies if at all possible.&nbsp; Systems which deal with any personally identifiable information or monetary transaction should use SSL in all circumstances without exception. </p><h1>How</h1><p>Set the <strong>cookieRequireSSL</strong> attribute to true to specify that the authorization cookie with the role information should only be returned to the server over HTTPS connections.&nbsp; The following example shows a <strong>&lt;roleManager&gt;</strong> element configured to protect the authorization cookie. </p><pre>&lt;roleManager enabled="true"             <br>  cacheRolesInCookie="true"             <br>  cookieName=".ASPROLES"             <br>  cookieTimeout="30"             <br>  cookiePath="/"             <br>  cookieRequireSSL="true"             <br>  cookieSlidingExpiration="true"             <br>  cookieProtection="All"              <br>  createPersistentCookie="false"&gt;<br>&lt;/roleManager&gt;</pre><h1>Related Items</h1><ul><li><a href="24e081c4-0c62-4c93-a91a-42a96892d74d">Use Role Caching if Role Store Lookups are too Costly</a></li></ul><hr><p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1098795231" Content_Hash="1411818224">
    <Metadata>
      <Id>616fda5d-4e96-4bc0-8675-954794f52557</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Validate All Input Passed to Database</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Validate All Input Passed to Database</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Validate all input before it is passed to the database.</p>
  <h1>Why</h1>
  <p>Unvalidated input can lead to persistent cross-site scripting, SQL injection, and other vulnerabilities which would allow an attacker to gain unauthorized access to sensitive data.</p>
  <h1>When</h1>
  <p>If your application uses a backend database server.</p>
  <h1>How</h1>
  <p>To properly validate input passed to database:</p>
  <ol>
    <li>
      <p>
        <strong>Identify application inputs. </strong>Potential sources of input include:</p>
      <ul>
        <li>URL based parameters </li>
        <li>Form based parameters </li>
        <li>Hidden fields </li>
        <li>Cookies </li>
        <li>Local filesystem </li>
        <li>Javascript variables</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Identify database entry points.</strong> Find all the locations in the system where data is pushed into the database, either directly via queries, or indirectly (via log entries, etc). Trace all database entry points to find all the paths which can contain external input.</p>
    </li>
    <li>
      <p>
        <strong>Create a set of validators:</strong> Build a set of validators that work with the data in question and fit into the system architecture, including your general validation scheme for other data and the way the system interacts with the database. Using the Validate Input for Length, Range, Format, and Type guideline, determine the appropriate validation at each validator. Centralize the validators as it helps strengthen your code by limiting the amount of scattered validation code throughout the system, and allows for easy auditing. Place the validators along the database input paths, ideally as close to the initial data input as possible. All data should pass through the validators before breing transmitted to the database servers.</p>
    </li>
    <li>
      <p>
        <strong>Use Type-Safe parameters in SQL statements:</strong> Stored procedures and Parameterized queries improve your application's robustness against SQL injection based attacks.</p>
    </li>
    <li>
      <p>
        <strong>Audit your entry paths.</strong> Before going into production, have a reviewer who was not responsible for the development of the code in question check all the input paths to ensure that the validators are correctly implemented, that they are correctly applied, and that all input paths are checked.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code validates the user based on a given username and password. It hashes the password with a random salt. Then it compares the username and the produced hash against the data stored in the backend database. Unfortunately, the SQL query is dynamically crafted by using the user's input. If there is no proper input validation, an attacker can access the application's database server through the use of SQL injection.</p>
  <pre>public boolean validateUser(String user, char[] pass)<br />{<br />      byte[] salt = MyApp.generateSalt();<br />      String passHash;<br />      SqlConnection cn;<br />      SqlCommand sqlCommand;<br />      String query;<br />      passHash = hashCredentials(pass, salt);<br />      // The application crafts the SQL query based on user's input<br />      cn = MyApp.getDBConnection();<br />      sqlCommand = new SqlCommand("select user from myappUsers where user = \""<br /><br />      + user + "\" and pass = \"" + passHash + "\" and login_attempts &lt; 3;", cn);<br />      SqlDataReader reader = sqlCommand.ExecuteReader();<br />      updateLastLoginAttempt(user);<br />      ...<br />}</pre>
  <p>If a user submits a login request with a username of 'foo\" or 1 = 1; drop table *; --', the system will happily first authenticate the user and then drop all the tables in the database.</p>
  <h1>Solution Example</h1>
  <p>The following code validates the user based on a given username and password. It hashes the password with a random salt. Then it compares the username and the produced hash against the data stored in the backend database. Because the application uses the Parameters property, it is much more difficult for an attacker to gain access to the application's database server through the use of SQL injection. </p>
  <pre>public boolean validateUser(String user, char[] pass)<br />{<br />   byte[] salt = MyApp.generateSalt();<br />   String passHash; <br />   SqlConnection cn;<br />   SqlCommand sqlCommand;<br />   String query;     <br />   passHash = hashCredentials(pass, salt);<br />   // The application crafts the SQL query based on user's input<br />   cn = MyApp.getDBConnection();<br />   sqlCommand = new SqlCommand("select user from myappUsers where user = @user and <br />                    + pass = @passHash and login_attempts &lt; 3;", cn);<br />   sqlCommand.Parameters.Add("@user", SqlDbType.VarChar, user.Length).Value = user;<br />   sqlCommand.Parameters.Add("@passHash ", SqlDbType.VarChar, passHash.Length).Value = passHash;<br />   SqlDataReader reader = sqlCommand.ExecuteReader(); <br />   updateLastLoginAttempt(user);  <br />   ...<br />}</pre>
  <p>Even if the user passes in an arbitrary string for a username or a password, they will not be able to alter the query or otherwise effect the database. An even better solution would involve using a stored procedure instead of a parameterized command, because that would permit the database to be locked down further.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>To learn more about using regular expression for input validation, visit: <a href="http://msdn2.microsoft.com/en-us/library/ms998267.aspx">How To: Use Regular Expressions to Constrain Input in ASP.NET</a>. </li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-458620630" Content_Hash="1827996794">
    <Metadata>
      <Id>63bed887-fe89-4c08-a1ad-5bfa70ad52c4</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Disable the Session State Service If Unused</Title>
      <Category>Session Management</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Disable the Session State Service If Unused</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>If the session state service is not used by your application, it should be disabled. </p>
  <h1>Why</h1>
  <p>By turning the service off, you eliminate the redundant session processing performed by ASP.NET.&amp;nbsp;</p>
  <h1>How</h1>
  <p>The session state can be&amp;nbsp;turned off&amp;nbsp;for an individual application by setting the <strong>mode</strong> attribute to "off" on the <strong>&lt;sessionState&gt;</strong> element in Web.config as follows.</p>
  <pre>&lt;sessionstate mode="off" /&gt;<br /></pre>
  <h1>See Also</h1>
  <ul>
    <li>"Disable ASP Session State in ASP.NET" at <a href="http://support.microsoft.com/default.aspx?scid=kb;en-us;306996">http://support.microsoft.com/default.aspx?scid=kb;en-us;306996</a></li>
    <li>"Configure SQL Server to Store ASP.NET Session State" at <a href="http://support.microsoft.com/default.aspx?scid=kb;en-us;317604">http://support.microsoft.com/default.aspx?scid=kb;en-us;317604</a></li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1373719704" Content_Hash="763854212">
    <Metadata>
      <Id>65a24726-461b-452d-ac91-cfbfad841419</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Encrypt Communication Links</Title>
      <Category>Communication Security</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Encrypt Communication Links</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Encrypt the communication channels when interacting with other software across the network.</p>
  <h1>Why</h1>
  <p>Encrypting the communication links allows the application to preserve confidentiality and integrity of the transmitted data.</p>
  <h1>When</h1>
  <p>If sensitive data must be transmitted between two hosts. The transmission could be between servers or between a client and a server.</p>
  <h1>How</h1>
  <p>To encrypt the communication links:</p>
  <ol>
    <li>
      <p>
        <strong>Identify the connections used for transmitting sensitive data.</strong> Enumerate all connections between the different entities. Identify the sensitive data that is sent over the network and the respective connections that are used for such communication. </p>
    </li>
    <li>
      <p>
        <strong>Choose the appropriate encryption mechanism.</strong> Depending on the infrastructure, you may consider using IPSec or TLS/SSL.</p>
      <ul>
        <li>
          <p>
            <strong>IPSec.</strong> IPSec is used when the encryption needs to be applied across all involved parties. Because IPSec is designed to secure connections between static hosts that are "always on", use IPSec to secure the network connections between your application's servers.</p>
        </li>
        <li>
          <p>
            <strong>TLS/SSL.</strong> TLS/SSL provides granular protection. This allows the traffic containing sensitive data only to be encrypted. Because TLS/SSL has a certificate based design, it allows the protection of data between mobile hosts. Use TLS/SSL to secure the communication channel between your application and its users. While .NET provides APIs for handling SSL encrypted traffic, it is recommended to follow the manuals associated with any third party software that is being used. If your application uses SSL, ensure that you use SSL 3.0 and disable the cryptographically weak SSL 2.0 protocols.</p>
        </li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Apply the appropriate encryption mechanism. </strong>Apply the encryption mechanism of choice at the appropriate locations in the code. Such locations include all functionality that establishes a connection between your application and another entity.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code establishes a connection between two servers. Unfortunately, the communication is not encrypted and it is possible for an attacker to eavesdrop on the connection.</p>
  <pre>public Stream Connect(string remoteHost, int remotePort)<br />{<br />    TcpClient client = new TcpClient(remoteHost, remotePort);<br />    NetworkStream netStream = client.GetStream();<br />    return netStream;<br />}</pre>
  <h1>Solution Example</h1>
  <p>The following code establishes a connection between two servers. Because the communication is encrypted the confidentiality of the data in transit is preserved and it is impossible for an attacker to eavesdrop on the connection.</p>
  <pre>public Stream Connect(string remoteHost, int remotePort)<br />{<br />    TcpClient client = new TcpClient(remoteHost, remotePort);<br />    SslStream netStream = new SslStream(client.GetStream(), false,<br />               new RemoteCertificateValidationCallback(this.ValidateSSLCertificate));<br />    try<br />    {<br />        netStream.AuthenticateAsClient(remoteHost);<br />    }<br />    catch (AuthenticationException ae)<br />    {<br />        client.Close();<br />        throw ae;<br />    }<br />    return netStream;<br />}</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information about TLS, see: RFC for <a href="http://www.faqs.org/rfcs/rfc2246.html">Transport Layer Security</a>. </li>
    <li>For a quick overview on IPSec, see: A publication on <a href="http://www.digisafe.com/products/pdf/IPSec_Primer.pdf">IPSec Primer</a>. </li>
    <li>To learn more about using IPSec in a server farm, see: <a href="http://msdn2.microsoft.com/en-us/library/aa302413.aspx">How To: Use IPSec to Provide Secure Communication Between Two Servers</a>. </li>
    <li>For more information about uses of IPSec, see: <a href="http://msdn2.microsoft.com/en-us/library/aa302366.aspx">How To: Use IPSec for Filtering Ports and Authentication</a>. </li>
    <li>For more information about using IPSec for managing your server farm, see: <a href="http://support.microsoft.com/kb/816521">How To: Use IPSec Policy to Secure Terminal Services Communications in Windows Server 2003</a>.</li>
  </ul>
  <ul>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-645960511" Content_Hash="-1563309835">
    <Metadata>
      <Id>69cae495-2512-4216-b5d5-4e701ad6b65f</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Use ASP.NET Role Manager for Roles Authorization</Title>
      <Category>Authorization</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Use ASP.NET Role Manager for Roles Authorization</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Use the ASP.NET role manager for role-based authorization instead of writing custom code. </p>
  <h1>Why</h1>
  <p>ASP.NET provides a role manager feature that automatically allows you to create, manage, and look up roles for the currently authenticated user.&amp;nbsp; Role managers reduce possibilities for serious security issues from programmer errors and reduce the amount of custom code needed for an application. </p>
  <h1>When</h1>
  <p>If your application uses windows authentication&amp;nbsp;or stores roles in SQL server you&amp;nbsp;should use ASP.NET role managers.&amp;nbsp; If you need an authorization scheme or a feature not present in the provided role managers, write a custom role manager instead of an entirely custom authorization scheme so you can leverage the existing interfaces. </p>
  <h1>How</h1>
  <p>Roles are accessed from the configured role store by the <strong>RoleManager</strong> HTTP module by using the configured role provider.&amp;nbsp; This occurs after the user is authenticated but before URL authorization and file authorization access checks occur and before programmatic role checks can occur. </p>
  <p>To use the role manager feature in an ASP.NET application, you need to do the following: </p>
  <ol>
    <li>Add a &lt;<strong>roleManager</strong>&gt; element beneath the &lt;<strong>system.web</strong>&gt; section of your application's Web.config file and enable role manager by setting its <strong>enabled</strong> attribute to <strong>true</strong>. </li>
    <li>Add a connection string to the &lt;<strong>connectionStrings</strong>&gt; section to point to your roles store. If you are using the <strong>AuthorizationStoreRoleProvider</strong>, this is an LDAP query string pointing to your Authorization Manager Policy store in Active Directory or ADAM. If you are using the <strong>SqlRoleProvider</strong>, this is a database connection string that points to your role store database. </li>
    <li>Configure the specific provider in the &lt;<strong>roleManager</strong>&gt;<strong></strong>element in your application's Web.config file. The role manager system supports the following providers: </li>
    <li>If your application roles are in an Authorization Manager Policy store in Active Directory or ADAM, use the <strong>AuthorizationStoreRoleProvider</strong>. </li>
    <li>If your application roles are in a SQL Server database, use the <strong>SqlRoleProvider.</strong></li>
    <li>If your application uses Windows groups as roles, use the <strong>WindowsTokenRoleProvider</strong>. Note that this is recommended to be used with Windows Authentication only. </li>
    <li>If your application roles are in a store other than those previously listed, create a custom roles provider inheriting <strong>RoleProvider</strong> base class. </li>
    <li>Set the <strong>defaultProvider</strong> attribute on the &lt;<strong>roleManager</strong>&gt; element to the chosen role provider. </li>
  </ol>
  <p>To check roles and manage roles, use the Role Manager API (for example <strong>Roles.IsUserInRole </strong>and <strong>Roles.CreateRole</strong>). </p>
  <p>If your application needs role-based authorization, use the following guidelines: </p>
  <ul>
    <li>
      <p>
        <strong>Use role providers to perform role authorization.</strong>&amp;nbsp; Role providers allow you to load the roles for users without writing and maintaining code.&amp;nbsp; Additionally, the role providers offer a consistent way for you to check the role membership of your users, regardless of the underlying data store.&amp;nbsp; Where possible, use one of the supplied roles providers; these include <strong>SqlRoleProvider</strong>, <strong>WindowsTokenRoleProvider</strong>, and <strong>AuthorizationStoreRoleProvider</strong>.&amp;nbsp; If you already have a custom role store in a non-SQL Server database or in a non-Active Directory LDAP store, consider implementing your own custom role provider. </p>
      <p>The following code shows how to use the role manager API and specifically <strong>Roles.IsUserInRole</strong>. </p>
      <pre>// Tests whether the currently authenticated user is a member<br />// of a particular role.<br />if(Roles.IsUserInRole("Manager"))<br />   // Perform restricted operation else<br />   // Return unauthorized access error.<br />// Tests whether any given user is a member of a role:<br />if(Roles.IsUserInRole("Bob","Manager"))<br />   // Perform restricted operation<br />else<br />   // Return unauthorized access error.</pre>
    </li>
    <li>
      <p>
        <strong>Use the SqlRoleProvider when your roles are in SQL Server.</strong>&amp;nbsp; If you store role information in SQL Server, configure your application to use the <strong>SqlRoleProvider</strong>.&amp;nbsp; You can also configure forms authentication with the <strong>SqlMembershipProvider</strong> to use the same database for authentication and authorization, although this is not required. </p>
    </li>
    <li>
      <p>
        <strong>Use the WindowsTokenRoleProvider when you use Windows groups as roles.</strong>&amp;nbsp; If your application uses Windows authentication and you use Windows groups as roles, configure your application to use the <strong>WindowsTokenRoleProvider</strong>. </p>
    </li>
    <li>
      <p>
        <strong>Use the AuthorizationStoreRoleProvider when your application roles are in ADAM.</strong>&amp;nbsp; If your application uses Windows authentication against Active Directory, and you need application specific roles instead of using your domain Windows group membership, you can store role information in SQL Server or in an Authorization Manager (AzMan) policy store in ADAM.&amp;nbsp; Authorization Manager provides a Microsoft Management Console (MMC) snap-in, to create and manage roles, and to manage role membership for users. </p>
      <p>If your user accounts are in Active Directory, but you cannot use Windows authentication and must use forms authentication, a good solution for roles management is to use the <strong>AuthorizationStoreRoleProvider</strong> with an AzMan policy store in ADAM. </p>
    </li>
  </ul>
  <p>
    <strong>Note:</strong>&amp;nbsp;&amp;nbsp;The <strong>AuthorizationStoreRoleProvider</strong> does not directly support Authorization Manager business logic such as operations and tasks. To do this, you must use P/Invoke and call the Authorization Manager API directly. &amp;nbsp;</p>
  <ul>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="801033805" Content_Hash="-803092292">
    <Metadata>
      <Id>6e6f83a6-404b-441d-be4c-71f2726a7960</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Separate Public And Restricted Areas</Title>
      <Category>Authentication</Category>
      <Phase>Design</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Separate Public And Restricted Areas</DirectLink>
      <Tag />
      <Security_Demand />
      <Author>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Author>
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>You should Partition your Web Site so that secure pages that require authenticated access are placed in a subdirectory that is separate from the anonymously accessible pages.</p>
  <h1>Why</h1>
  <p>To prevent unauthenticated users from accessing the restricted pages.</p>
  <h1>When</h1>
  <p>If your Web application requires users to complete authentication before they can access specific pages, make sure that the restricted pages are placed in a separate directory away from publicly accessible pages. </p>
  <h1>How</h1>
  <h3>Separate Public and Restricted Areas</h3>
  <p>A public area of your site can be accessed by any user anonymously. Restricted areas can be accessed only by specific individuals and the users must authenticate with the site. Consider a typical retail Web site. You can browse the product catalog anonymously. When you add items to a shopping cart, the application identifies you with a session identifier. Finally, when you place an order, you perform a secure transaction. This requires you to log in to authenticate your transaction over SSL.</p>
  <p>By partitioning your site into public and restricted access areas, you can apply separate authentication and authorization rules across the site and limit the use of SSL. To avoid the unnecessary performance overhead associated with SSL, design your site to limit the use of SSL to the areas that require authenticated access.</p>
  <p>
    <strong>Note</strong> If you are using <strong>Server.Transfer</strong> in your application to transfer from an anonymous page to a secure page, the .NET Framework bypasses authentication checks, so code that uses <strong>Server.Transfer</strong> should be verified to ensure that it does not transfer to a secure directory.</p>
  <p>
    <strong>Consider Partitioning Your Web Site</strong>
  </p>
  <p>To avoid having to use SSL across your entire site, structure your Web site so that the secure pages that require authenticated access are placed in a subdirectory that is separate from the anonymously accessible pages. This approach is shown in following Figure 1</p>
  <p>
    <img src="http://msdn2.microsoft.com/en-us/library/ms998310.f01paght00001201(en-us,MSDN.10).gif" style="border:1px solid #000" />
  </p>
  <p>
    <strong>Figure - Visual Studio.NET Solution Explorer showing a partitioned Web site</strong>
  </p>
  <p>In Figure 1, secure pages, including the application's login page, are placed in the <strong>Secure</strong> folder beneath the application's virtual root directory. </p>
  <p>
    <strong>To secure pages in a separate subfolder</strong>
  </p>
  <ol>
    <li>In Microsoft Internet Information Services (IIS), configure the secure folder to require SSL. This sets the <strong>AccessSSL=true</strong> attribute for the folder in the IIS Metabase. Requests for pages in the secured folders are successful only if HTTPS is used for the request URL. </li>
    <li>Use an &lt;<strong>authorization</strong>&gt; element to ensure that only authenticated users can access secure pages. Place this element beneath the closing &lt;<strong>/system.web</strong>&gt; tag, as shown here. <div><pre>&lt;!-- The secure folder is for authenticated and SSL access only. --&gt;<br />&lt;location path="Secure" &gt;<br />  &lt;system.web&gt;<br />    &lt;authorization&gt;<br />      &lt;deny users="?" /&gt;<br />    &lt;/authorization&gt;<br />  &lt;/system.web&gt;<br />&lt;/location&gt;  </pre></div><p>Additionally, the following configuration ensures that unauthenticated users are allowed to access pages in the application's root directory. Place this configuration in the main &lt;<strong>system.web</strong>&gt; element. </p><pre>&lt;system.web&gt;<br />&amp;nbsp; &lt;!-- The virtual directory root folder contains general pages.<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Unauthenticated users can view them and they do not need <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; to be secured with SSL. --&gt;<br />&amp;nbsp; &lt;authorization&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;allow users="*" /&gt;<br />&amp;nbsp; &lt;/authorization&gt;<br />&lt;/system.web&gt;&amp;nbsp; </pre></li>
  </ol>
  <blockquote>
    <strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;If you use this type of site structure, your application must not rely on the user's identity on the non-SSL pages. In the preceding configuration, no forms authentication ticket is sent for requests for non-SSL pages. As a result, the user is considered anonymous. This has implications for related features, such as personalization, that require the user name.<strong></strong></blockquote>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information see, "Chapter 4 - Design Guidelines for Secure Web Applications" at <a href="http://msdn2.microsoft.com/en-us/library/aa302420.aspx">http://msdn2.microsoft.com/en-us/library/aa302420.aspx</a></li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1974710124" Content_Hash="1910519233">
    <Metadata>
      <Id>75bd5893-aa69-4d39-8cc8-004cee54aaae</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Validate Input for Length, Range, Format, And Type</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology>Java</Technology>
      <Type>Guideline</Type>
      <DirectLink>Validate Input for Length, Range, Format, And Type</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>1</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Treat all input as untrusted data. Validate untrusted data using whitelist techniques to check against known good input.</p>
  <h1>Why</h1>
  <p>Unchecked malicious input may lead to integer overflows, injection based attacks, denial of service or information disclosure. </p>
  <h1>When</h1>
  <p>Always validate input. Do not assume that input is good based on origin.</p>
  <h1>How</h1>
  <p>Input can vary in several ways: length, data, type and contents. It is recommended to verify that all of these meet your application's expectations regarding its input.</p>
  <ol>
    <li>
      <p />
      <strong>Validating length</strong>: Validating an input's length suggests that your application should check a string's length or the number of bits in a numeric value. Checking the length can help prevent buffer overflows as well as integer overflows in numeric values. A simple way of validating the numeric value can be done through the use of <em>BigInteger/BigDecimal</em>:<pre>public boolean validateLength(String input)<br />{<br />      if(validateType(input))<br />      {<br />            BigInteger bi = new BigInteger(input);<br /><br />            if(bi.compareTo(BigInteger.valueOf(0)) &gt; -1<br />               &amp;&amp; bi.compareTo(BigInteger.valueOf(Integer.MAX_VALUE)) &lt; 1)<br />            {<br />                  return true;<br />            }<br />            else<br />            {<br />                  return false;<br />            }<br />      }<br />      else<br />      {<br />             return false;<br />      }<br />}</pre></li>
    <li>
      <p />
      <strong>Validating type</strong>: Validating the input's data type is important when your application expects a specific non-string parameter. Difference in data type can trigger unhandled exceptions that would throw your application into an unknown state. Example for validating that input is of integer value:<pre>public boolean validateType(String input)<br />{<br />      String goodPattern =\\d+;<br />      Pattern p = Pattern.compile(goodPattern);<br />      Matcher m = p.matcher(input);<br />            if(!m.matches())<br />      {<br /><br />            return false;<br />      }<br />      else<br />      {<br />            return true;<br />      }<br />}</pre></li>
    <li>
      <p />
      <strong>Validating contents</strong>: Validating the input's contents can be achieved using whitelist and blacklist techniques. The choice between the use of black and white listing is based upon the constraints that are imposed on the input. If the input follows a tight structure and format, then your application can use whitelisting alone to weed out malicious input. If there are unknowns about the input, then a combination of black and white listing must be used. In general, use blacklisting as a backup to whitelisting. Use a spiral-out approach as input is initially validated using whitelist techniques. When whitelisting cannot validate the input, fall back to blacklisting. If blacklist cannot validate, then discard the input. Whitelisting involves the establishment of what is good input to your application. Once good input is defined, your application must compare all input against the established good input. If the input does not resemble good input, your application should discard it. This technique can be implemented using regular expressions. Example:<pre>public boolean validateData(String input)<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; String goodPattern = "(\\w|\\d)+";<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int goodLength = 10;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if(input.length() &gt; goodLength)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return false;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Pattern p = Pattern.compile(goodPattern);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Matcher m = p.matcher(input);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if(!m.matches())<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return false;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; else<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; return true;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />}<br /></pre><p /><ul></ul></li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code produces a data analysis based on a financial index. Because the code does not validate its input, the application is vulnerable to SQL injection.</p>
  <pre>import java.io.*;<br />import java.util.*;<br />import java.lang.*;<br />import javax.servlet.*;<br />import javax.servlet.http.*;<br />import java.util.regex.*;<br /><br />public final class DataAggregator extends HttpServlet<br />{<br />      public void doGet(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter("index");<br /><br />            String retString;<br /><br />            try<br />            {<br />                  // The application does not validate the user-supplied data<br />                  retString = "The queried index \"";<br />                  retString += encodeHtml(searchTerm); <br />                  retString += "\" produced the following results:&lt;br&gt; ";<br />                  out.println(retString);<br />                  common.aggregateData(out, searchTerm);<br />            }<br /><br />            catch (Exception e)<br />            {<br />                  // Add the appropriate logging and exception handling<br />                  // mechanisms. Consult the Exception Handling and<br />                  // Logging sections<br />                  out.println("We cannot handle your request at the moment."<br />                            + "Please try again later.");<br />            }<br /><br />            out.flush();<br />            out.close();<br />      }<br />  }</pre>
  <h1>Solution Example</h1>
  <p>The following code produces a data analysis based on a financial index. Since the code validates the application's input, the application is secured against SQL injection.</p>
  <pre>import java.io.*;<br />import java.util.*;<br />import java.lang.*;<br />import javax.servlet.*;<br />import javax.servlet.http.*;<br />import java.util.regex.*;<br /><br />public final class DataAggregator extends HttpServlet<br />{<br />      public void doGet(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter("index");<br /><br />            try<br />            {<br /><br />                  // The application validates the user-supplied data<br />                  if (validateSearchTerm(searchTerm))<br />                  {<br />                        String retString;<br />                        retString = "The queried index \"";<br />                        retString += encodeHtml(searchTerm);<br />                        retString += "\" produced the following results:&lt;br&gt; ";<br />                        out.println(retString);<br />                        common.aggregateData(out, searchTerm);<br />                  }<br />                  else<br />                  {<br />                        // Add the appropriate logging and exception handling<br />                        // mechanisms. Consult the Exception Handling and<br />                        // Logging sections<br />                        out.println("We cannot handle your request at the moment."<br />                                  + "Please try again later.");<br />                  }<br />            }<br /><br />            catch (Exception e)<br />            {<br />                   // Add the appropriate logging and exception handling<br />                   // mechanisms. Consult the Exception Handling and<br />                   // Logging sections<br />                   out.println("We cannot handle your request at the moment."<br />                           + " Please try again later.");<br />            }             out.flush();<br />            out.close();<br />      }<br /><br />      boolean validateSearchTerm(String input)<br />      {<br />            String goodPattern = "(\\w|\\d)+";<br />            int goodLength = 8;<br /><br />            if (input == null)<br />            {<br />                  return false;<br />            }<br /><br />            if(input.length() &gt; goodLength)<br />            {<br />                  return false;<br />            }<br /><br />            Pattern p = Pattern.compile(goodPattern);<br />            Matcher m = p.matcher(input);<br />                        if(!m.matches())<br />            {<br />                  return false;<br />            }<br /><br />            return true;<br />      }<br />}</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>A tutorial on regular expressions is available at <a href="http://www.regular-expressions.info/">Regular-Expressions.info</a>. </li>
    <li>For more information on using regular expression in Java, see: Documentation for <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/util/regex/Pattern.html">Class Pattern</a> in Java SDK. </li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="283947568" Content_Hash="22571794">
    <Metadata>
      <Id>797a213b-b83a-4acf-b535-692356993b29</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Perform Role-based Security Checks</Title>
      <Category>Authorization</Category>
      <Phase>Design</Phase>
      <Technology>Java</Technology>
      <Type>Guideline</Type>
      <DirectLink>Perform Role-based Security Checks</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Define&amp;nbsp;the different types of users and create specific roles for them. When authorizing access to a resource, build the security checks on a per-role basis rather than on a per-user basis.</p>
  <h1>Why</h1>
  <p>Application roles allow multiple users to play the same role and&amp;nbsp;provides a clear way to manage the privileges necessary for the execution of a given task. It provides a more robust and flexible way of managing the application's users.</p>
  <h1>When</h1>
  <p>If your application uses access control and authorizes its users to application resources, then define roles and perform role-based security checks.</p>
  <h1>How</h1>
  <p>To apply this concept, the security checks within an application should be executed against a user's role rather than against the actual user.</p>
  <p>Use the following steps when designing the role-based security:</p>
  <ol>
    <li>
      <p>
        <strong>Understand the different types of users</strong>:&amp;nbsp;List the different types of users expected for the application.&amp;nbsp;Define&amp;nbsp;how they will use&amp;nbsp;the application, which resources they will&amp;nbsp;need to&amp;nbsp;access, and any additional rules that will impact&amp;nbsp;how access will vary. Create a matrix mapping roles to resource by describing what action the role can take with each system asset. Use this matrix to identify the different types of users according to the functionality they need.</p>
      <pre>Role       Actions    Access Controls    Client Accounts<br />--------------------------------------------------------<br />Manager    Connect        Always            Always<br />           Read           Always            Always<br />           Use            Always            Occasionally<br />           Modify         Never             Occasionally<br />Employee   Connect        Always            Always<br />           Read           Always            Always<br />           Use            Always            Always<br />           Modify         Never             Never</pre>
    </li>
    <li>
      <p>
        <strong>Establish the roles</strong>: Define in code how each role can access each resource. There are two approaches when enforcing role-based security - programmatic and declarative:</p>
      <ul>
        <li>
          <p>
            <strong>Programmatically</strong>: The programmatic approach to role-based security is written inside the code and provides additional runtime flexibility.<br /><br />To enforce role-based security, you need to create a security policy for your application. If you implement this&amp;nbsp;approach using&amp;nbsp;Java Authentication and Authorization Service (JAAS) policies, you can execute a more focused set of security checks such as whether a user is allowed to access a particular resource or perform a specific action. When building the policy, create a role with associated permissions&amp;nbsp;for each type of user. For example, certain roles would be permitted to access the local filesystem while others would not.<br /></p>
          <pre>grant Principal application.auth.GroupToken "administrators"<br />{<br />  permission java.security.SecurityPermission "AccessApp";<br />  permission java.io.FilePermission “/tmp/myapp/cache”, “read,write”;<br />};<br />grant Principal application.auth.GroupToken "users"<br />{<br />  permission java.security.SecurityPermission "AccessApp";<br />};</pre>
        </li>
        <li>
          <p>
            <strong>Declarative</strong>: The declarative approach to role-based security is declared within configuration files. While it doesn’t provide much flexibility in the development phase of the code, it allows easy manageability as the declarations can be modified without a recompile. By using the declarative approach, you can easily manage the security settings for&amp;nbsp;large portions of the applications without a need to change the code.<br /><br />Java applications that use declarative security rely on a deployment descriptor (e.g. web.xml). The deployment descriptor uses the following elements for role-based security:</p>
          <ul>
            <li>
              <strong>security-constraint</strong>: Defines the access controls associated with a collection of resources as defined in the <em>web-resource-collection</em> element. </li>
            <li>
              <strong>web-resource-collection</strong>: Encapsulates a collection of resources that share mutual access controls. </li>
            <li>
              <strong>web-resource-name</strong>: Defines the name for the collection of resources. </li>
            <li>
              <strong>url-pattern</strong>: Identifies the URL of a resource that uses the access controls. </li>
            <li>
              <strong>auth-constraint</strong>: Defines the group of user roles that can access the collection of resources identified by the <em>web-resource-collection</em> element. </li>
            <li>
              <strong>role-name</strong>: Defines the roles that can access the collection of resources. </li>
            <li>
              <strong>http-method</strong>: Identifies the HTTP method upon which the access controls will be enforced. For example, your application may enforce access controls for POST requests, but not GET requests. If omitted, the access controls will apply to all HTTP methods. </li>
          </ul>
          <p>For example:</p>
          <pre>&lt;!-- Application's web.xml --&gt;<br />&lt;security-constraint&gt;<br />      &lt;web-resource-collection&gt;<br />            &lt;web-resource-name&gt;Admin Commands&lt;/web-resource-name&gt;<br />            &lt;url-pattern&gt;/admin/*&lt;/url-pattern&gt;<br />            &lt;url-pattern&gt;/config.do&lt;/url-pattern&gt;<br />      &lt;/web-resource-collection&gt;<br />      &lt;auth-constraint&gt;<br />            &lt;role-name&gt;Admin&lt;/role-name&gt;<br />      &lt;/auth-constraint&gt;<br />&lt;/security-constraint&gt;<br /><br />&lt;login-config&gt;<br />      &lt;auth-method&gt;BASIC&lt;/auth-method&gt;<br />      &lt;realm-name&gt;Admin Realm&lt;/realm-name&gt;<br />&lt;/login-config&gt;<br /><br />&lt;!-- The following needs to be included if the application is to<br />     use form-based authentication --&gt;</pre>
          <p>In web.xml:</p>
          <pre>&lt;login-config&gt;<br />      &lt;auth-method&gt;FORM&lt;/auth-method&gt;<br />      &lt;form-login-config&gt;<br />            &lt;form-login-page&gt;/loginForm.jsp&lt;/form-login-page&gt;<br />            &lt;form-error-page&gt;/loginFailed.html&lt;/form-error-page&gt;<br />      &lt;/form-login-config&gt;<br />&lt;/login-config&gt;</pre>
          <p>In loginForm.jsp:</p>
          <pre>&lt;form method="POST" action="j_security_check"&gt;<br />&lt;input type="text" name="j_username"&gt;<br />&lt;input type="password" name="j_password"&gt;<br />&lt;input type="submit" value="log in"&gt;<br />&lt;/form&gt;</pre>
          <p>Because declarative security asks the hosting server to handle authentication and authorization, there is the risk of disclosing connection strings, database credentials, etc.; therefore, use a JAAS LoginModule when using declarative security.<br /><br />Example using Tomcat (if you use a different environment, please consult its manual):</p>
          <pre>      &lt;!-- $TOMCAT_HOME/conf/server.xml --&gt;<br />      &lt;!-- JAAS authentication realm --&gt;<br />      &lt;Realm className="org.apache.catalina.realm.JAASRealm"<br />             appName="AppLoginConfig"<br />             userClassNames="application.auth.GroupToken"<br />             roleClassNames="application.auth.GroupToken"<br />             useContextClassLoader="false"<br />             debug="99"/&gt;</pre>
        </li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Manage the users</strong>: Assign the users into their respective user roles. The application should apply the security policy according to the user roles instead of the actual user.</p>
      <pre>GroupToken groupToken = new GroupToken(groupName);<br />if(!subject.getPrincipals().contains(groupToken))<br />{<br />      subject.getPrincipals().add(groupToken);<br />}</pre>
    </li>
    <li>
      <p>
        <strong>Consider using additional context when making security decisions</strong>: Simple examples include time of day and day of week. For instance, a given user may have no need to login to a system outside of the standard work hours, or even on the weekend. If that user attempts to login or perform some action in the middle of the weekend, it should not be allowed. Another example could be the user's phyisical location. If a user is expected to always use the system from their office in Chicago, but suddenly is connected in Eastern Europe, access should not be allowed.</p>
    </li>
    <li>
      <p>
        <strong>Consider using access control mechanisms provided by frameworks</strong>: Frameworks such as Spring Security (formerly Acegi) and Apache Shiro (formerly JSecurity), as well as others, seek to provide flexible but secure access control mechanisms that integrate neatly with current MVC frameworks and simplify security functionality.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following segment illustrates a JAAS policy. Because the application does not enforce role-based security, it has a policy entry for each separate user; therefore, changing the users' access rights can be quite difficult as each user needs to be modified individually.</p>
  <pre>grant Principal application.auth.UserToken "joe"<br />{<br />  permission java.security.SecurityPermission "AccessApp";<br />};<br />grant Principal application.auth.UserToken "steve"<br />{<br />  permission java.security.SecurityPermission "AccessApp";<br />};<br />grant Principal application.auth.UserToken "julie" <br />{<br />  permission java.security.SecurityPermission "AccessApp";<br />};</pre>
  <h1>Solution Example</h1>
  <p>The following segment illustrates a JAAS policy. Because the application enforces role-based security, it has a policy entry for each group of users; therefore changing the users' access rights is easy as only the group needs to be modified.</p>
  <pre>grant Principal application.auth.GroupToken "users"<br />{<br />  permission java.security.SecurityPermission "AccessApp";<br />};</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information about setting Tomcat Realms, see: <a href="http://tomcat.apache.org/tomcat-7.0-doc/realm-howto.html">Tomcat 7: Realm Configuration HOW-TO</a>.</li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1299302906" Content_Hash="174229457">
    <Metadata>
      <Id>834db5af-d3ce-4fe5-a546-7b5af56f840c</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Use IPSsec to Encrypt Traffic Between Servers</Title>
      <Category>Communication Security</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Use IPSsec to Encrypt Traffic Between Servers</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Internet Protocol security (IPSec)&amp;nbsp;provides encryption, integrity, and authentication services for IP-based network traffic.&amp;nbsp;Use&amp;nbsp;IPSec to provide server-to-server protection&amp;nbsp;against internal network threats, including eavesdropping, tampering, man in the middle attacks, IP spoofing, and other password-based attacks by restricting which computers can communicate with each other, and limit the protocols they can communicate with.</p>
  <h1>Why</h1>
  <p>Servers&amp;nbsp;do not usually co-exist in a secure environment. Eavesdropping and spoofing are threats when two or more entities must communicate over&amp;nbsp;typical untrusted mediums such as the public internet&amp;nbsp;or a company intranet. Failure to use IPSec&amp;nbsp;increases the likleihood&amp;nbsp;that data traveling on the network will be intercepted, modified, or&amp;nbsp;stolen.</p>
  <h1>When</h1>
  <p>IPSec can be used&amp;nbsp;for the following tasks:</p>
  <ul>
    <li>Provide message confidentiality by encrypting all of the data sent between two computers. </li>
    <li>Provide message integrity between two computers (without encrypting data). </li>
    <li>Provide mutual authentication between two computers. For example, you can help secure a database server by establishing a policy that permits requests only from a specific client computer (for example, an application or Web server). </li>
    <li>Restrict which computers can communicate with one another. You can also restrict communication to specific IP protocols and TCP/UDP ports.</li>
  </ul>
  <p>&amp;nbsp;Using IPSec is not a a possibility when the two servers are not using static ip addresses.</p>
  <h1>How</h1>
  <p>To secure traffic between two servers, follow these steps:</p>
  <ol>
    <li>
      <p>
        <strong>Create an IP Filter.</strong> This&amp;nbsp;restricts&amp;nbsp;what computers can communicate with each other, and require that&amp;nbsp;specific&amp;nbsp;communication protocols are used.&amp;nbsp;A filter consists of:</p>
      <ul>
        <li>A source IP address or range of addresses. </li>
        <li>A destination IP address or range of addresses. </li>
        <li>An IP protocol, such as TCP, UDP, or "any." </li>
        <li>Source and destination ports (for TCP or UDP only).</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Create Filter Actions.</strong> This procedure creates two filter actions. The first will be used to block all communications from specified computers and the second will be used to enforce the use of encryption between application server and database server computers. </p>
    </li>
    <li>
      <p>
        <strong>Create Rules.</strong> This procedure creates two new rules that will be used to associate the filter that you created in Procedure 1, with the two filter actions you created in Procedure 2. </p>
    </li>
    <li>
      <p>
        <strong>Export the IPSec Policy to the Remote Computer.</strong> The IPSec policy that you have created on the database server must now be exported and copied to the application server computer. </p>
    </li>
    <li>
      <p>
        <strong>Assign Policies.</strong> An IPSec policy must be assigned before it becomes active. Note that only one policy may be active at any one time on a particular computer. </p>
    </li>
    <li>
      <p>
        <strong>Verify that it Works.</strong> Use Network Monitor (netmon.exe) to verify that data sent between the two servers&amp;nbsp;is encrypted. </p>
    </li>
  </ol>
  <h1>Additional Resources</h1>
  <ul>
    <li>How To: Use IPSec to Provide Secure Communication Between Two Servers&amp;nbsp;<a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnnetsec/html/SecNetHT18.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnnetsec/html/SecNetHT18.asp</a></li>
    <li>How To: Use IPSec for Filtering Ports and Authentication <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnnetsec/html/HTUseIPSec.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnnetsec/html/HTUseIPSec.asp</a></li>
    <li>How To: Use IPSec Policy to Secure Terminal Services Communications in Windows Server 2003 <a href="http://support.microsoft.com/kb/816521">http://support.microsoft.com/kb/816521</a></li>
  </ul>
  <ul>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="667238788" Content_Hash="238070967">
    <Metadata>
      <Id>8b8b0ec3-7ad7-4c0f-bcaf-ce30b56b4e50</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Assume All Input Is Malicious</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Design</Phase>
      <Technology> Any</Technology>
      <Type>Guideline</Type>
      <DirectLink>Assume All Input Is Malicious</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Applications should assume that all of their input is malicious, and take action accordingly.&amp;nbsp; Input should&amp;nbsp;be validated and either rejected or sanitized immediately, carefully quarantined during use, and encoded appropriately on output.</p>
  <h1>Why</h1>
  <p>Malicious input is the single largest cause of vulnerabilities in web applications, and in the most general sense, is the root cause of almost every issue.&amp;nbsp; The only way to ensure safety is by a defense in depth, default deny policy that starts with the fundamental supposition that all input is malicious until proven otherwise. For example, if you call an external Web service that returns strings, how do you know that malicious commands are not present? Also, if several applications write to a shared database, when you read data, how do you know whether it is safe?</p>
  <h1>When</h1>
  <p>All applications should assume that all their input is malicious.</p>
  <h1>How</h1>
  <p>Getting input validation correct is tricky; there's a reason that it's the number one security problem for web applications.&amp;nbsp; However, when approached systematically, it's not too hard of a&amp;nbsp;problem to solve.&amp;nbsp; Follow these steps:</p>
  <ol>
    <li>
      <p>
        <b>Determine all inputs.&amp;nbsp;</b>The first step is to determine all the things in the application which can be controlled by the user.&amp;nbsp; There are some surprises here -- a lot of the variables in a normal HTTP server environment are actually taken from the user's request, so make sure you know exactly where everything is coming from.&amp;nbsp; It's a good idea to leave a brief comment in the code where the input comes in mentioning where it comes from (if it isn't obvious from context), the expected format, and where it's validated (again, if it isn't obvious).</p>
    </li>
    <li>
      <p>
        <b>Determine all trusted data stores.</b>&amp;nbsp;Every application has at least one, usually multiple data stores.&amp;nbsp; It's important to know when a data store can be trusted.&amp;nbsp; The guideline here is simple; if the system in question is the only input into the data store, then you can rely on the semantics enforced by your input validation routines to apply to all data found in the store.&amp;nbsp; If other applications access the data store, then you can't.&amp;nbsp; While it is possible to check the semantics of every validation routine in every other system that accesses the data store, it's simpler and safer to assume that the data store is untrusted, and treat it as a potential source of malicious data, validating all input from it as you would any other input.</p>
    </li>
    <li>
      <p>
        <b>Determine all crossover points.&amp;nbsp;</b>Crossover points are one of the places where malicious input becomes a bug.&amp;nbsp; They're not necessarily places where output occurs; in fact, they'll often occur many layers further in than that in large applications.&amp;nbsp; A crossover point is anywhere where user input is included textually in some larger body of command text, or where a security-relevant decision is made based on it.&amp;nbsp; A good example of a crossover point is a dynamic SQL query.&amp;nbsp; The risk here is of the user input crossing over into the associated command data, allowing an attacker to execute commands.&amp;nbsp; Xpath and other XML injections are another example here.&amp;nbsp; The worst case here is when user input is evaluated by a languages built-in "eval" command or something similar -- these commands should never be used, even with values that look safe, because of the risks associated.</p>
      <p>Once the crossover points are found, all inputs should be traced back to make sure that they've been validated appropriately beforehand, and a comment again stating the format, source, and validation point should be made.&amp;nbsp;&amp;nbsp;All crossover points have, depending on the technology involved, different sets of safe characters.&amp;nbsp; Using the whitelist approach described below, the safe set of characters for that crossover point should be compared against what the validator will allow through; the allowed characters must be a subset of the safe ones.</p>
      <p>Whenever possible, steps should be taken to remove crossover points entirely.&amp;nbsp; Switching from dynamic SQL to stored procedures with bound parameters removes an entire category of crossover points from the system, and greatly reduces risk to an entire class of attacks.&amp;nbsp; Similar things can be done with other types of crossovers.</p>
    </li>
    <li>
      <p>
        <b>Determine all outputs.&amp;nbsp;</b>The last point of concern is the list of outputs from the system.&amp;nbsp; This will likely have a certain amount of overlap with the list of crossover points, which is fine.&amp;nbsp; Again, we need to determine the allowable format for each output, and look at where the incoming data is being validated.&amp;nbsp; If there's any question of whether the data may contain dangerous characters, it should be encoded in a manner appropriate to the specific output.&amp;nbsp; There are more output contexts than one might think; the contents of HTML attributes, the tags themselves, free text between the tags, and javascript strings all have different safe sets of characters (and a different encoding, in the last case).&amp;nbsp; Comments on the input source, format, validation point, and encoding point&amp;nbsp;are also useful here.</p>
    </li>
    <li>
      <p>
        <b>Build a centralized validation module.&amp;nbsp;</b>One of the biggest dangers of implementing input validation is inconsistent validation; an attack may be caught on one data path, but not on another.&amp;nbsp; An attacker will try all of them, however.&amp;nbsp; The way to solve this problem is to have a single point of responsibility for input validation.&amp;nbsp; Where this is depends on the design.&amp;nbsp; If every piece of input is an object, then it may be appropriate to have the object constructs and setters perform the validation for that object's input.&amp;nbsp; In a less strictly OO system, a single module with methods for each different input format may be more appropriate.</p>
      <p>Which ever method is chosen, the input validation routine for a specific data type should be as strict as possible.&amp;nbsp; For example, when validating a US zip code, allow either 5 or 9 numbers, and nothing else.&amp;nbsp; If you're dealing with international postal codes, either validate them seperately with a looser format that also allows letters, or build a more complex validator that understands the postal codes of each nation, if you need to ensure a higher level of integrity.</p>
    </li>
    <li>
      <p>
        <b>Build a centralized encoding module.&amp;nbsp;</b>In an ideal world, all encoding routines would be done via the same libraries which are used to create output.&amp;nbsp; While many HTML control libraries attempt this, none of them take the whitelist approach.&amp;nbsp; Instead, they try to guess which characters might be harmful, a list which is categorically incomplete.&amp;nbsp; Unless you want to build a new output library (which might be an option on a large enough application), you should build a set of data encoders for each output context which you have.&amp;nbsp; These encoders should be used as close as possible to the actual point of output; this minimizes the chance of an alternate data path skipping the encoding, and ensures that the developer knows exactly what context the output is being used in.&amp;nbsp; Avoid the temptation to store encoded data, because even if it is initially only used in the context you encoded it for, this may change over time.</p>
    </li>
    <li>
      <p>
        <b>Ensure that all paths through the system preserve validation.</b>&amp;nbsp;Once the validation system is complete, all the paths that data takes through the system should be checked to ensure that they preserve the validation properties that are expected.&amp;nbsp; Input which is sent round-trip through a client or another system must be re-validated, unless a cryptographic signature is used to ensure that it has not been tampered with.&amp;nbsp; Validation which occurs on an untrusted system must also be repeated. Client-side validation in javascript is a nice UI touch, but it is trivially circumvented as&amp;nbsp; a security measure.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>A suite of web applications on an e-commerce site share a common back-end database.&amp;nbsp; The largest application is&amp;nbsp;the&amp;nbsp;order entry system and shopping cart.&amp;nbsp; This was the first application built, and was designed with the assumption that the database was trusted. Later, a lightweight app to allow users to quickly check stock levels was built. Because it was a small "read-only" use of the database, input validation was not built into the application.&amp;nbsp; The application contained a SQL injection, allowing an attacker to alter the database in such a way that they could&amp;nbsp;inject javascript into pages which displayed the shopping cart application, allowing them to steal user's passwords.&amp;nbsp;</p>
  <h1>Solution Example</h1>
  <p>A suite of web applications on an e-commerce site share a common back-end database.&amp;nbsp; The largest application is&amp;nbsp;the&amp;nbsp;order entry system and shopping cart.&amp;nbsp; This was the first application built, and was designed with the assumption that the database was trusted.&amp;nbsp; Later, a lightweight app to allow users to quickly check stock levels was built.&amp;nbsp;&amp;nbsp;When the new application was added, the developers realized that the database could no longer be treated as a trusted data store, and added code to the main application to perform data validation on input from the database.&amp;nbsp;&amp;nbsp;&amp;nbsp;Because the new application was a small "read-only" use of the database, the input validation routines written were not properly checked.&amp;nbsp; When an attacker found a SQL injection via the new application and altered the back-end database, they were unable to make that attack chain through to the main application.&amp;nbsp; Furthermore, the logging performed by the main application's data validation routines altered the operations group to the problem, allowing them to fix the smaller application.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information see, "Chapter 4 - Design Guidelines for Secure Web Applications" at <a href="http://msdn2.microsoft.com/en-us/library/aa302420.aspx">http://msdn2.microsoft.com/en-us/library/aa302420.aspx</a></li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="340336973" Content_Hash="1768259399">
    <Metadata>
      <Id>91872294-7491-4d61-9111-64180e220a3e</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Protect Sensitive Data Inside Configuration Files</Title>
      <Category>Server Hardening</Category>
      <Phase>Implementation</Phase>
      <Technology>Java</Technology>
      <Type>Guideline</Type>
      <DirectLink>Protect Sensitive Data Inside Configuration Files</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Protect all sensitive data that is stored within configuration files.</p>
  <h1>Why</h1>
  <p>Configuration files are a likely target for any attacker. If an attacker does compromise the configuration files, any unprotected sensitive data inside them will also be compromised.</p>
  <h1>When</h1>
  <p>If your application uses configuration files that contain sensitive data such as connection strings, directory paths or credentials, then protect the files.</p>
  <h1>How</h1>
  <p>To protect sensitive data inside configuration files use the following steps:</p>
  <ol>
    <li>
      <p>
        <strong>Identify the sensitive data. </strong>Locate all sensitive data that is stored inside configuration files. Examples of sensitive data include, but are not limited to, credentials, connection strings and directory paths.</p>
    </li>
    <li>
      <p>
        <strong>Encrypt sensitive data inside the configuration files. </strong>Encrypt the sensitive data inside the configuration file to ensure its confidentiality in case this file is compromised. Once the application accesses the configuration file, it should decrypt the sensitive data just before use. Example:</p>
      <pre>public Properties loadDatabaseCredentials()<br />      throws GeneralSecurityException, IOException{<br />      // Set the decryption mechanism<br />      byte[] rawKey = getEncryptionKey();<br />      SecretKeySpec skeySpec = new SecretKeySpec(rawKey, "AES");<br />      Cipher cipher = Cipher.getInstance("AES");<br />      cipher.init(Cipher.DECRYPT_MODE, skeySpec);<br /><br />      // Decrypt config file<br /><br />      File configFile = new File("../../config/testProp.config");<br />      byte[] tempBuff = new byte[(int)configFile.length()];<br />      FileInputStream fileStream = new FileInputStream(configFile);<br />      fileStream.read(tempBuff, 0, tempBuff.length);<br /><br />      InputStream propStream = new ByteArrayInputStream(cipher.doFinal(tempBuff));<br />      prop.load(propStream);<br />      propStream.close();<br />      fileStream.close();<br /><br />      return prop;}</pre>
    </li>
    <li>
      <p>
        <strong>Protect configuration files.</strong>
      </p>
      <ul>
        <li>
          <p>
            <strong>Choose a configuration directory</strong>: Dedicate a directory for storing your application's configuration files. Make sure the directory is not web-accessible. This limits the scope of users&amp;nbsp;who can potentially compromise the contents inside the directory.</p>
        </li>
        <li>
          <p>
            <strong>Set appropriate permissions</strong>: Apply the appropriate filesystem permissions such that the configuration files can be only accessed by your application and its administrators.</p>
        </li>
      </ul>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code retrieves database credentials from a configuration file. Unfortunately, the credentials are not encrypted; therefore, anybody with access to the configuration file can retrieve the credentials and access the database on behalf of the application.</p>
  <pre>public Properties loadDatabaseCredentials() throws IOException{<br />      Properties prop = new Properties();<br />      InputStream propStream = new FileInputStream("../../config/testProp.config");<br />      prop.load(propStream);<br />      propStream.close();<br /><br />      return prop;}</pre>
  <h1>Solution Example</h1>
  <p>The following code retrieves database credentials from a configuration file. Because the credentials are encrypted, the application decrypts them in real time, protecting the credentials' confidentiality in case the local access to the configuration file is not properly secured.</p>
  <pre>public Properties loadDatabaseCredentials()<br />      throws GeneralSecurityException, IOException{<br />      // Set the decryption mechanism<br />      byte[] rawKey = getEncryptionKey();<br />      SecretKeySpec skeySpec = new SecretKeySpec(rawKey, "AES");<br />      Cipher cipher = Cipher.getInstance("AES");<br />      cipher.init(Cipher.DECRYPT_MODE, skeySpec);<br /><br />      // Decrypt config file<br /><br />      File configFile = new File("../../config/testProp.config");<br />      byte[] tempBuff = new byte[(int)configFile.length()];<br />      FileInputStream fileStream = new FileInputStream(configFile);<br />      fileStream.read(tempBuff, 0, tempBuff.length);<br /><br />      InputStream propStream = new ByteArrayInputStream(cipher.doFinal(tempBuff));<br />      prop.load(propStream);<br />      propStream.close();<br />      fileStream.close();<br /><br />      return prop;}</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>To learn more about the JCE API, see: <a href="http://download.oracle.com/javase/1.4.2/docs/guide/security/jce/JCERefGuide.html">Java Cryptography Extension for the Java 2 SDK, v 1.4</a>.</li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1432157249" Content_Hash="162045547">
    <Metadata>
      <Id>92f8ce2b-9290-4b24-ab01-24bc0766fd26</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Calculate Destinations of Redirects And Forwards Without User Input</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Design</Phase>
      <Technology> Any</Technology>
      <Type>Guideline</Type>
      <DirectLink>Calculate Destinations of Redirects And Forwards Without User Input</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Calculate destinations of redirects and forwards without user input.</p>
  <h1>Why</h1>
  <p>Using input to calculate destinations of redirects or forwards may allow an attacker to create hyperlinks that appears to point to legitimate sites but redirect to malicious pages controlled by the attacker. This technique is often used by phishers to trick people into visiting fake sites that steal authentication credentials.</p>
  <h1>When</h1>
  <p>Use this guideline when writing a web application that uses redirects or forwards. Avoid using redirects or forwards in web applications, if possible.</p>
  <h1>How</h1>
  <p>Perform the following actions to calculate destinations of redirects and forwards without user input:</p>
  <ol>
    <li>
      <p>
        <strong>Find redirects and forwards.</strong> Find all pages that perform redirects or forwards. Redirects are also known as "transfers" in .NET.</p>
    </li>
    <li>
      <p>
        <strong>Identify dangerous redirects and forwards.</strong> Find all redirects and forwards that rely on user input to calculate their destinations.</p>
    </li>
    <li>
      <p>
        <strong>Rewrite redirects and forwards.</strong> Consider making design or code changes to get rid of each redirect or forward, if possible. If a redirect or forward is absolutely necessary, consider how it may be rewritten to operate without user input - this is usually possible based on assumptions made in the application design.</p>
    </li>
  </ol>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information about unvalidated redirects and forwards, please see <a href="http://www.owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards">http://www.owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards</a></li>
  </ul>
  <ul>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1135800852" Content_Hash="-2126177747">
    <Metadata>
      <Id>9c905082-0a13-4641-b8cb-28e0bdc710c2</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Use RSA-Protected Configuration Provider in Web Farm Environments</Title>
      <Category>Data Access</Category>
      <Phase>Deployment</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Use RSA-Protected Configuration Provider in Web Farm Environments</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Use the RSA Protected Configuration provider to encrypt sections of your configuration files. You can use Aspnet_regiis.exe tool to encrypt sensitive data, such as connection strings, held in the Web.config and Machine.config files.&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</p>
  <h1>Why</h1>
  <p>Connection strings contain sensitive resource access credentials (e.g., a connection string for a SQL server resource includes a username and password.) Connection strings stored in plaintext are dangerous, because an attacker that can compromise a server will be able to read those connection strings. Even if a machine is not compromised, connection strings stored in plain text&amp;nbsp;are accessible to administrators and any other users with sufficient privileges&amp;nbsp;on the host machine and/or Windows domain.&amp;nbsp;</p>
  <h1>When</h1>
  <p>Always encrypt connection strings. In&amp;nbsp;a web farm environment,&amp;nbsp;the RSA protected configuration provider is an effective way to encrypt and decrypt configuration file sections&amp;nbsp;because it uses asymmetric encryption to encrypt and decrypt,&amp;nbsp;meaning&amp;nbsp;the keys can easily be exported and imported&amp;nbsp;from server to server.&amp;nbsp;If the application is not deployed to a web farm environment DPAPI will work as well as RSA for encrypting connection strings.&amp;nbsp; </p>
  <h1>How</h1>
  <p>Use the following steps to encrypt sections of your configuration files: </p>
  <ol>
    <li>
      <p>
        <strong>Identify the configuration sections to be encrypted.</strong> Encrypting and decrypting data incurs performance overhead. To keep this overhead to a minimum, encrypt only the sections of your configuration file that store sensitive data. In this case, we are interested in encrypting the &lt;connectionStrings&gt; element of the Web.config file since that is where the database connection string will reside. </p>
    </li>
    <li>
      <p>
        <strong>Choose the machine or user store.</strong> The DataProtectionConfigurationProvider supports machine-level and user-level stores for key storage. The choice of store depends largely on whether or not your application shares a server with other applications and whether or not sensitive data must be kept private for each application. </p>
    </li>
    <li>
      <p>
        <strong>Encrypt your configuration file data.</strong> Use the RSA Provider to Encrypt a Connection String in Web.config in a Web Farm. To do this, you must create a custom RSA encryption key container and deploy the same key container on all servers in your Web farm. This won't work by default because the default RSA encryption key, "NetFrameworkConfigurationKey", is different for each computer.</p>
      <p>Run&amp;nbsp;the following command from a .NET command prompt to encrypt the connectionStrings section using the machine level store:</p>
      <pre>aspnet_regiis -pe "connectionStrings" -app "/MachineRSA"</pre>
      <p>Note: If your ASP.NET application identity does not have access to the .NET Framework configuration key store, you'll need to grant access.</p>
    </li>
  </ol>
  <ul>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1556035302" Content_Hash="1960955043">
    <Metadata>
      <Id>a94e0193-b5ab-43e0-b6b1-8e7f0ce69206</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Protect Sensitive Data Over the Network</Title>
      <Category>Communication Security</Category>
      <Phase>Implementation</Phase>
      <Technology>Java</Technology>
      <Type>Guideline</Type>
      <DirectLink>Protect Sensitive Data Over the Network</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Use encryption to protect sensitive data that is transmitted over the network. </p>
  <h1>Why</h1>
  <p>Because network traffic&amp;nbsp;is easily eavesdropped on or modified by attackers, passing sensitive data as plaintext&amp;nbsp;over the network&amp;nbsp;can lead&amp;nbsp;to a host of attacks, including data theft and data manipulation.</p>
  <h1>When</h1>
  <p>Apply this guideline when your application transmits sensitive data over unprotected communication channels.</p>
  <h1>How</h1>
  <p>Use the following steps to protect sensitive data over the network:</p>
  <ol>
    <li>
      <p>
        <strong>Identify sensitive information. </strong>Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to, names of customers, government issued ID numbers, credit card and other financial information, passwords and private keys. Some industries, such as health care and banking, have regulatory standards that define sensitive information. Use regulatory requirements, as they apply to your application, to identify sensitive data. Sensitive data can be defined as follows:</p>
      <ul>
        <li>Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with others. </li>
        <li>Information that a user provides that they would not want shared with other users of the application. </li>
        <li>Information that comes from an external trusted source that is not designed to be shared with users.</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Choose an appropriate protection mechanism. </strong>Choosing the appropriate protection mechanism may depend on various conditions: purpose of the sensitive data, role of the other network party, infrastructure and supported technologies. Because sensitive data must be encrypted when in transit, there are two strategies, to encrypt the communication channel or to encrypt the application data:</p>
      <ul>
        <li>
          <p>
            <strong>Encrypt the communication channel</strong>: Depending on the current infrastructure and the other network party, it is possible to encrypt the connections using Java's crypto library or any technologies supported by the remote party.</p>
        </li>
        <li>
          <p>
            <strong>Encrypt the application data</strong>: If your application's communication channels cannot be encrypted, encrypt the application data. Hashing or encryption should be used when protecting the application data. Use hashing if the application data will be used only for comparison purposes. Use encryption if the application data will be retrieved at a later stage.</p>
          <p>If hashing is used, choose a longer salt, 16 or more bits.&amp;nbsp;In the case&amp;nbsp;that the produced hash is compromised, longer salts make it more difficult for an attacker to gain access to the sensitive data. If your application uses randomly generated salt, make sure that your application encrypts the random salt and stores it in a configuration file. Always use <strong>SecureRandom</strong> and not <strong>Random</strong> to generate the salt. Example of using <strong>SecureRandom</strong> to generate a random salt:</p>
          <blockquote>
            <pre>public static byte[] generateSalt() throws NoSuchAlgorithmException<br />{<br />      // Note that salt is declared as private static byte[] and is<br />      // initialized to null.<br />      if (salt == null)<br />      {<br />            SecureRandom srand = SecureRandom.getInstance("SHA1PRNG");<br />                          salt = new byte[4];<br />            srand.nextBytes(salt);<br />      }<br />       return salt;<br />}</pre>
          </blockquote>
          <p>Choosing a strong hashing algorithm is also important. Stronger algorithms prevent multiple unique pieces of data from producing identical hash values. The current recommendation is to use SHA-256 or stronger.</p>
          <blockquote>
            <pre>public String hashCredentials(char[] pass, byte[] salt)<br />      throws GeneralSecurityException, IOException<br />{<br />      MessageDigest md;<br />      byte[] tempPass;<br />      byte[] digest;<br />            md = MessageDigest.getInstance("SHA-512");<br />      //Convert char[] to byte[]<br />      tempPass = new byte[pass.length];<br />      for (int i = 0; i &lt; pass.length; i++)<br />      {<br />            tempPass[i] = (byte)pass[i];<br />      }<br />      md.update(tempPass);<br />      md.update(salt);<br />      digest = md.digest();<br />      md.reset();<br />      //Clean tempPass<br />      for (int i = 0; i &lt; tempPass.length; i++)<br />      {<br />            tempPass[i] = 0;<br />      }<br />       return new String(digest);<br />}</pre>
          </blockquote>
          <p>Use encryption if the application data will be retrieved at a later stage.<br /><br />Use symmetric encryption if and only if your application is the only entity that will access the encrypted data. Use a key size of 265-bit or higher and AES for symmetric encryption.<br /><br />Use public/private key encryption if the data will be accessed by two or more parties. Use a key size of 2048-bit or higher and RSA for public/private key encryption. Public/private key encryption allows your application to share sensitive data with multiple entities without disclosing its own encryption key.</p>
          <pre>// Because the following code generates a new encryption key,<br />// make sure to store it into the application's keystore.<br />KeyGenerator kgen = KeyGenerator.getInstance("AES");<br />kgen.init(256);<br />SecretKey skey = kgen.generateKey();<br />// Set up cipherCipher cipher = Cipher.getInstance("AES");<br />cipher.init(Cipher.ENCRYPT_MODE, skey);<br />// Note that sensitiveData is of type byte[] and contains<br />// data that is sensitive in naturebyte[] encrypted = cipher.doFinal(sensitiveData);</pre>
        </li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Apply the appropriate protection mechanism</strong>. Evaluate the code and determine the places where sensitive data is transmitted. Apply the established protection mechanism at each location.</p>
      <blockquote>
        <pre>try<br />{<br />      // The application produces a hash based on the sensitive data<br />      userEmail = MyApp.getEmailForUser(user);<br />      passDigest = encryptCredentials(userEmail, pass, salt);<br />}<br />catch (GeneralSecurityException gse)<br />{<br />      // Add the appropriate logging and exception handling mechanisms<br />      return false;}catch (IOException ioe)<br />{<br />      // Add the appropriate logging and exception handling mechanisms<br />      return false;<br />}<br />// The application stores the hashed sensitive data into the database<br />Connection cn = MyApp.getDBConnection();<br />PreparedStatement st = cn.prepareStatement("select login_attempts from myappUsers"<br />                                        + " where user = ? and pass = ?;");<br />st.setString(1, user);<br />st.setBytes(2, passDigest);<br />ResultSet rs = st.executeQuery();</pre>
      </blockquote>
    </li>
  </ol>
  <p>
    <strong>Note:</strong> PCI DSS requirements state that all sensitive data must be encrypted before being sent over the network or be sent over an encrypted channel.</p>
  <h1>Problem Example</h1>
  <p>The following code authenticates a user based on a username and password. The supplied credentials are compared to the credentials stored in the backend database. Unfortunately, the credentials are transmitted in plaintext and could be stolen if the network is compromised.</p>
  <blockquote>
    <pre>public boolean validateUser(String user, char[] pass)<br />{<br />      // Query the credential store with the provided credentials<br />      ...<br />}</pre>
  </blockquote>
  <h1>Solution Example</h1>
  <p>The following code validates the user based on&amp;nbsp;a given username and password. It uses the user's valid email address and a random salt to encrypt the user's password before comparing&amp;nbsp;the username and the produced digest against the data stored in the backend database. Therefore, the password is encrypted before being transmitted over the network and is protected from being compromised.</p>
  <blockquote>
    <pre>public boolean validateUser(String user, char[] pass)<br />{<br />       ...<br />       // Encrypt the credentials<br />      try<br />      {<br />            userEmail = MyApp.getEmailForUser(user);<br />            passDigest = encryptCredentials(userEmail, pass, salt);<br />      }<br />      catch (GeneralSecurityException gse)<br />      {<br />            // Add the appropriate logging and exception handling mechanisms<br />            return false;<br />      }<br />     catch (IOException ioe)<br />      {<br />            // Add the appropriate logging and exception handling mechanisms<br />            return false;<br />      }<br />       // Query the credential store and execute the rest of the authentication steps<br />      ...<br />}<br />public static byte[] encryptCredentials(String email, char[] pass, byte[] salt)<br />      throws GeneralSecurityException, IOException<br />{<br />      MessageDigest md; <br />      byte[] tempPass;<br />      byte[] rawKey;<br />      // Generate encryption key<br />      md = MessageDigest.getInstance("SHA-512");<br />      md.update(email.getBytes("UTF-8"));<br />      md.update(salt);<br />      rawKey = md.digest();<br />      md.reset();<br />      SecretKeySpec skeySpec = new SecretKeySpec(rawKey, "AES");<br />      // Set up cipher<br />      Cipher cipher = Cipher.getInstance("AES");<br />      cipher.init(Cipher.ENCRYPT_MODE, skeySpec);<br />      // Convert char[] to byte[]<br />      tempPass = new byte[pass.length];<br />      for (int i = 0; i &lt; pass.length; i++)<br />      {<br />            tempPass[i] = (byte)pass[i];<br />      }<br />      // Encrypt password<br />      byte[] encrypted = cipher.doFinal(tempPass);<br />            //Clean tempPass<br />      for (int i = 0; i &lt; tempPass.length; i++)<br />      {<br />            tempPass[i] = 0;<br />      }<br />      return encrypted;<br />}</pre>
  </blockquote>
  <h1>Additional Resources</h1>
  <ul>
    <li>To learn more about the JCE API, see: <a href="http://java.sun.com/products/jce/index-14.html">Java Cryptography Extension for the Java 2 SDK, v 1.4</a>. </li>
    <li>For more information about securely generating random numbers, see: Documentation for <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/security/SecureRandom.html">Class SecureRandom</a> in Java SDK. </li>
    <li>To learn more about JSSE, see: <a href="http://java.sun.com/j2se/1.4.2/docs/guide/security/jsse/JSSERefGuide.html">Java Secure Socket Extension (JSSE) Reference Guide</a>.</li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-229649483" Content_Hash="-1913041490">
    <Metadata>
      <Id>a99bebe3-80cb-489d-90f3-6f6d35f23dc0</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Use the Correct Algorithm And Correct Key Size</Title>
      <Category>Encryption</Category>
      <Phase>Design</Phase>
      <Technology> Any</Technology>
      <Type>Guideline</Type>
      <DirectLink>Use the Correct Algorithm And Correct Key Size</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Examine what algorithms your application uses and for what purpose and ensure that correct algorithm and correct key sizes are being used.</p>
  <h1>Why</h1>
  <p>Cryptography only provides real security if it is used appropriately and the right algorithms are used for the right job. The strength of the algorithm is also important.&amp;nbsp; Larger key sizes result in improved security, but performance suffers. Stronger encryption is most important for persisted data that is retained in data stores for prolonged periods of time.</p>
  <h1>When</h1>
  <p>If your application uses cryptography to provide security, examine what algorithm and key size it uses and the way it is used.</p>
  <h1>How</h1>
  <p>It is important to make sure you choose the right algorithm for the right job and to make sure you use a key size that provides a sufficient degree of security. Larger key sizes generally increase security. The following list summarizes the major algorithms together with the key sizes that each uses: </p>
  <ul>
    <li>Data Encryption Standard (DES) 64-bit key (8 bytes) </li>
    <li>TripleDES 128-bit key or 192-bit key (16 or 24 bytes) </li>
    <li>Rijndael 128-256 bit keys (16-32 bytes) </li>
    <li>RSA 384-16,384 bit keys (48-2,048 bytes) </li>
  </ul>
  <p>For large data encryption, use the TripleDES symmetric encryption algorithm (also&amp;nbsp;called Triple Data Encryption Algorithm, TDEA) . For slower and stronger encryption of large data, use Rijndael,&amp;nbsp;also known as Advanced Encryption Standard(AES). As per NIST&amp;nbsp;recomendations, 192-256-bit AES&amp;nbsp;keys are required for highly sensitive data.&amp;nbsp;&amp;nbsp;To encrypt data that is to be stored for short periods of time, you can consider using a faster but weaker algorithm such as DES. For digital signatures, use Rivest, Shamir, and Adleman (RSA) or Digital Signature Algorithm (DSA). NIST guidelines suggest that 15360-bit RSA keys are equivalent&amp;nbsp;to 256-bit symmetric keys in strength. For hashing, use the Secure Hash Algorithm (SHA)1.0. For keyed hashes, use the Hash-based Message Authentication Code (HMAC) SHA1.0.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information see, "Chapter 4 - Design Guidelines for Secure Web Applications" at <a href="http://msdn2.microsoft.com/en-us/library/aa302420.aspx">http://msdn2.microsoft.com/en-us/library/aa302420.aspx</a></li>
  </ul>
  <h1>&amp;nbsp;</h1>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-2040584005" Content_Hash="-987391901">
    <Metadata>
      <Id>acae9e9a-f11e-4957-af5c-24235cd47f96</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Consider Partitioning Your Site to Restricted Areas And Public Areas</Title>
      <Category>Authentication</Category>
      <Phase>Design</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Consider Partitioning Your Site to Restricted Areas And Public Areas</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>To avoid the performance overhead of using SSL across your entire site, consider using a separate folder to help protect pages that require authenticated access. Configure that folder in IIS to require SSL access. Those pages that support anonymous access can safely be accessed over HTTP connections.</p>
  <h1>Why</h1>
  <p>Using SSL across an entire site can incur a significant performance penalty. For sites that have pages which may be viewed without encryption or authentication, it will improve performance to separate out restricted from non-restricted pages. </p>
  <h1>When</h1>
  <p>This technique should be employed whenever an application has a mix of pages - some of which require authentication while others don't. </p>
  <h1>How</h1>
  <p>To avoid having to use SSL across your entire site, structure your Web site so that the secure pages that require authenticated access are placed in a subdirectory that is separate from the anonymously accessible pages.&amp;nbsp; </p>
  <p>
    <strong>To secure pages in a separate subfolder</strong>
  </p>
  <ol>
    <li>
      <p>In Microsoft Internet Information Services (IIS), configure the secure folder to require SSL. This sets the <strong>AccessSSL=true</strong> attribute for the folder in the IIS Metabase. Requests for pages in the secured folders are successful only if HTTPS is used for the request URL. </p>
    </li>
    <li>
      <p>Use an &lt;<strong>authorization</strong>&gt; element to ensure that only authenticated users can access secure pages. Place this element beneath the closing &lt;<strong>/system.web</strong>&gt; tag, as shown here. </p>
      <pre>&lt;!-- The secure folder is for authenticated and SSL access only. --&gt;<br />&lt;location path="Secure" &gt;<br />  &lt;system.web&gt;<br />    &lt;authorization&gt;<br />      &lt;deny users="?" /&gt;<br />    &lt;/authorization&gt;<br />  &lt;/system.web&gt;<br />&lt;/location&gt;  </pre>
      <p>Additionally, the following configuration ensures that unauthenticated users are allowed to access pages in the application's root directory. Place this configuration in the main &lt;<strong>system.web</strong>&gt; element. </p>
      <pre>&lt;system.web&gt;<br />  &lt;!-- The virtual directory root folder contains general pages.<br />       Unauthenticated users can view them and they do not need<br />        to be secured with SSL. --&gt;<br />  &lt;authorization&gt;<br />    &lt;allow users="*" /&gt;<br />  &lt;/authorization&gt;<br />&lt;/system.web&gt;  </pre>
      <p>
        <strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;If you use this type of site structure, your application must not rely on the user's identity on the non-SSL pages. In the preceding configuration, a no forms authentication ticket is sent for requests for non-SSL pages. As a result, the user is considered anonymous. This has implications for related features, such as personalization, that require the user name.<strong>&amp;nbsp;</strong>&amp;nbsp;</p>
    </li>
  </ol>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="546304520" Content_Hash="680152557">
    <Metadata>
      <Id>ae57fb40-a7ab-428e-9ed1-6624d4ae8181</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Validate Input from All Sources</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Design</Phase>
      <Technology>Java</Technology>
      <Type>Guideline</Type>
      <DirectLink>Validate Input from All Sources</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>1</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Treat input from all external sources as untrusted and apply input validation techniques.</p>
  <h1>Why</h1>
  <p>Input that is not validated can lead to cross-site scripting, SQL injection, directory traversals, and other vulnerabilities&amp;nbsp;that could allow an attacker to gain unauthorized access to sensitive data.</p>
  <h1>When</h1>
  <p>Treat all input as untrusted. If you have established trust boundaries for your application, then validate data every time it crosses a trust boundary.</p>
  <h1>How</h1>
  <p>An application can take input via various ways: web interface, database, file system, other software running on the server, etc. Use the following steps to establish a validation strategy:</p>
  <ol>
    <li>
      <p>
        <strong>Establish your application's trust boundary:</strong> The notion is that all input not generated by your application is untrusted.</p>
    </li>
    <li>
      <p>
        <strong>Identify all sources of input</strong>: An application can have various sources of input and each one is an entry point to your application&amp;nbsp;that can potentially be used to break your application's security model. Enumerate all possible sources of input and make note of the expected input&amp;nbsp;at&amp;nbsp;each source. Potential sources of input in a web application typically include:</p>
      <ol>
        <li>URL based parameters </li>
        <li>Form based parameters </li>
        <li>Hidden fields </li>
        <li>Cookies </li>
        <li>HTTP headers </li>
        <li>Local filesystem </li>
        <li>Database </li>
        <li>Other related services</li>
      </ol>
    </li>
    <li>
      <p>
        <strong>Understand the input that your application can handle and process</strong>: After identifying the different entry points, define the format and type of input that&amp;nbsp;should be provided through each entry point. </p>
    </li>
    <li>
      <p />
      <strong>Create a set of validators</strong>: Build a validator for each format and type of expected input. Centralize your application's validators as it helps strengthen the code by limiting the amount of scattered validation code throughout your application. Place the set of validators on your application's trust boundary. Your application should accept input from the outside world only through its set of validators.</li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code produces a data analysis based on a financial index. Unfortunately, the application validates the user's input but not the returned data from the database. Therefore, the application is vulnerable to an integer overflow that can harm the business logic used in generating the data analysis.</p>
  <pre>import java.io.*;<br />import java.util.*;<br />import java.lang.*;<br />import javax.servlet.*;<br />import javax.servlet.http.*;<br />import java.util.regex.*;<br /><br />public final class DataAggregator extends HttpServlet<br />{<br />      public void doGet(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter("index");<br /><br />            try<br />            {<br />                  // The application validates the user-supplied input<br />                  if (validateSearchTerm(searchTerm))<br />                  {<br />                        String retString;<br />                         retString = "The queried index \"";<br />                        retString += encodeHtml(searchTerm);<br />                        retString += "\" produced the following results:&lt;br&gt; ";<br />                        out.println(retString);<br />                        aggregateData(out, searchTerm);<br />                  }<br />                  else<br />                  {<br />                        // Add the appropriate logging and exception handling<br />                        // mechanisms. Consult the Exception Handling and<br />                         // Logging sections<br />                         out.println("We cannot handle your request at the moment."<br />                                 + " Please try again later.");<br />                  }<br />            }<br /><br />            catch (Exception e)<br />            {<br />                  // Add the appropriate logging and exception handling<br />                   // mechanisms. Consult the Exception Handling and<br />                   // Logging sections <br />                  out.println("We cannot handle your request at the moment."<br />                           + " Please try again later.");<br />            }<br /><br />            out.flush();<br />            out.close();<br />      }<br /><br />      boolean validateSearchTerm(String input)<br />      {<br />            String goodPattern = "(\\w|\\d)+";<br />            int goodLength = 8;<br /><br />            if (input == null)<br />            {<br />                  return false;<br />            }<br /><br />            if(input.length() &gt; goodLength)<br />            {<br />                  return false;<br />            }<br /><br />            Pattern p = Pattern.compile(goodPattern);<br />            Matcher m = p.matcher(input);<br /><br />            if(!m.matches())<br />            {<br />                  return false;<br />            }<br /><br />            return true;<br />      }<br /><br />      void aggregateData(PrintWriter out, String searchTerm)<br />      {<br />            double[] rData = common.queryDBForIndex(searchTerm);<br />            // The application fails to validate the returned<br />            // data from the database<br />            // Business logic that performs certain data analysis<br />      }<br />}</pre>
  <h1>Solution Example</h1>
  <p>The following code produces a data analysis based on a financial index. Since the code validates all sources of input to the application, the application is secured against SQL injection and integer overflows.&amp;nbsp;</p>
  <pre>import java.io.*;<br />import java.util.*;<br />import java.lang.*;<br />import javax.servlet.*;<br />import javax.servlet.http.*;<br />import java.util.regex.*;<br /><br />public final class DataAggregator extends HttpServlet<br />{<br />      public void doGet(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter("index");<br /><br />            try<br />            {<br />                  // The application validates the user-supplied input<br />                  if (validateSearchTerm(searchTerm))<br />                  {<br />                        String retString;<br />                         retString = "The queried index \"";<br />                        retString += encodeHtml(searchTerm);<br />                        retString += "\" produced the following results:&lt;br&gt; ";<br />                        out.println(retString);<br />                        aggregateData(out, searchTerm);<br />                  }<br />                  else<br />                  {<br />                        // Add the appropriate logging and exception<br />                        // handling mechanisms. Consult the Exception Handling<br />                        // and Logging sections <br />                        out.println("We cannot handle your request at the moment."<br />                                 + " Please try again later.");<br />                  }<br />            }<br /><br />            catch (Exception e)<br />            {<br />                  // Add the appropriate logging and exception handling mechanisms<br />                  // Consult the Exception Handling and Logging sections<br />                   out.println("We cannot handle your request at the moment."<br />                           + " Please try again later.");<br />            }<br /><br />            out.flush();<br />            out.close();<br />      }<br /><br />      void aggregateData(PrintWriter out, String searchTerm) throws Exception<br />      {<br />            double[] rData = common.queryDBForIndex(searchTerm);<br /><br />            // The application validates the returned data from the database<br />            if (validateRawDBData(rData))<br />            {<br />                  // Business logic that performs certain data analysis<br />            }<br />            else<br />            {<br />                  String errMsg = "Business logic not executed";<br />                  throw new Exception(errMsg);<br />            }<br />      }<br /><br />      boolean validateSearchTerm(String input)<br />      {<br />            String goodPattern = "(\\w|\\d)+";<br />            int goodLength = 8;<br /><br />            if (input == null)<br />            {<br />                  return false;<br />            }<br /><br />            if(input.length() &gt; goodLength)<br />            {<br />                  return false;<br />            }<br /><br />            Pattern p = Pattern.compile(goodPattern);<br />            Matcher m = p.matcher(input);<br /><br />            if(!m.matches())<br />            {<br />                  return false;<br />            }<br /><br />            return true;<br />      }<br /><br />      boolean validateRawDBData(double[] input)<br />      {<br />            boolean valid = true;<br /><br />            for (int i = 0; i &lt; input.length; i++)<br />            {<br />                  if (input[i] &lt; 0.0 || input[i] &gt; 100.0)<br />                  {<br />                        valid = false;<br />                  }<br />            }<br /><br />            return valid;<br />      }<br />}</pre>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1276381450" Content_Hash="-652097810">
    <Metadata>
      <Id>b797adfa-93bf-4f6e-9b30-70a0758ecd3d</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Do Not Rely on Client-Side Validation</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Design</Phase>
      <Technology> Any</Technology>
      <Type>Guideline</Type>
      <DirectLink>Do Not Rely on Client-Side Validation</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Client-side validation can reduce the number of round trips to the server, but do not rely on it for security because it is easy to bypass. Validate all input at the server. </p>
  <h1>Why</h1>
  <p>It is easy to modify the behavior of the client or just write a new client that does not observe the same data validation rules.</p>
  <h1>When</h1>
  <p>All applications should only use Server-side validation when the code relys on security.</p>
  <h1>How</h1>
  <p>Server-side code should perform its own validation. What if an attacker bypasses your client, or shuts off your client-side script routines, for example, by disabling JavaScript? Use client-side validation to help reduce the number of round trips to the server but do not rely on it for security. This is an example of defense in depth.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information see, "Chapter 4 - Design Guidelines for Secure Web Applications" at <a href="http://msdn2.microsoft.com/en-us/library/aa302420.aspx">http://msdn2.microsoft.com/en-us/library/aa302420.aspx</a>&amp;nbsp;&amp;nbsp;&amp;nbsp;</li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-66624287" Content_Hash="911682039">
    <Metadata>
      <Id>bae35023-258d-40f5-8c36-22f562c83c36</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Encrypt Configuration Sections That Store Sensitive Data</Title>
      <Category>Data Access</Category>
      <Phase>Deployment</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Encrypt Configuration Sections That Store Sensitive Data</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Encrypt configuration sections containing sensitive data such as passwords or usernames. </p>
  <h1>Why</h1>
  <p>Configuration sections typically contain privacy sensitive resource access credentials (e.g., a connection string for a SQL server resource includes a username and password.) As a precautionary measure, they should not be stored in plaintext, because an attacker that can compromise a server will be able to read those values if they are not adequately protected. </p>
  <h1>When</h1>
  <p>This guideline is applicable whenever configuration sections are utilized. </p>
  <h1>How</h1>
  <p>In ASP.NET, you can use either the DPAPI or RSA protected configuration providers to encrypt specific sections that contain sensitive data. The sections that usually contain sensitive information that you need to encrypt include <i>&lt;appSettings&gt;, &lt;connectionStrings&gt;, &lt;identity&gt;,</i> and <i>&lt;sessionState&gt;</i>. To encrypt the <i>&lt;connectionStrings&gt;</i> section by using the DPAPI provider with the machine-key store (the default configuration), run the following command from a command window:</p>
  <div>
    <br />
    <pre>aspnet_regiis -pe "connectionStrings" -app "/MachineDPAPI" -prov "DataProtectionConfigurationProvider" </pre>
    <br />
  </div>
  <ul>
    <li>
      <strong>-pe</strong>: Specifies the configuration section to encrypt. </li>
    <li>
      <strong>-app</strong>: Specifies your Web application's virtual path. If your application is nested, you need to specify the nested path from the root directory; for example, "/test/aspnet/MachineDPAPI". </li>
    <li>
      <strong>-prov</strong>: Specifies the provider name.</li>
  </ul>
  <p>If you need to encrypt configuration file data on multiple servers in a Web farm, you should use RSA protected configuration provider because of the ease with which you can export RSA key containers.&amp;nbsp;</p>
  <ul>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1970449752" Content_Hash="1495454086">
    <Metadata>
      <Id>c2651adf-f0d8-4067-b3fc-0c8b0cb315f4</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Validate Input from All Sources For Type, Length, Format, And Range</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Validate Input from All Sources For Type, Length, Format, And Range</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Do not trust input. Instead, validate on the server that it matches the expected input, be careful which contexts you allow it to be used in, and encode it appropriately on output.</p>
  <h1>Why</h1>
  <p>An attacker passing malicious input can attempt SQL injection, cross-site scripting, and other injection attacks that aim to exploit your application's vulnerabilities. Validating input helps to reduce these risks by ensuring that the input received matches the expected format. Input validation on its own is not sufficient; output encoding is also needed to fully prevent these attacks, but it is an important step for both security and reliability.</p>
  <h1>When</h1>
  <p>All input should always be validated, regardless of source. Unless data is actually static within the scope of the local code base, it could be modified by a malicious user—even data in a database which is supposed to be static.</p>
  <h1>How</h1>
  <p>Perform the following actions to validate input from all sources:</p>
  <ol>
    <li>
      <p>
        <strong>Identify data to validate.</strong> Input must be validated on the server for security checks.&amp;nbsp; While it can be useful for user experience reasons to check the input on the client side, especially on things like web applications with high round-trip latencies, this client-side validation is not sufficient to provide security guarantees, as it can be circumvented by the attacker. Check for known good data and constrain input by validating it for type, length, format, and range. For Web form applications that obtain input through server controls, use the ASP.NET validator controls, such as the RegularExpressionValidator, RangeValidator, and CustomValidator, to validate and constrain input. All input not under control of the system should be validated, but input coming directly from users must be validated and should receive the most attention. Most Web applications accept input from various sources, including HTML controls, server controls, query strings, and cookies. Validate input from all of these sources to help prevent injection attacks. </p>
    </li>
    <li>
      <p>
        <strong>Use regular expressions.</strong> Use regular expressions to help validate input. In general, validate your input against the least permissive expression possible that will accept all the input you expect for that field. If you know that the field will have certain internal structure, check for it. If there is a range of standard formats which your users may enter data in, but these formats are easily converted to a single internal format, do so.&amp;nbsp;The following example shows how to use the Regex class. </p>
      <pre>using System.Text.RegularExpressions;<br />// Instance method:<br />Regex reg = new Regex(@"^[a-zA-Z'.\s]{1,40}$");<br />Response.Write(reg.IsMatch(Request.QueryString["Name"]));<br />// Static method:<br />if (!Regex.IsMatch(Request.QueryString["Name"],@"^[a-zA-Z'.\s]{1,40}$"))<br />{<br />&amp;nbsp;&amp;nbsp; // Name does not match expression<br />}</pre>
      <p>If you cannot cache your regular expression for frequent use, you should use the static IsMatch method where possible for performance reasons, to avoid unnecessary object creation. </p>
    </li>
    <li>
      <p>
        <strong>Validate numeric data.</strong> Check all numeric fields for type and range. If you are not using server controls, you can use regular expressions and the Regex class, and you can validate numeric ranges by converting the input value to an integer or double, ensuring the conversion was valid, and then performing a range check. If your input has an internal checksum, like a credit card number, check that too.</p>
    </li>
    <li>
      <p>
        <strong>Validate address data.</strong> Address data has a fairly rich internal structure; the more of this structure your validation routine understands, the better you'll be able to validate the information. Phone numbers can be validated as a string of ten digits, or a variable number of digits beginning with the character '+' if international numbers are allowed. If needed, the country code can be determined and the exact number format looked up. While phone numbers are written several different ways, a canonical representation can be created by stripping all non-numeric characters before validation, something which will save your users time and frustration as they enter data into your site. Street addresses require a little bit more care; if the input is taken in divided into street, city, etc., each field can have a seperate safe character set defined--city names don't need numbers, for instance. Names are fairly straightforward, but are one of the cases where the "'" character is valid input, and thus they must be handled appropriately (as all input should be) at the database level. Also, don't forget to allow accented characters in names and addresses, depending on your current code page.</p>
    </li>
    <li>
      <p>
        <strong>Validate reference data.</strong> Data that refers to other things can go through one final step of validation, namely looking up what it refers to insure that the reference is valid. For instance, postal codes can be validated against a canonical list to ensure correctness, and other aspects of the street address cross-checked with that. In an order management system, item IDs can be checked against a list of valid IDs.</p>
    </li>
  </ol>
  <p>
    <strong>Note:</strong> Validating input does not remove the need to format output, parametrize queries, or otherwise handle user input carefully.</p>
  <h1>Problem Example</h1>
  <p>An order form for a web store has several fields, specifically, a name, address, phone number, item number, and quantity. Each item is simply added to the database with no data validation and all typecasting handled by the database. Typecasting in the database does not prevent SQL injection and has little effect on out of range data. An attacker can perform numerous attacks, from something as benign as filling the database with garbage data to more actively destructive SQL injection and cross-site scripting attacks.</p>
  <h1>Solution Example</h1>
  <p>An ASP.NET application contains an order for for a web store. Each of the forms fields are validated, giving stronger guarantees about the data gathered. The phone number is validated as a string of ten digits (after stripping all non-numeric characters), or a variable number of digits beginning with the character '+' if international numbers are allowed. </p>
  <p>Validating a name, address, and item number can all be a bit more complicated. The first order of business is determining the legal character set for each case. For names, spaces, upper and lower case letters (including the accented forms for your current codepage), and possible numbers and periods are enough. Addresses need to add commas, hyphens, and number signs, at a minimum. Validating item numbers may be as simple as casting to an integer and checking that the result is in the right range, or it may mean a more complicated regular expression that checks for internal formatting in a string. </p>
  <p>The last, optional step of data validation is to ensure that the data refers to a valid things. The data should be validated for format first, especially as further checks may require database queries. Item numbers are an obvious thing to check for existence in the DB, and this would normally happen as part of the stored procedure which creates a new order, but names, addresses, and phone numbers can be similarly checked, some times. For example, if the address field is broken up into components, state or province information, zip/post codes, and city names, at a minimum, can all be validated against existing lists.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-582169001" Content_Hash="-1446662243">
    <Metadata>
      <Id>c368e75b-2f2b-4e2f-8014-693826aadb64</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Support Account Management</Title>
      <Category>Authentication</Category>
      <Phase>Design</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Support Account Management</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Ensure that the code enforce password complexity rules and restricts the number of failed logon attempts. </p>
  <h1>Why</h1>
  <p>Restricting the number of failed login attempts helps to counter the threat of dictionary attacks. </p>
  <h1>When</h1>
  <p>The use of strong passwords, restricted login attempts, and other best practice account management policies can be enforced by Windows security policy if your application uses Windows authentication. Otherwise, the application layer is responsible for this. </p>
  <h1>How</h1>
  <h2>Use Account Lockout Policies for End-User Accounts</h2>
  <p>Disable end-user accounts or write events to a log after a set number of failed logon attempts. If you are using Windows authentication, such as NTLM or the Kerberos protocol, these policies can be configured and applied automatically by the operating system. With Forms authentication, these policies are the responsibility of the application and must be incorporated into the application design.</p>
  <p>Be careful that account lockout policies cannot be abused in denial of service attacks. For example, well known default service accounts such as IUSR_MACHINENAME should be replaced by custom account names to prevent an attacker who obtains the Internet Information Services (IIS) Web server name from locking out this critical account.</p>
  <h2>Be Able to Disable Accounts</h2>
  <p>If the system is compromised, being able to deliberately invalidate credentials or disable accounts can prevent additional attacks.</p>
  <p>The use of strong passwords, restricted login attempts, and other best practice account management policies can be enforced by Windows security policy if your application uses Windows authentication. Otherwise, the application layer is responsible for this. Review the following aspects of the account management of your application: </p>
  <ul>
    <li>
      <strong>Does your application enforce strong passwords?</strong>
      <p>For example, do your ASP.NET Web pages use regular expressions to verify password complexity rules?&amp;nbsp;</p>
    </li>
    <li>
      <strong>Do you restrict the number of failed login attempts?</strong>
      <p>Doing so can help counter the threat of dictionary attacks. </p>
    </li>
    <li>
      <strong>Do you reveal too much information in the event of failure?</strong>
      <p>Make sure you do not display messages such as "Incorrect password" because this tells malicious users that the user name is correct. This allows them to focus their efforts on cracking passwords. </p>
    </li>
    <li>
      <strong>Do you enforce a periodic change of passwords?</strong>
      <p>This is recommended because otherwise there is a high probability that a user will not change his or her password, which makes it more vulnerable. </p>
    </li>
    <li>
      <strong>Can you quickly disable accounts in the event of compromise?</strong>
      <p>If an account is compromised, can you easily disable the account to prevent the attacker from continuing to use the account? </p>
    </li>
    <li>
      <strong>Does your application record login attempts?</strong>
      <p>Recording failed login attempts is an effective way to detect an attacker who is attempting to break in. </p>
    </li>
  </ul>
  <h1>Additional Resources</h1>
  <ul>
    <li>Design Guidelines for Secure Web Applications <a href="http://msdn2.microsoft.com/en-us/library/aa302420.aspx">http://msdn2.microsoft.com/en-us/library/aa302420.aspx</a></li>
    <li>Architecture and Design Review for Security <a href="http://msdn2.microsoft.com/en-us/library/aa302420.aspx">http://msdn2.microsoft.com/en-us/library/aa302420.aspx</a></li>
    <li>Securing Your ASP.NET Application and Web Services <a href="http://msdn2.microsoft.com/en-us/library/aa302435.aspx">http://msdn2.microsoft.com/en-us/library/aa302435.aspx</a></li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="256239718" Content_Hash="-568755984">
    <Metadata>
      <Id>c44d95ec-185a-4d3f-812b-4d3da3eb82a4</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Use SSL Between the Web Browser And Web Server When Pages Need to Be Encrypted</Title>
      <Category>Communication Security</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Use SSL Between the Web Browser And Web Server When Pages Need to Be Encrypted</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Use SSL as an encrypted communication channel to protect data sent between servers and web browsers. SSL can be used to help protect communication by encrypting traffic such as account information, billing data, etc.&amp;nbsp;&amp;nbsp; </p>
  <h1>Why</h1>
  <p>If sensitive data is sent between client and server unprotected it may be stolen or modified.&amp;nbsp; SSL can be used to help protect communication between client and server by encrypting network traffic.&amp;nbsp; Encryption will protect against eavesdropping (theft) but an attacker may still blindly modify the data for malicious purposes.&amp;nbsp; Use integrity checking (HMAC) to ensure the data has not been modified.</p>
  <h1>When</h1>
  <p>Use&amp;nbsp;SSL for communication between web browser and web server, when page content&amp;nbsp;needs to be encrypted on the network and the&amp;nbsp;identity&amp;nbsp;of the server needs to be guaranteed. </p>
  <p>
    <strong>Note</strong>: SSL does carry a significant performance penalty in terms of latency that is introduced due to encryption/decryption of pages, so it is important to optimize the number of pages that use SSL. Please see "Guideline: Performance:Use SSL Only for Pages That Require It" for more information.</p>
  <h1>How</h1>
  <p>Use SSL to create a secure encrypted communication channel between browser clients and Web server.</p>
  <p>To use SSL:</p>
  <p>&amp;nbsp;&amp;nbsp; 1. Install a server certificate on the Web server.<br />&amp;nbsp;&amp;nbsp; 2. Install the root certificate authority (CA) certificate from the same authority into the local computer's Trusted Root Certification Authorities certificate store.<br />&amp;nbsp;&amp;nbsp; 3. Use IIS to configure the server to force the use of encryption while accessing Web pages.<br />&amp;nbsp;&amp;nbsp; 4. Design pages with SSL in mind to minimize performance overhead. Optimize pages that use SSL by including less text and simple graphics and partition&amp;nbsp;the site and ensure that only those pages than contain sensitive data use SSL.&amp;nbsp;</p>
  <h1>Problem Example</h1>
  <p>An ASP.NET application allows users to login and maintain their contacts in an online database that is accesible via a web browser. The login&amp;nbsp;credentials are sent in plain text, which allows someone on the network to modify&amp;nbsp;the&amp;nbsp;data sent between&amp;nbsp;a browser and a server or view the contents. The lack of integrity and privacy means that the identity of the user and the identity of the web&amp;nbsp;entity serving out the pages can not be verified.&amp;nbsp;&amp;nbsp;&amp;nbsp;</p>
  <h1>Solution Example</h1>
  <p>An ASP.NET application allows users to login and maintain their contacts in an online database that is accesible via a web browser. When the application is deployed, an SSL certificate is installed on the Web Server. The server is then setup to force users to use encryption while visiting pages containing sensitive information.</p>
  <h1>Additional Resources&amp;nbsp;</h1>
  <ul>
    <li>How To: Use SSL to Secure Communication with SQL Server&amp;nbsp;<a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnnetsec/html/SecNetHT19.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnnetsec/html/SecNetHT19.asp</a></li>
    <li>Using Secure Sockets Layer <a href="http://msdn2.microsoft.com/en-us/library/ds8bxk2a.aspx">http://msdn2.microsoft.com/en-us/library/ds8bxk2a.aspx</a></li>
    <li>Internet Protocol Version 6 <a href="http://msdn2.microsoft.com/en-us/library/3x7ak53z(VS.80).aspx">http://msdn2.microsoft.com/en-us/library/3x7ak53z(VS.80).aspx</a></li>
  </ul>
  <ul>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="918187836" Content_Hash="-1987412892">
    <Metadata>
      <Id>c463b66b-1319-48c7-9f96-51f1254b4d93</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Use SSL When Transmitting Credentials</Title>
      <Category>Authentication</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Use SSL When Transmitting Credentials</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Use Secure Sockets Layer (SSL) to protect the authentication credentials passed between browser and server.</p>
  <h1>Why</h1>
  <p>Using SSL prevents the credentials from being sniffed or tampered with as they are transmitted over the network. If SSL is not used, user credentials may be compromised by attacks such as a Network Credential Sniffing Attack or a Phishing Attack. Additionally, use the Protect Session Cookies guideline to minimize the risk of exposing your application's session cookies to an attacker.</p>
  <h1>When</h1>
  <p>If your application accepts form-based authentication credentials from users.</p>
  <h1>How</h1>
  <p>Using Secure Socket Layer (SSL) over HTTP requires the following steps:</p>
  <ol>
    <li>
      <p>
        <strong>Create a certificate request.</strong> Using the IIS management console, generate an SSL certificate request. This request is then sent to a Certification Authority to be signed.&amp;nbsp;</p>
      <ol>
      </ol>
    </li>
    <li>
      <p>
        <strong>Present the request to a Certification Authority (CA).</strong> If all conditions for obtaining an SSL certificate are met, the CA will produce a new SSL certificate based on the certificate request. Because the requirements for obtaining an SSL certificate depend on the Certification Authority, consult with the Certification Authority in regards to the administrative steps necessary for obtaining such certificate.</p>
    </li>
    <li>
      <p>
        <strong>Install the certificate.</strong>&amp;nbsp;</p>
      <ol>
      </ol>
    </li>
    <li>
      <strong>Ensure credentials are sent over SSL. </strong>Place the authentication portion of your application on a dedicated subdomain. Configure the server to accept only HTTPS traffic for the authentication subdomain. Ensure that form posts containing credentials are sent over HTTPS.&amp;nbsp;</li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following snippet is part of an application's web.config. The application uses form based authentication and has configured its &lt;forms&gt; element accordingly. Unfortunately, the &lt;forms&gt; element does not have the requireSSL attribute set to true. Therefore the application fails to enforce the use of SSL when performing form-based authentication.</p>
  <pre>&lt;!-- The forms element does not have a requireSSL attribute --&gt;<br />&lt;forms loginUrl="Secure/Login.aspx"<br />       protection="All"<br />       timeout="00:30:00" <br />       slidingExpiration="true"<br />       name="MyApp"<br />       path="/Secure"<br /> /&gt;</pre>
  <h1>Solution Example</h1>
  <p>The following snippet is part of an application's web.config. The application uses form based authentication and has configured its &lt;forms&gt; element accordingly. Because the &lt;forms&gt; element has the requireSSL attribute set to true, all form-based authentication will be performed over an HTTPS connection.</p>
  <pre>&lt;!-- The forms element has the requireSSL attribute set to true --&gt;<br />&lt;forms loginUrl="Secure/Login.aspx"<br />       protection="All"<br /><strong>       requireSSL="true"<br /></strong>       timeout="00:30:00"<br />       slidingExpiration="true"<br />       name="MyApp"<br />       path="/Secure"<br /> /&gt;</pre>
  <ul>
  </ul>
  <ul>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1317913049" Content_Hash="-1014565994">
    <Metadata>
      <Id>c6b2d31d-be63-46d7-ad00-f4ade5a0be4b</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Do Not Echo Untrusted Data Back to the User</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Do Not Echo Untrusted Data Back to the User</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Do not echo input back to the user without first validating and/or encoding the data.&amp;nbsp; Data which can be modified by a user must be treated as untrusted data, regardless of whether or not the user is expected to modify it during normal application use. </p>
  <h1>Why</h1>
  <p>Echoing input directly back to the user makes your application susceptible to malicious input attacks, such as cross-site scripting.&amp;nbsp; If a malicious user can trick someone else into submitting dangerous input in such a way that it will be returned to the victim, or cause the site to store the malicious input they give it so it will be returned to other users, they can exploit vulnerabilities of this class.&amp;nbsp; What constitutes bad input varies widely depending on the system in question.&amp;nbsp; On the web, it normally means some kind of javascript. </p>
  <h1>When</h1>
  <p>Applications should never echo untrusted or user modifiable data back to the user without appropriate encoding. </p>
  <h1>How</h1>
  <p>If you write output that includes user input or data from a shared database or a local file that you do not trust, encode it.&amp;nbsp; Echoing input directly back to the user makes your application vulnerable to cross-site scripting attacks, among other problems.&amp;nbsp; Encoding the data ensures that it is treated as literal text and not as script.&amp;nbsp; ASP.NET's Server.HtmlEncode function is often used to protect against cross-site scripting attacks. However, this function only encodes &lt;&gt;"&amp; characters. This is not sufficient to protect against all possible attacks. For instance, the following ASP.NET code would be vulnerable. </p>
  <pre>&lt;img id='img&lt;%=Server.HtmlEncode(Request.QueryString["userId"]) %&gt;'&amp;nbsp;&amp;nbsp; src='/image.gif' /&gt;</pre>
  <p>An attacker could inject client-side script here by setting <strong>userId </strong>to </p>
  <pre>' onload=alert('xss') alt='</pre>
  <p>The safest solution is to encode all non-alphanumeric characters. Only this type of whitelist solution will catch all possible XSS attacks, regardless of context.&amp;nbsp; This&amp;nbsp;requires more overhead in terms of processing time and size of the resulting HTML, but it is the safest encoding mechanism for all HTML contexts:</p>
  <pre>public static string HtmlEncode(string x)<br />{<br />   if (x == null)<br />   {<br />   &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;return x;<br />   }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;return Regex.Replace(x, "[^a-zA-Z0-9]+", new MatchEvaluator(WebUtility.EncodeMatch));<br />}</pre>
  <p>This is also the approach that the Microsoft Anti-Cross Site Scripting Library&amp;nbsp;takes.&amp;nbsp; If you are using the Anti-Cross Site Scripting Library, you can use the <strong>Microsoft.Security.ApplicationAntiXSSLibrary.HtmlEncode</strong> method.&amp;nbsp; Similarly, if you write URLs that might contain unsafe characters because they have been constructed from input data or data from a shared database, use <strong>Microsoft.Security.ApplicationAntiXSSLibrary.UrlEncode</strong> to make them safe.&amp;nbsp; </p>
  <p>
    <strong>Note</strong> &amp;nbsp; &amp;nbsp; Make sure that you encode data at the last possible opportunity before the data is returned to the client.&amp;nbsp; If you encode any earlier than this, you may not know the exact context that the data will be used in, and hence the format you need to encode into.&amp;nbsp; Also, early encoding of some data can result in double encoding problems. </p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="592038925" Content_Hash="-2054419048">
    <Metadata>
      <Id>cd4cadd9-3c87-410c-a504-68b71ba8b11b</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Validate Input from All Sources</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Design</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Validate Input from All Sources</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>1</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Treat input from all external sources as untrusted and apply input validation techniques.</p>
  <h1>Why</h1>
  <p>Input that is not validated can lead to cross-site scripting, SQL injection, directory traversals, and other vulnerabilities that would allow an attacker to gain unauthorized access to sensitive data or otherwise compromise an application.</p>
  <h1>When</h1>
  <p>Treat all input as untrusted. If you have established trust boundaries for your application, validate data every time it crosses a trust boundary.</p>
  <h1>How</h1>
  <p>An application can take input via various ways: file system, other software running on the server, etc. Use the following steps to establish a validation strategy:</p>
  <ol>
    <li>
      <p>
        <strong>Identify all sources of input:</strong> Establish your application's trust boundary. The general notion is that all input not generated by your application is untrusted. Enumerate all possible sources of input and make note of the expected input from these sources. An application can have various sources of input. Each of these sources is an entry point to your application and can potentially be used to break your application's security model. Place a content specific validator at each entry point.</p>
      <p>Potential sources of input in a web application typically include:</p>
      <ul>
        <li>URL based parameters </li>
        <li>Form based parameters </li>
        <li>Hidden fields </li>
        <li>Cookies </li>
        <li>HTTP headers </li>
        <li>Data stored on the local file system </li>
        <li>Database </li>
        <li>Other related services</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Understand the input that your application can handle and process:</strong> Understand the specifics about your application's input. After identifying the different entry points, define the format and type of input that will be provided through each entry point. Build a validator for every format and type of expected input.</p>
    </li>
    <li>
      <p>
        <strong>Create a set of validators:</strong> Centralize your application's validators as it helps strengthen the code by limiting the amount of scattered validation code throughout your application. Place the set of validators on your application's trust boundary. Your application should accept input from the outside world only through its set of validators.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>In the following code, a page accepts a query string parameter called <strong>isbn</strong>. The value of this variable is used to look up a book in the database using an unmanaged middle-layer.</p>
  <pre>&lt;script language="C#" runat="server"&gt;<br />    protected void Page_Load(object sender, EventArgs e)<br />    {<br />        String strIsbn = this.Request.QueryString["isbn"];<br />        //lookup isbn in a database using an<br />        //unamanged middle layer<br />    }<br />&lt;/script&gt;</pre>
  <p>In this example, the middle layer may be prone to malicious attacks as the value of ISBN is not validated. The length of the string is not limited, which could lead to a buffer overflow in the unmanaged middle layer, and it may not be in the correct format, which could cause a middle layer string parser to crash, allow for format string attacks, SQL injection, or a host of other issues.</p>
  <h1>Solution Example</h1>
  <p>In the following code, a page accepts a query string parameter called isbn. The value of this variable is used to look up a book in the database using an unmanaged middle layer. The code uses regular expressions to validate the query string string value. This ensures that the value supplied by the client is in the correct format by checking the length of the string and the characters used.</p>
  <pre>&lt;script language="C#" runat="server"&gt;<br />    protected void Page_Load(object sender, EventArgs e)<br />    {<br />        String strIsbn = this.Request.QueryString["isbn"];<br />        if (Regex.IsMatch((strIsbn), @"(?=.{13}$)\d{1,5}([- ])\d{1,7}\1\d{1,6}\1(\d|X)$"))<br />        {<br />            //lookup isbn in a database using an<br />            //unamanged middle layer<br />        }<br />        else<br />        {<br />            //display error<br />        }<br />    }<br />&lt;/script&gt;</pre>
  <ul>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1604014246" Content_Hash="1743858588">
    <Metadata>
      <Id>cdddefd7-2197-48f1-b21e-20c7731c8df2</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Force Re-authentication When Executing Critical Functionality</Title>
      <Category>Authentication</Category>
      <Phase>Implementation</Phase>
      <Technology>Java</Technology>
      <Type>Guideline</Type>
      <DirectLink>Force Re-authentication When Executing Critical Functionality</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Force the user to re-authenticate when executing security-critical functionality including, but not limited to, change of password, account modifications and critical transactions.</p>
  <h1>Why</h1>
  <p>Forcing the user to re-authenticate verifies the user's decision to execute the given functionality and preserves the application's integrity in the event that a user's account has been compromised via session hijacking.</p>
  <h1>When</h1>
  <p>Force re-authentication prior to executing security-critical functionality.</p>
  <h1>How</h1>
  <p>Follow these steps when forcing re-authentication:</p>
  <ol>
    <li>
      <p>
        <strong>Identify critical functionality.</strong> Evaluate your application's design and requirements and determine what parts and resources of your application are very important to your organization's business model or your application's security architecture. This could include activities such as financial transactions or resetting user passwords.</p>
    </li>
    <li>
      <p>
        <strong>Adopt re-authentication mechanism.</strong> Establish a mechanism that requires the user to verify their authenticity:</p>
      <ul>
        <li>
          <strong>Current password.</strong> The user uses their current password to confirm the identity. This technique ensures that the given user is aware of the action to be performed and holds responsibility for executing it. </li>
        <li>
          <strong>CAPTCHA.</strong> CAPTCHA are mechanisms designed to ensure that a human, not an automated script, is using the system. Using a CAPTCHA should be seen as a way of augmenting a password in this kind of situation, not a way of replacing it. Many CAPTCHA systems embed distorted letters or numbers into displayed images which the user must enter. There are a number of problems with many CAPTCHA systems, so they should not be relied on too heavily. First, many graphical CAPTCHAs can be trivially broken by optical character recognition systems, and ensuring that a CAPTCHA is sufficiently strong to be useful without having too high of a failure rate for real users is difficult. If CAPTCHAs are reused, the attacker can simply record the session IDs of CAPTCHAs with known values and replay them. CAPTCHAs can also be broken by using a man-in-the-middle technique where the image is saved and forwarded to another site controlled by the attacker. An unsuspecting user of that site solves the CAPTCHA and the attacker forwards the answer to the victim site. CAPTCHAs also create accessibility problems for users, as blind and sometimes even color-blind individuals can find them impossible. If you choose to implement a CAPTCHA, be aware of the trade-offs involved and ensure that the system you use is appropriately protected against the attacks you expect to see.</li>
        <li>
          <strong>2nd Factor.</strong> If your application supports a second factor of authentication such as a token, this could play a role in the re-authentication scheme.</li>
      </ul>
    </li>
    <li>
      <strong>Enforce the re-authentication mechanism.</strong> Once the critical functionality is identified and the re-authentication mechanism is established, enforce the re-authentication mechanism before all security-critical actions.</li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code allows a user to change their credentials. Unfortunately, the code enters the new credentials into the credentials repository without verifying that it is the actual user changing the credentials.</p>
  <pre>public boolean changePassword(String user, char[] newPass)<br />{<br />       // The application fails to re-authenticate the user<br />       // Verify that new password meets password requirements<br />       // Update the credential store with the new password<br />}</pre>
  <h1>Solution Example</h1>
  <p>The following code allows a user to change their credentials. Before entering the new credentials into the credentials repository, the code verifies that it is the actual user doing the credentials change.</p>
  <pre>public boolean changePassword(String user, char[] oldPass, char[] newPass)<br />{<br />      // The application forces re-authentication<br />      if(!validateUser(user, oldPass))<br />      {<br />            return false;<br />      }<br />      // Verify that new password meets password requirements<br />      // Update the credential store with the new password<br />}</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>To read more about authentication best practices, see: <a href="http://www.owasp.org/index.php/Guide_to_Authentication">Guide to Authentication</a> available from OWASP. </li>
    <li>For more information on CAPTCHA, see: <a href="http://en.wikipedia.org/wiki/Captcha">CAPTCHA</a> in Wikipedia and the <a href="http://www.captcha.net/">official site</a> for CAPTCHA. </li>
    <li>To learn more about the challenges of implementing CAPTCHA and the approaches to resolve them, see: <a href="http://www.15seconds.com/issue/040202.htm">Fighting Spambots with .NET and AI</a> and <a href="http://www.pcmag.com/article2/0,4149,1306805,00.asp">CAPTCHA-ing the Spammer</a>.</li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1776097046" Content_Hash="-1093170276">
    <Metadata>
      <Id>ce57bd55-7f7b-42b5-b7b0-59db156f2b94</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Use SSL Or IPSec for Secure Communication Between Entities</Title>
      <Category>Communication Security</Category>
      <Phase>Design</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Use SSL Or IPSec for Secure Communication Between Entities</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Use an encrypted communication channel to protect data sent between servers. SSL and IPSec can both be used under different circumstances to protect the communication traffic between servers.&amp;nbsp;&amp;nbsp;</p>
  <h1>Why</h1>
  <p>Servers may not necessarily co-exist in a secure environment. If the communication between&amp;nbsp;two or more servers&amp;nbsp;is not protected, the data sent between them could be compromised via eavesdropping or data manipulation.</p>
  <h1>When</h1>
  <p>If your servers are not inside a physically secure data center where the network eavesdropping threat is considered insignificant. </p>
  <h1>How</h1>
  <p>Determine the level of desired granularity for the given server/application suite. If the protection needs to be applied across all applications, use IPSec. If the protection is granular and only a certain portion of the information exchanged between servers is sensitive use SSL. SSL and IPSec can both be used to help protect communication between servers by encrypting traffic. There are benefits to using a mixed approach consisting of both SSL and IPSec. See the related guidelines for specific details. </p>
  <h1>Additional Resources</h1>
  <ul>
    <li>How To: Use IPSec to Provide Secure Communication Between Two Servers&amp;nbsp;<a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnnetsec/html/SecNetHT18.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnnetsec/html/SecNetHT18.asp</a></li>
    <li>How To: Use SSL to Secure Communication with SQL Server&amp;nbsp;<a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnnetsec/html/SecNetHT19.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnnetsec/html/SecNetHT19.asp</a></li>
    <li>How To: Use IPSec for Filtering Ports and Authentication <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnnetsec/html/HTUseIPSec.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnnetsec/html/HTUseIPSec.asp</a></li>
    <li>How To: Use IPSec Policy to Secure Terminal Services Communications in Windows Server 2003 <a href="http://support.microsoft.com/kb/816521">http://support.microsoft.com/kb/816521</a></li>
    <li>Using Secure Sockets Layer <a href="http://msdn2.microsoft.com/en-us/library/ds8bxk2a.aspx">http://msdn2.microsoft.com/en-us/library/ds8bxk2a.aspx</a></li>
    <li>Internet Protocol Version 6 <a href="http://msdn2.microsoft.com/en-us/library/3x7ak53z(VS.80).aspx">http://msdn2.microsoft.com/en-us/library/3x7ak53z(VS.80).aspx</a></li>
  </ul>
  <ul>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1117185868" Content_Hash="-69504881">
    <Metadata>
      <Id>cfb27b01-2baa-476e-8d80-207548c6facc</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Do Not Rely on Client-Side Validation</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Design</Phase>
      <Technology>Java</Technology>
      <Type>Guideline</Type>
      <DirectLink>Do Not Rely on Client-Side Validation</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Avoid placing the validation procedures only on the client side. All input should be validated server side.</p>
  <h1>Why</h1>
  <p>Client-side validation is executed by the client and can be easily bypassed. Client-side validation is a major design problem when it appears in web applications. It places trust in the browser, an entity that should never be trusted.</p>
  <h1>When</h1>
  <p>If your application accepts input from the client, always validate for length, range and type on the server.</p>
  <h1>How</h1>
  <p>Client-side validation should only be used to improve user experience, never for security purposes. A client-side input validation check can improve application performance by catching malformed input on the client and, therefore, saving a roundtrip to the server. However, client side validation can be easily bypassed and should never be used for security purposes. Always use server-side validation to protect your application from malicious attacks.</p>
  <p>Use the following steps when developing client side validation: </p>
  <ol>
    <li>
      <p>
        <strong>Never trust the browser.</strong> Because the browser is running on the user's machine, it can be fully controlled by the user. Therefore, any client-side validation code can be controlled and bypassed by an attacker.</p>
    </li>
    <li>
      <p>
        <strong>Use JavaScript only to enhance your pages.</strong> JavaScript is useful for enhancing your application's presentation. However, it has no mechanism to protect the integrity of its code. Do not rely on JavaScript to enforce security decisions. </p>
    </li>
    <li>
      <p>
        <strong>Place a server-side validator for all input. </strong>Input validation should be executed on the server side. Use the following steps to properly set the validation routines: </p>
      <ul>
        <li>
          <p>
            <strong>Identify input.</strong> Determine the data that is to be passed from the client to your application. Input can take the following forms on the client-side:</p>
          <ul>
            <li>URL-based parameters </li>
            <li>Form-based parameters </li>
            <li>Hidden fields </li>
            <li>Cookies</li>
          </ul>
        </li>
        <li>
          <p>
            <strong>Understand the input.</strong> Understand the use and constraints associated with each input. Be clear how each input is used. Define the format and type of each input. Build a server-side validator for each format and type of expected input.</p>
        </li>
        <li>
          <p>
            <strong>Create a set of validators.</strong> Build a validator for each type of input. Place the set of validators on the server-side of your application. If there are validators on the client-side, make sure the same validators are implemented on the server-side as well.</p>
        </li>
      </ul>
      <p>Once developed, it is important to place the validation routines at your application's trust boundary. Because your application's trust boundary extends only to your application's process space, the user's browser should not be considered&amp;nbsp;a part of your application's trust boundary.</p>
      <p>Example of correctly set validation:</p>
      <blockquote>
        <pre>&lt;%-- Filename: sample.jsp --%&gt;<br />&lt;%boolean validateJSP(String input)<br />{<br />      // Validation routine<br />}<br />String idx = request.getParameter("index");<br />if(idx != null &amp;&amp; validateJSP(idx))<br />{<br />      ...<br />}<br />else<br />{<br />      //Display a generic error message (e.g. "Invalid query.")<br />}<br />%&gt;<br /> ...<br />&lt;form method="post" action="sample.jsp"&gt;<br />  &lt;input name="index" type="text" size="50"&gt;<br />  &lt;input name="submit" value="submit" type="submit"&gt;<br />&lt;/form&gt;</pre>
      </blockquote>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code produces a data analysis based on a financial index. Unfortunately, the user's input is validated only on the client side via a JavaScript routine. Since there is no validation on the server, an attacker can bypass all validation and exploit cross-site scripting and SQL injection vulnerabilities.</p>
  <blockquote>
    <pre>&lt;!-- Filename: idv01.html --&gt;<br />&lt;html&gt;<br />  &lt;head&gt;<br />    &lt;!-- The page uses client-side validation only --&gt;<br />    &lt;script language="JavaScript"&gt;<br />&lt;!--function validate()<br />{<br />   var idx = document.forms[0].elements[0].value;<br />   var regex = new RegExp("[a-zA-Z0-9]+");<br />   var match = regex.exec(idx);<br />   var ret = false;<br />    if(idx.length &lt; 9 &amp;&amp; match != null)<br />    {<br />      ret = true;<br />    }<br />   else<br />   {<br />      alert("Invalid index!");<br />   }<br />    return ret;<br />}<br />// --&gt;<br />    &lt;/script&gt;<br />    &lt;title&gt;Query for index&lt;/title&gt;<br />  &lt;/head&gt;<br />  &lt;body&gt;<br />    &lt;!-- The application relies on client side validation --&gt;<br />    &lt;form method="post" action="/myapp/aggregate" onsubmit="return validate()"&gt;<br />      index:&amp;nbsp;&lt;input name="index" type="text" size="10"&gt;<br />      &lt;input name="submit" value="query" type="submit"&gt;<br />    &lt;/form&gt;<br />  &lt;/body&gt;<br />&lt;/html&gt;<br />// Filename: /myapp/aggregate<br />import java.io.*;<br />import java.util.*;<br />import java.lang.*;<br />import javax.servlet.*;<br />import javax.servlet.http.*;<br />import java.util.regex.*;<br /> public final class DataAggregator extends HttpServlet<br />{<br />      public void doGet(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter("index");<br />             try<br />            {<br />                  String retString;<br />                  retString = "The queried index \"";<br />                  retString += encodeHtml(searchTerm);<br />                  retString += "\" produced the following results:&lt;br&gt; ";<br />                  out.println(retString);<br />                   // The application does not provide a server-side validation<br />                  aggregateData(out, searchTerm);<br />            }<br />             catch (Exception e)<br />            {<br />                  // Add the appropriate logging and exception handling<br />                  // mechanisms. Consult the Exception Handling and<br />                  // Logging sections<br />                  out.println("We cannot handle your request at the moment."<br />                           +  "Please try again later.");<br />            }<br />             out.flush();<br />            out.close();<br />      }<br />}</pre>
  </blockquote>
  <h1>Solution Example</h1>
  <p>The following code produces a data analysis based on a financial index. Because the application uses server-side validation, it is impossible for an attacker to bypass the validation routines and exploit any cross-site scripting and/or SQL injection vulnerabilities.</p>
  <blockquote>
    <pre>&lt;!-- Filename: idv01.html --&gt;<br />&lt;html&gt;<br />  &lt;head&gt;<br />    &lt;!-- The page uses server-side validation only --&gt;<br />    &lt;title&gt;Query for index&lt;/title&gt;<br />  &lt;/head&gt;<br />  &lt;body&gt;<br />    &lt;!-- The application uses no client-side validation --&gt;<br />    &lt;form method="post" action="/myapp/aggregate"&gt;<br />      index:&amp;nbsp;&lt;input name="index" type="text" size="10"&gt;<br />      &lt;input name="submit" value="query" type="submit"&gt;<br />    &lt;/form&gt;<br />  &lt;/body&gt;<br />&lt;/html&gt;<br />// Filename: /myapp/aggregate<br />import java.io.*;<br />import java.util.*;<br />import java.lang.*;<br />import javax.servlet.*;<br />import javax.servlet.http.*;<br />import java.util.regex.*;<br /> public final class DataAggregator extends HttpServlet<br />{<br />      public void doGet(HttpServletRequest request, HttpServletResponse response)<br />            throws ServletException, IOException<br />      {<br />            PrintWriter out = response.getWriter();<br />            String searchTerm = request.getParameter("index");<br />             try<br />            {<br />                  // The application uses only server-side validation<br />                  if (validateSearchTerm(searchTerm))<br />                  {<br />                        String retString;<br />                        retString = "The queried index \"";<br />                        retString += encodeHtml(searchTerm);<br />                        retString += "\" produced the following results:&lt;br&gt; ";<br />                        out.println(retString);<br />                        aggregateData(out, searchTerm);<br />                  }<br />                  else<br />                  {<br />                        // Add the appropriate logging and exception handling<br />                        // mechanisms. Consult the Exception Handling and<br />                        // Logging sections<br />                        out.println("We cannot handle your request at the moment."<br />                                 +  "Please try again later.");<br />                  }<br />            }<br />            catch (Exception e)<br />            {<br />                  // Add the appropriate logging and exception handling<br />                  // mechanisms. Consult the Exception Handling and<br />                  // Logging sections<br />                  out.println("We cannot handle your request at the moment."<br />                           +  "Please try again later.");<br />            }<br />             out.flush();<br />             out.close();<br />      }<br />       boolean validateSearchTerm(String input)<br />      {<br />            String goodPattern = "(\\w|\\d)+";<br />            int goodLength = 8;<br />             if (input == null)<br />            {<br />                  return false;<br />            }<br />             if(input.length() &gt; goodLength)<br />            {<br />                  return false;<br />            }<br />                        Pattern p = Pattern.compile(goodPattern);<br />            Matcher m = p.matcher(input);<br />                        if(!m.matches())<br />            {<br />                  return false;<br />            }<br />                        return true;<br />      }<br />}</pre>
  </blockquote>
  <ul>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1416277150" Content_Hash="-298631181">
    <Metadata>
      <Id>dbdd2fbe-4ecb-4bf5-9272-5f244ea26663</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Encrypt Communication Links</Title>
      <Category>Communication Security</Category>
      <Phase>Implementation</Phase>
      <Technology>Java</Technology>
      <Type>Guideline</Type>
      <DirectLink>Encrypt Communication Links</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Encrypt the communication channels when interacting with other software across the network.</p>
  <h1>Why</h1>
  <p>Encrypting the communication links allows the application to preserve the confidentiality and integrity of the transmitted data. </p>
  <h1>When</h1>
  <p>If sensitive data must be transmitted between two hosts, either&amp;nbsp;between servers or between application and server, then encrypt the communication links.</p>
  <h1>How</h1>
  <p>To encrypt the communication links:</p>
  <ol>
    <li>
      <p>
        <strong>Identify the connections used for transmitting sensitive data. </strong>Enumerate all connections between the different servers with other servers or with the application. Identify the sensitive data that is sent over the network and the respective connections that are used for such communication.</p>
    </li>
    <li>
      <p>
        <strong>Choose the appropriate encryption mechanism. </strong>Depending on the infrastructure, you may consider using IPSec or TLS/SSL.</p>
      <ul>
        <li>
          <strong>IPSec:</strong> IPSec is used when the encryption needs to be applied across all involved parties. Since IPSec is designed to secure connections between static hosts that are "always on," use IPSec to secure the network connections between your application's servers. Due to its nature, IPSec requires low level support; therefore, your application would need support from the operating system or a JNI component to manage it. </li>
        <li>
          <strong>TLS/SSL:</strong> TLS/SSL provides a granular protection which&amp;nbsp;allows only&amp;nbsp;the traffic containing sensitive data to be encrypted. Because TLS/SSL has a certificate based design, it allows the protection of data between mobile hosts. Use TLS/SSL to secure the communication channel between your application and its users.<br /><br />While Java provides APIs for handling SSL encrypted traffic, it is recommended to follow the manuals associated with the&amp;nbsp;third party software that&amp;nbsp;is being used. For example, if your application connects to a database server, follow the database server's manual on setting up the encryption; if your application is web-oriented, follow the web server's documentation on setting up the SSL certificate. If your application uses SSL, ensure that you use SSL 3.0 and disable the cryptographically weak SSL 2.0 protocols.</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Apply the appropriate encryption mechanism. </strong>Apply the encryption mechanism of choice at the appropriate locations in the code. Such locations include all functionality that establishes a connection between your application and another entity.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code establishes a connection between&amp;nbsp;two servers. Unfortunately, the communication is not encrypted; therefore, it is possible for an attacker to eavesdrop on the connection.</p>
  <pre>String remoteHost = "server02.example.com";<br />int remotePort = "1337";<br /><br />Socket sock = new Socket(remoteHost, remotePort);<br />InputStreamReader isr = new InputStreamReader(sock.getInputStream());<br />BufferedReader input = new BufferedReader(isr);<br />PrintWriter output = new PrintWriter(sock.getOutputStream(), true);</pre>
  <h1>Solution Example</h1>
  <p>The following code establishes a connection between&amp;nbsp;two servers. Because the communication is encrypted, the confidentiality of the data in transit is preserved; therefore, it is impossible for an attacker to eavesdrop on the connection.</p>
  <pre>String remoteHost = "server02.example.com";<br />int remotePort = "1337";<br /><br />SSLSocketFactory sslSF = (SSLSocketFactory) SSLSocketFactory.getDefault();<br />SSLSocket sslSock = (SSLSocket) sslSF.createSocket(remoteHost, remotePort);<br /><br />InputStreamReader isr = new InputStreamReader(sslSock.getInputStream());<br />BufferedReader input = new BufferedReader(isr);<br />PrintWriter output = new PrintWriter(sslSocket.getOutputStream(), true);</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information about TLS, see: RFC for <a href="http://www.faqs.org/rfcs/rfc2246.html">Transport Layer Security</a>. </li>
    <li>For more information about Java SSL sockets, see: Documentation for <a href="http://download.oracle.com/javase/1.4.2/docs/api/javax/net/ssl/SSLSocket.html">Class SSLSocket</a> in Java SDK. </li>
    <li>To learn about the JSSE API, see: <a href="http://download.oracle.com/javase/1.4.2/docs/guide/security/jsse/JSSERefGuide.html">Java Secure Socket Extension (JSSE) Reference Guide</a> available from Oracle. </li>
    <li>For a tutorial about using the JSSE API, see: <a href="http://www.javaworld.com/javaworld/jw-05-2001/jw-0511-howto.html">Build secure network applications with SSL and the JSSE API</a>. </li>
    <li>For a quick overview on IPSec, see: A publication on <a href="http://www.digisafe.com/products/pdf/IPSec_Primer.pdf">IPSec Primer</a>.</li>
    <li>For more information about safely configuring SSL, see: <a href="https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet">https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet</a>.</li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1062648365" Content_Hash="2035136502">
    <Metadata>
      <Id>de9d7b57-067f-46c9-9709-aebbb40f69da</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Encrypt the Contents of the Authentication Cookies</Title>
      <Category>Session Management</Category>
      <Phase>Design</Phase>
      <Technology> Any</Technology>
      <Type>Guideline</Type>
      <DirectLink>Encrypt the Contents of the Authentication Cookies</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Cookies should be encrypted and checked for integrity to detect tampering even over an SSL channel because cookies can be stolen through cross-site scripting (XSS) attacks.</p>
  <h1>Why</h1>
  <p>To ensure that cookie contents are not read and not tampered with, because&amp;nbsp;cookies can be stolen, even over a Secure Sockets Layer (SSL) channel using cross-site scripting attacks.</p>
  <h1>When</h1>
  <p>This guideline should be used for all applications that use Forms Authentication should have their cookies encrypted.</p>
  <h1>How</h1>
  <p>Encrypt the cookie contents even if you are using SSL. This prevents an attacker viewing or modifying the cookie if he manages to steal it through an XSS attack. In this event, the attacker could still use the cookie to access your application, but only while the cookie remains valid.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information see, "Chapter 4 - Design Guidelines for Secure Web Applications" at <a href="http://msdn2.microsoft.com/en-us/library/aa302420.aspx">http://msdn2.microsoft.com/en-us/library/aa302420.aspx</a>&amp;nbsp; </li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1892160705" Content_Hash="-1288051384">
    <Metadata>
      <Id>e0cb34c8-d92a-4f52-9fad-38f75c7d5edb</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Use SSL to Protect Session Authentication Cookies</Title>
      <Category>Session Management</Category>
      <Phase>Design</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Use SSL to Protect Session Authentication Cookies</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>You must protect the authentication cookie&amp;nbsp;with SSL. </p>
  <h1>Why</h1>
  <p>To prevent session hijacking and cookie replay attacks, secure the cookie by making sure that it is only passed over SSL connections using the HTTPS protocol. For additional risk mitigation, encrypt the cookie before sending it to the client and limit the period for which the cookie is valid. </p>
  <h1>When</h1>
  <p>When&amp;nbsp;you use Forms authentication, make sure your application encrypts the authentication cookies using the <strong>protection="All"</strong> attribute on the <strong>&lt;forms&gt; </strong>element. This practice is recommended in addition to SSL to mitigate the risk of an XSS attack that manages to steal the authentication cookie of a user.&amp;nbsp; </p>
  <h1>How</h1>
  <p>Do not pass authentication cookies over HTTP connections. Set the secure cookie property within authentication cookies, which instructs browsers to send cookies back to the server only over HTTPS connections. For more information, see Chapter&amp;nbsp;10, "Building Secure ASP.NET Web Pages and Controls."</p>
  <p>Set the secure property by using <strong>requireSSL="true"</strong> on the <strong>&lt;forms&gt;</strong> element as follows:</p>
  <div>
    <div>
    </div>
    <div>
      <pre>&lt;forms loginUrl="Secure\Login.aspx"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; requireSSL="true" . . . /&gt;</pre>
    </div>
  </div>
  <ul>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1469054624" Content_Hash="-897414510">
    <Metadata>
      <Id>e1244c90-1c7c-42ec-8de4-87998a2cd8a9</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Validate Destinations of Redirects And Forwards</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology> Any</Technology>
      <Type>Guideline</Type>
      <DirectLink>Validate Destinations of Redirects And Forwards</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Validate destinations of redirects or forwards.</p>
  <h1>Why</h1>
  <p>If destinations of redirects or forwards are not validated, an attacker may create hyperlinks that appear to point to legitimate sites, but actually point to malicious pages controlled by the attacker. This technique is often used by phishers to trick people into visiting fake sites that steal authentication credentials. In some cases, a user may gain unauthorized access by manipulating redirect or forward parameters, if destinations are not validated.</p>
  <h1>When</h1>
  <p>Use this guideline when writing a web application that uses redirects or forwards. Avoid using redirects or forwards in web applications, if possible.</p>
  <h1>How</h1>
  <p>Perform the following actions to assure validation of redirects and forwards:</p>
  <ol>
    <li>
      <p>
        <strong>Identify redirects and forwards.</strong> Review code to find all redirects and forwards.</p>
    </li>
    <li>
      <p>
        <strong>Map destinations.</strong> Make a list of all destinations for each redirect and forward. Define mapping values for all destinations used by redirects and forwards. A mapping value is a short identifying string that symbolically represents a resource.</p>
    </li>
    <li>
      <p>
        <strong>Define access permissions.</strong> Determine circumstances under which it is acceptable for each user role to access each destination.</p>
    </li>
    <li>
      <p>
        <strong>Validate redirects.</strong> Rewrite redirects and forwards to use mapping values as input to calculate the final destinations of redirects or forwards. Add validation routines to verify that the user has permissions to access the resource, which is the destination of the redirect or forward.</p>
    </li>
  </ol>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information about unvalidated redirects and forwards, please see <a href="http://www.owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards">http://www.owasp.org/index.php/Top_10_2010-A10-Unvalidated_Redirects_and_Forwards</a></li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-133452567" Content_Hash="1746014011">
    <Metadata>
      <Id>e2f1c054-0081-49c8-8555-f15a02a4bb2f</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Encrypt Connection Strings</Title>
      <Category>Data Access</Category>
      <Phase>Deployment</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Encrypt Connection Strings</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Do not store connection strings in plain text. Use a protected&amp;nbsp;configuration provider such as the RSA Protected Configuration Provider or the Windows Data Protection API (DPAPI)&amp;nbsp;to&amp;nbsp;encrypt connection strings before&amp;nbsp;storing them in configuration files. </p>
  <h1>Why</h1>
  <p>Connection strings contain sensitive resource access credentials such as user names, passwords and server names. Connection strings stored in plaintext are dangerous, because an attacker that can compromise a server will be able to read those connection strings. Even if a machine is not compromised, connection strings stored in plain text&amp;nbsp;are accessible to administrators and any other users with sufficient privileges&amp;nbsp;on the host machine and/or Windows domain.&amp;nbsp;</p>
  <h1>When</h1>
  <p>Always encrypt connection strings. The Windows Data Protection API (DPAPI) is the default provider and is&amp;nbsp;an acceptable choice under most circumstances. If&amp;nbsp;an application is deployed&amp;nbsp;within a Web farm environment,&amp;nbsp;the RSA-protected configuration provider is a better choice because it uses asymmetric, public&amp;nbsp;key encryption to encrypt and decrypt data keys that can easily be exported and imported across servers. If neither of these suffice, create a&amp;nbsp;custom provider. </p>
  <h1>How</h1>
  <p>This section describes how to use DPAPI to encrypt connection strings. Please check the related guidelines for more information on using the RSA Protected Configuration Provider.&amp;nbsp;</p>
  <ol>
    <li>
      <p>
        <strong>Choose the appropriate configuration provider.</strong> Under most circumstances DPAPI will suffice, although the RSA protected configuration is the logical choice in web farms where multiple servers are employed. </p>
    </li>
    <li>
      <p>
        <strong>Identify the configuration sections to be encrypted.</strong> Encrypting and decrypting data incurs performance overhead. To keep this overhead to a minimum, encrypt only the sections of the configuration file that store sensitive data.&amp;nbsp; Encrypt the &lt;connectionStrings&gt; element of the Web.config file to protect the database connection string. </p>
    </li>
    <li>
      <p>
        <strong>Choose the machine or user store.</strong> The DataProtectionConfigurationProvider supports machine-level and user-level stores for key storage. The choice of store depends largely on whether or not&amp;nbsp;the application shares a server with other applications and whether or not sensitive data must be kept private for each application.</p>
      <ul>
        <li>
          <p>
            <strong>Machine Store. </strong>By default, the DataProtectionConfigurationProvider is configured to use DPAPI with the machine store. Use machine-level key storage in the following situations:</p>
          <ul>
            <li>The application runs on its own dedicated server with no other applications. </li>
            <li>Multiple applications run on the same server&amp;nbsp;and&amp;nbsp;those applications need to be able to share sensitive information.</li>
          </ul>
          <p>To encrypt the connectionStrings section&amp;nbsp;with the Machine Store, run the following command from a .NET command prompt:</p>
          <pre>   aspnet_regiis -pe "connectionStrings" -app "/MachineDPAPI" -prov "DataProtectionConfigurationProvider" </pre>
        </li>
        <li>
          <p>
            <strong>User Store. </strong>Use user-level key storage if the application runs in a shared hosting environment and the&amp;nbsp;application's sensitive data should&amp;nbsp;not be accessible to other applications on the server. In this situation, each application should run under a separate identity, and the resources for the application—such as files and databases—should be restricted to that identity.</p>
          <p>To encrypt the connectionStrings section&amp;nbsp;with the&amp;nbsp;User Store, run the following command from a .NET command prompt:</p>
          <pre>   aspnet_regiis -pe "connectionStrings" -app "/UserDPAPI" -prov "MyUserDataProtectionConfigurationProvider"</pre>
        </li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Encrypt&amp;nbsp;the configuration file data.</strong>&amp;nbsp;To encrypt the connectionStrings section in Web.config using DPAPI with the Machine Store, run the following command from a .NET command prompt:</p>
      <pre>   aspnet_regiis -pe "connectionStrings" -app "/MachineDPAPI" -prov "DataProtectionConfigurationProvider" </pre>
      <p>The above command with the -app switch assumes that there is an IIS virtual directory called MachineDPAPI. If the Visual Studio .NET Web server is being utilized instead of IIS, use the -pef switch, which&amp;nbsp;specifies the physical directory location of&amp;nbsp;the configuration file.</p>
      <pre>   aspnet_regiis.exe -pef "connectionStrings" C:\Projects\MachineDPAPI -prov "DataProtectionConfigurationProvider"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;</pre>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>A web application is running in&amp;nbsp;a hosted web environment. The application uses an SQL database instance and has sensitive data that should not be accessible to&amp;nbsp;other applications on the same system.&amp;nbsp;The web.config file contains a connectionString section that&amp;nbsp;the application uses to access the SQL database:</p>
  <pre>&lt;connectionStrings&gt;<br />  &lt;add name="MyLocalSQLServer"<br />        connectionString="Initial Catalog=pubs;User Id=sa;Password=asdasd;<br />       data source=localhost;Integrated Security=SSPI;"<br />       providerName="System.Data.SqlClient"/&gt;<br />&lt;/connectionStrings&gt;</pre>
  <p>Unfortunately,&amp;nbsp;anyone capable of reading the web.config file for the application is now able to see the database, the username, and the password for the database instance, and will be able to execute statements with the same privilege level as that of the application.</p>
  <h1>Solution Example</h1>
  <p>A web application is running in&amp;nbsp;a hosted web environment. The application uses an SQL database instance and has sensitive data that should not be accessible to&amp;nbsp;other applications on the same system.&amp;nbsp;The web.config file contains a connectionString section that&amp;nbsp;the application uses to access the SQL database:</p>
  <pre>&lt;connectionStrings&gt;<br />  &lt;add name="MyLocalSQLServer"<br />        connectionString="Initial Catalog=pubs;User Id=sa;Password=asdasd;<br />       data source=localhost;Integrated Security=SSPI;"<br />       providerName="System.Data.SqlClient"/&gt;<br />&lt;/connectionStrings&gt;</pre>
  <p>During deployment the connectionStrings section of web.config as been encrypted with DataProtectionConfigurationProvider and DPAPI. This was accomplished with the following command:</p>
  <pre>   aspnet_regiis -pe "connectionStrings" -app "/UserDPAPI" -prov "MyUserDataProtectionConfigurationProvider"</pre>
  <p>The connection string has been encrypted, which can be verified by looking at the web.config file. There is no need to decrypt the file by hand, since ASP.NET handles this transparently.</p>
  <h1>Additional Resources</h1>
  <ul>
    <li>Windows Data Protection <a href="http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnsecure/html/windataprotection-dpapi.asp">http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dnsecure/html/windataprotection-dpapi.asp</a></li>
    <li>How to use the ASP.NET utility to encrypt credentials and session state connection strings <a href="http://support.microsoft.com/default.aspx?scid=kb;en-us;329290">http://support.microsoft.com/default.aspx?scid=kb;en-us;329290</a></li>
  </ul>
  <ul>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="2019359695" Content_Hash="1463852557">
    <Metadata>
      <Id>e322d018-d2f1-4c5c-9c41-288b4b7155f1</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Use SSL When Transmitting Credentials</Title>
      <Category>Authentication</Category>
      <Phase>Implementation</Phase>
      <Technology>Java</Technology>
      <Type>Guideline</Type>
      <DirectLink>Use SSL When Transmitting Credentials</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Do not send credentials via unencrypted connections. Use SSL when transmitting credentials.</p>
  <h1>Why</h1>
  <p>Using SSL prevents the credentials from being sniffed or tampered with as they are transmitted over the network.</p>
  <h1>When</h1>
  <p>If your application sends credentials on the Internet.</p>
  <h1>How</h1>
  <p>Using Secure Socket Layer (SSL) over HTTP requires the following steps:</p>
  <ol>
    <li>
      <p>
        <strong>Create a certificate request.</strong> Using your hosting server or OpenSSL, generate an SSL certificate request. Example:</p>
      <pre># Generate private key<br />openssl genrsa -des3 -out privkey.pem 2048 <br /># Generate certificate request using private key<br />openssl req -new -key privkey.pem -out cert.csr</pre>
    </li>
    <li>
      <p>
        <strong>Present the request to a Certification Authority (CA).</strong> If all conditions for obtaining an SSL certificate are met, the CA will produce a new SSL certificate based on the certificate request. Because the requirements for obtaining an SSL certificate depend on the Certification Authority, consult with the Certification Authority in regards to the administrative steps necessary for obtaining such certificate.</p>
    </li>
    <li>
      <p>
        <strong>Install the certificate.</strong> Consult with the hosting server's documentation on how to install the SSL certificate.</p>
    </li>
    <li>
      <p>
        <strong>Ensure credentials are sent over SSL.</strong> Place the authentication portion of your application on a dedicated subdomain. Configure the server to accept only HTTPS traffic for the authentication subdomain. Ensure that form posts containing credentials are sent over HTTPS. This is accomplished by using absolute URL paths in the action field. Example:</p>
      <pre>&lt;form method="POST" action="https://login.example.com/myapp/login"&gt;</pre>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>In the following snippet, the credentials are transmitted over unprotected HTTP. This allows an attacker to easily steal credentials from sniffed traffic.</p>
  <pre>&lt;html&gt;<br />  &lt;head&gt;<br />    &lt;title&gt;login form&lt;/title&gt;<br />  &lt;/head&gt;<br />  &lt;body&gt;<br />    &lt;form method="POST" action="http://login.example.com/myapp/login"&gt;<br />    &lt;input type="text" name="user" size=25&gt;&lt;br&gt;<br />    &lt;input type="password" name="pass" size=25&gt;&lt;br&gt;<br />    &lt;input type="submit" name="submit" value="log in"&gt;<br />    &lt;/form&gt;<br />  &lt;/body&gt;<br />&lt;/html&gt;</pre>
  <h1>Solution Example</h1>
  <p>In the following snippet, the credentials are transmitted over HTTPS. This makes it difficult for an attacker to steal credentials from sniffed traffic:</p>
  <pre>&lt;html&gt;<br />  &lt;head&gt;<br />    &lt;title&gt;login form&lt;/title&gt;<br />  &lt;/head&gt;<br />  &lt;body&gt;<br />    &lt;form method="POST" action="https://login.example.com/myapp/login"&gt;<br />    &lt;input type="text" name="user" size=25&gt;&lt;br&gt;<br />    &lt;input type="password" name="pass" size=25&gt;&lt;br&gt;<br />    &lt;input type="submit" name="submit" value="log in"&gt;<br />    &lt;/form&gt;<br />  &lt;/body&gt;<br />&lt;/html&gt;</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information about using SSL in the J2EE, see: <a href="http://www.cs.uccs.edu/~cs301/j2ee/j2eetutorial14/doc/Security6.html">Installing and Configuring SSL Support</a>. </li>
    <li>To learn more about generating certificate requests, see: <a href="http://support.microsoft.com/default.aspx?scid=KB;en-us;q228821">Generating a Certificate Request File Using the Certificate Wizard in IIS 5.0</a>. </li>
    <li>To learn more about creating SSL certificates, see: <a href="http://www.openssl.org/docs/HOWTO/certificates.txt">OpenSSL HOWTO certificates</a>. </li>
    <li>For more information about using SSL with Tomcat, see: <a href="http://tomcat.apache.org/tomcat-4.0-doc/ssl-howto.html">SSL Configuration HOW-TO</a>. </li>
    <li>For more information about safely configuring SSL, see: <a href="https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet">https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet</a>.</li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-544731038" Content_Hash="100732046">
    <Metadata>
      <Id>e800cb23-11ca-4cdf-babb-19d8f8c0e955</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Partition the Application Between Public And Private Domains</Title>
      <Category>Authentication</Category>
      <Phase>Deployment</Phase>
      <Technology>Java</Technology>
      <Type>Guideline</Type>
      <DirectLink>Partition the Application Between Public And Private Domains</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Define a boundary between public and restricted content.</p>
  <h1>Why</h1>
  <p>Defining a boundary between public and restricted content helps establish the check points&amp;nbsp;where access will be allowed&amp;nbsp;to the restricted content.</p>
  <h1>When</h1>
  <p>If your application has access control that&amp;nbsp;restricts certain users to specific resources, then define a boundary between those resources. For instance, anonymous users are restricted&amp;nbsp;to one part of the application, while&amp;nbsp;authenticated users can access both parts.</p>
  <h1>How</h1>
  <p>Defining the boundary requires:</p>
  <ol>
    <li>
      <p>
        <strong>Determine roles. </strong>Define the various types of users and their rights. Build a security policy for the restricted content and base the user groups' privileges around it. </p>
    </li>
    <li>
      <p>
        <strong>Define the boundary. </strong>Structure the content according to access and logical orders. Try to use a modular approach when establishing the boundary. </p>
    </li>
    <li>
      <p>
        <strong>Separate on disk. </strong>Once the boundaries have been established, reflect these boundaries onto the local file system. Separate the restricted content from the public content on disk. </p>
    </li>
    <li>
      <p>
        <strong>Set proper permissions. </strong>Set proper permissions to the restricted content. Dedicate a special directory for the restricted content and require valid access before accessing content within this directory. These permissions can be enforced at the application, server and operating system levels, depending on the environment in use.</p>
    </li>
  </ol>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1972133755" Content_Hash="-679210286">
    <Metadata>
      <Id>e992dbe8-7076-4983-945f-67f4bb91c47e</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Configure Appropriate ACLs on Web Site Files</Title>
      <Category>Authorization</Category>
      <Phase>Deployment</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Configure Appropriate ACLs on Web Site Files</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Configure access control lists (ACLs) on your Web site files so that IIS and ASP.NET file authorization appropriately control access to these files.&amp;nbsp;&amp;nbsp; </p>
  <h1>Why</h1>
  <p>Failure to apply proper&amp;nbsp;access control restrictions on files&amp;nbsp;may allow users&amp;nbsp;to read, edit,&amp;nbsp;or remove files they should not be able to.&amp;nbsp;ACLs are an important layer of defense against unauthorized file&amp;nbsp;access.&amp;nbsp;</p>
  <h1>When</h1>
  <p>All ASP.NET applications can benefit from appropriate file ACLs.&amp;nbsp;ACLs should be established&amp;nbsp;in the&amp;nbsp;design&amp;nbsp;phase, prior to&amp;nbsp;implementing the application.&amp;nbsp;The&amp;nbsp;ACLs&amp;nbsp;are applied at deploy time.&amp;nbsp;</p>
  <h1>How</h1>
  <p>You need to configure the right access control lists (ACLs) for the right identities on your Web site files so that IIS and also ASP.NET file authorization control access to these files appropriately. You need to grant access to the following identities: </p>
  <ol>
    <li>
      <p>
        <strong>Your Web application identity.</strong> If you are using a custom service account to run your ASP.NET application, you can grant the appropriate permissions to the IIS metabase and to the file system by running Aspnet_regiis.exe with the-<strong>ga</strong> switch. </p>
    </li>
    <li>
      <p>
        <strong>Your application's users.</strong> ASP.NET file authorization performs access checks for file types mapped by IIS to the ASP.NET ISAPI extension (Aspnet_isapi.dll). If you are using Windows authentication, the authenticated user's Windows access token (which may be IUSR_MACHINE for anonymous users) is checked against the ACL attached to the requested ASP.NET file. If you are using forms authentication, access is checked against IUSR_MACHINE.</p>
    </li>
  </ol>
  <p>Use the following steps:</p>
  <ol>
    <li>
      <p>
        <strong>Determine the users/roles that need to access the application's resources.</strong> Create a list of all roles in the application.&amp;nbsp;The Web application's process&amp;nbsp;identity and the application's users are the entities that&amp;nbsp;require access to application resources. If&amp;nbsp;a custom service account is being utilised to run&amp;nbsp;the ASP.NET application be sure to list it as well, it will need the appropriate permissions to the IIS metabase and the file system.&amp;nbsp;</p>
    </li>
    <li>
      <p>
        <strong>Evaluate the level of access each user/role should have to use the application resources.</strong> It is important to assign the minimum privilege level for all entities that access resources.&amp;nbsp; To do this create a table that contains roles on one axis and resources on another.&amp;nbsp; Within the&amp;nbsp;matrix cells describe the level of access each role will need for each resource (eg. Read Only, Read/Write, Full Access, etc.).&amp;nbsp; This is commonly called a subject/object matrix:</p>
      <p />
      <table>
        <tbody>
          <tr>
            <td>
            </td>
            <td>
              <strong>Objects</strong>
            </td>
            <td>
            </td>
          </tr>
          <tr>
            <td>
              <strong>Subjects</strong>
            </td>
            <td>
              <strong>User Administration</strong>
            </td>
            <td>
              <strong>Page Content</strong>
            </td>
          </tr>
          <tr>
            <td>
              <strong>Admin</strong>
            </td>
            <td>Create, Delete, Modify</td>
            <td>
            </td>
          </tr>
          <tr>
            <td>
              <strong>Content Creator</strong>
            </td>
            <td>
            </td>
            <td>Create, Delete, Modify, Read</td>
          </tr>
          <tr>
            <td>
              <strong>Reader</strong>
            </td>
            <td>
            </td>
            <td>Read</td>
          </tr>
          <tr>
            <td>
              <strong>Anonymous</strong>
            </td>
            <td>
            </td>
            <td>Read</td>
          </tr>
        </tbody>
      </table>
      <p />
    </li>
    <li>
      <p>
        <strong>Apply ACLs to enforce these restrictions.</strong> To assign ASP.NET permissions to the&amp;nbsp;application's account, run the following command:</p>
      <pre>aspnet_regiis -ga MachineName\AccountName </pre>
      <p>Where MachineName is the name of your server or the domain name if you are using a domain account, and AccountName is the name of your custom account. When you run Aspnet_regiis.exe with the -ga switch, the command grants the following rights to the account:</p>
      <ul>
        <li>
          <div>Access to the IIS Metabase</div>
        </li>
        <li>
          <div>Permission to write to the %Windir%\Microsoft.NET\Framework\version\Temporary ASP.NET Files folder</div>
        </li>
      </ul>
      <p>The account is also a member of the local Users group; therefore, it has read access to the \Inetpub directory tree (these directories have an ACL that grants read access to the Users group).&amp;nbsp;</p>
    </li>
  </ol>
  <h1>Additional Resources</h1>
  <ul>
    <li>
      <div>An Introduction to the IIS Metabase <a href="http://support.microsoft.com/kb/240941/en-us">http://support.microsoft.com/kb/240941/en-us</a></div>
    </li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1713111659" Content_Hash="-1670071902">
    <Metadata>
      <Id>eb4c2562-d306-4aa0-a86c-630c5cdff1c6</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Restrict Authentication Cookies to HTTPS Connections</Title>
      <Category>Authentication</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1><p>Use the <strong>requireSSL</strong> attribute to restrict authentication cookies to HTTPS connections only. </p><h1>Why</h1><p>Sending cookies out exclusively over SSL makes it much harder for an attacker to sniff the cookie values off the wire.&nbsp; If an attacker can get a copy of an authentication cookie, they can potentially emulate that user, compromising their account. </p><h1>When</h1><p>All systems which use authentication cookies should use SSL for those cookies if possible.&nbsp; Systems which deal with any personally identifiable information or monetary transaction should use SSL in all circumstances without exception. </p><h1>How</h1><p>Set the <strong>secure</strong> property of the authentication cookie to ensure that browsers only send authentication cookies over HTTPS connections.&nbsp; By using SSL, you prevent an attacker from capturing the authentication cookie to gain spoofed access to your application.&nbsp; Set the <strong>secure</strong> property by using <strong>requireSSL="true"</strong> on the <strong>&lt;forms&gt;</strong> element as shown here. </p><pre>&lt;forms loginUrl="Secure\Login.aspx"<br>        requireSSL="true" ... /&gt;</pre><h1>Problem Example</h1><p>An online brokerage provides a large amount of reference content.&nbsp; As this content is not specific to any user and is publicly available, it is not protected by SSL for performance reasons like the trading interface is.&nbsp; However, the site is not configured to restrict authentication cookies to SSL only, so they're sent with all requests.&nbsp; An attacker positions themself on the same network segment as a user (someone using the public network in an internet cafe), sniffs the user's traffic, steals their cookie, and uses it to access their accounts.</p><h1>Solution Example</h1><p>An online brokerage provides a large amount of reference content.&nbsp; As this content is not specific to any user and is publicly available, it is not protected by SSL for performance reasons like the trading interface is.&nbsp; The site is&nbsp;correctly configured to restrict authentication cookies to SSL only, so they're only sent with requests protected by SSL.&nbsp; An attacker positions themself on the same network segment as a user (someone using the public network in an internet cafe) and sniffs the user's traffic, but because the cookies are only sent via SSL, they cannot retrieve them.</p><hr><p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="2070668630" Content_Hash="842552901">
    <Metadata>
      <Id>f12d5701-d706-47af-8c14-eaeeb4fad8e3</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Use a Secure Key Storage Location</Title>
      <Category>Encryption</Category>
      <Phase>Implementation</Phase>
      <Technology>Java</Technology>
      <Type>Guideline</Type>
      <DirectLink>Use a Secure Key Storage Location</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Application keys should be stored in a well defined location, such as the Java <i>KeyStore</i>. Do not hard code them or store them as plaintext inside configuration files or source code.</p>
  <h1>Why</h1>
  <p>When faced with encryption, intruders attack the most vulnerable aspect: key management. Because keys are used to generate the encryption that protects sensitive data, the keys themselves become sensitive data that needs to be protected.</p>
  <h1>When</h1>
  <p>If your application uses encryption and encryption keys, use a secure storage location for the keys.</p>
  <h1>How</h1>
  <p>When considering a key storage location:</p>
  <ol>
    <li>
      <p>
        <strong>Identify the need for a key store. </strong>Key stores should be used when your application utilizes crypto keys. Example:</p>
      <pre>KeyGenerator kgen = KeyGenerator.getInstance("AES");<br />kgen.init(256);SecretKey skey = kgen.generateKey();<br />byte[] rawKey = skey.getEncoded();<br /><br />SecretKeySpec skeySpec = new SecretKeySpec(rawKey, "AES");</pre>
    </li>
    <li>
      <p>
        <strong>Use Java's <i>KeyStore </i>class. </strong>Since version 1.2, Java offers a key store functionality as part of the Java Runtime Environment. The Java key store requires a master password for retrieving the contents of the key store. The master password should be given to the application at starting time. Use the <i>KeyTool </i>utility to create and manage the keys inside the key store. Example of accessing the key store:</p>
      <pre>String keyStoreName = MyApp.getKeyStoreName();<br />char[] keyStorePass = MyApp.getKeyStorePass();<br />KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());<br />FileInputStream keyStoreFile = new FileInputStream(keyStoreName);<br />keyStore.load(keyStoreFile, keyStorePass);<br />keyStoreFile.close();<br /><br />final String keyName = "MyAppEncryptionKey";<br />// Note: Although the example uses the same password for storing the KeyStore<br />// on disk and adding keys to the KeyStore, the 2 passwords can be different<br />// from one another<br />SecretKey skey = (SecretKey)keyStore.getKey(keyName, keyStorePass);</pre>
    </li>
    <li>
      <p>
        <strong>Protect the key store.</strong>
      </p>
      <ul>
        <li>
          <strong>Choose a key store directory</strong>: Dedicate a directory for storing your application's key store files. Make sure the directory is not web-accessible. This limits the scope of users&amp;nbsp;who can potentially compromise the contents inside the directory. </li>
        <li>
          <strong>Set appropriate permissions</strong>: Apply filesystem permissions such that the key store files can be only accessed by your application and its administrators.</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Avoid common mistakes.</strong>
      </p>
      <ul>
        <li>
          <strong>Do not hard-code keys in the application</strong>: Hard-coding the encryption keys into the source code, hoping that an attacker will not reverse engineer the application, is security through obscurity. A determined attacker will usually find a way to defeat such a mechanism. </li>
        <li>
          <strong>Do not place keys into configuration files</strong>: Obfuscating the encryption keys and placing them into configuration files is security through obscurity. A determined attacker will usually find a way to defeat such a mechanism. </li>
        <li>
          <strong>Unload keys from memory after their use</strong>: Leaving the encryption keys in memory after their final use allows the operating system to page them from memory and onto the hard drive. A determined attacker will usually find a way to obtain the encryption keys from the operating system's page file.</li>
      </ul>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>The following code shows a hard-coded encryption key inside the application. A determined attacker will be able to compromise the key once they gain access to the source code.</p>
  <pre>String encKey = "encryption key";<br />MessageDigest md = MessageDigest.getInstance("SHA-512");<br />md.update(encKey.getBytes("UTF-8"));<br />byte[] rawKey = md.digest();<br />md.reset();<br />SecretKeySpec skeySpec = new SecretKeySpec(rawKey, "AES");</pre>
  <h1>Solution Example</h1>
  <p>The following code loads the encryption key from the Java key store. Because the key is properly stored, it is impossible for an attacker to steal the actual key without also stealing the master password.</p>
  <pre>String keyStoreName = MyApp.getKeyStoreName();<br />char[] keyStorePass = MyApp.getKeyStorePass(); <br />KeyStore keyStore = KeyStore.getInstance(KeyStore.getDefaultType());<br />FileInputStream keyStoreFile = new FileInputStream(keyStoreName);<br />keyStore.load(keyStoreFile, keyStorePass);<br />keyStoreFile.close();<br /> final String keyName = "MyAppEncryptionKey";<br />// Note: Although the example uses the same password for storing the KeyStore<br />// on disk and adding keys to the KeyStore, the 2 passwords can be different <br />// from one another<br />SecretKey skey = (SecretKey)keyStore.getKey(keyName, keyStorePass);<br /></pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>To learn more about storing encryption keys using Java, see: Documentation for <a href="http://download.oracle.com/javase/1.4.2/docs/api/java/security/KeyStore.html">Class KeyStore</a> in Java SDK.</li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-2125634337" Content_Hash="-1454879260">
    <Metadata>
      <Id>f1ef60f9-6ec3-445d-a624-3a37c970ea41</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Protect Session Cookies</Title>
      <Category>Session Management</Category>
      <Phase>Implementation</Phase>
      <Technology>Java</Technology>
      <Type>Guideline</Type>
      <DirectLink>Protect Session Cookies</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Protect the confidentiality of session cookies.</p>
  <h1>Why</h1>
  <p>Session cookies are used by an application to identify the session associated with a particular user. Protecting session cookies can help prevent an attacker from hijacking the session and using the application as a legitimate user.</p>
  <h1>When</h1>
  <p>If your application uses cookies to maintain a user's session state, then use this guideline to protect the cookie.</p>
  <h1>How</h1>
  <p>Use the following steps to secure session cookies:</p>
  <ol>
    <li>
      <p>
        <strong>Do not allow users to choose their own session identifiers. </strong>Java automatically assigns random IDs to its sessions which minimizes the risk of an attacker hijacking another user's session by using the same session ID. To use sessions in Java, invoke <em>HttpServletRequest.getSession</em>:</p>
      <pre>HttpSession session = request.getSession();</pre>
    </li>
    <li>
      <span>
        <p>
          <strong>Invalidate the session identifier on login (as well as logout) to ensure session identifiers are not reused.</strong> This is a portion of the approach necessary to prevent session hijacking. Use <em>HttpSession.invalidate</em> to accomplish this. After the session has been invalidated, the call below will generate a new session identifier.</p>
      </span>
      <pre>HttpSession session = getSession(false);
if(session != null) session.Invalidate();
session = request.getSession(true);</pre>
    </li>
    <li>
      <p />
      <strong>Time-out sessions. </strong>
      <span>Set an expiration time for sessions. This helps minimize the threat of session hijacking by giving an attacker a smaller window of opportunity. Depending on your application, an appropriate timeout can be anywhere from 10 to 20 minutes. Setting when sessions should expire can be done through <em>HttpSession.setMaxInactiveInterval</em> in code, or via the <em>session-timeout</em> configuration in the web.xml file.<p /></span>
    </li>
    <li>
      <p>
        <strong>Allow users to terminate their sessions. </strong>Allowing users to invalidate their sessions reduces the risk of session being hijacked. Use <em>HttpSession.invalidate</em> to accomplish this.</p>
    </li>
    <li>
      <p />
      <strong>Ensure cookies are sent over encrypted channels. </strong>
      <span>Mark cookies sent over SSL as <em>Secure</em>. Use <em>Cookie.setSecure</em> to require SSL when sending out the given cookie. It is recommended to avoid sending session cookies over unencrypted channels as session hijacking is made much easier. Use <em>ServletRequest.isSecure</em> to verify whether SSL is being used. There is a <em>cookie-secure</em> attribute that can be set for the sessiond id cookie in the web.xml file.<p /></span>
    </li>
  </ol>
  <p>
    <strong>Note:</strong> PCI DSS requirements state that sessions that are idle for 15 minutes should be locked automatically and require the user's password to unlock.</p>
  <h1>Problem Example</h1>
  <p>The following code shows the logout function of the <em>LoginModule</em> used when relying on JAAS for authentication. The code removes all authentication tokens associated with the current session but fails to invalidate the session. </p>
  <pre>public boolean logout() throws LoginException{<br />      subject.getPrincipals().remove(userToken);<br /><br />      clearCredentials();<br />      userToken = null;<br /><br />      // The application should have invalidated the session here.<br />      // Log the logout event. Consult the Logging section for more details<br />      return true;<br />}</pre>
  <h1>Solution Example</h1>
  <p>The following code shows the logout function of the <em>LoginModule</em> used when relying on JAAS for authentication. The code removes all authentication tokens associated with the current session and invalidates the session.</p>
  <pre>public boolean logout() throws LoginException{<br />      subject.getPrincipals().remove(userToken);<br /><br />      clearCredentials();<br />      userToken = null;<br /><br />      // The application invalidates the session when<br />      // the user is logging out<br />      HttpSession session = common.getCurrentSession();<br />      session.invalidate();<br /><br />      // Log the logout event. Consult the Logging section for more details<br />      return true;<br />}</pre>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information on HTTP sessions, see: Documentation for <a href="http://download.oracle.com/javaee/1.3/api/javax/servlet/http/HttpSession.html">Interface HttpSession</a> in Java SDK. </li>
    <li>For more information on HTTP cookies, see: Documentation for <a href="http://download.oracle.com/javaee/1.3/api/javax/servlet/http/Cookie.html">Class Cookie</a> in Java SDK. </li>
    <li>To learn more about parameter manipulation and ways to prevent it, see: <a href="http://www.cgisecurity.com/owasp/html/ch11s04.html">Parameter Manipulation</a>. </li>
    <li>To learn more about session prediction attacks, see: <a href="http://www.webappsec.org/projects/threat/classes/credential_session_prediction.shtml">Credential and Session Prediction</a>.</li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1740773254" Content_Hash="-1788311526">
    <Metadata>
      <Id>f44f4bc9-fb33-41f0-b356-ca73feb44176</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Partition the Application Between Public And Private Domains</Title>
      <Category>Authentication</Category>
      <Phase>Deployment</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Partition the Application Between Public And Private Domains</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Define a boundary between public and restricted content in both the URL namespace and the filesystem namespace.</p>
  <h1>Why</h1>
  <p>Defining a boundary between public and restricted content simplifies the task of user authorization and is generally less prone to error. When the content is separated, server configuration can be used to automatically apply authorization rules without relying on the developer to explicitly add checks in the code.</p>
  <h1>When</h1>
  <p>Consider using this guideline when your application restricts access to specific resources. For instance, anonymous users are granted access to some, but not all of the application while authenticated users are granted access based on their role.</p>
  <h1>How</h1>
  <p>Defining the boundary requires: </p>
  <ol>
    <li>
      <p>
        <strong>Determine roles</strong>: Define the various types of users and their rights. Build a security policy that documents the rights required to access each page of your application.</p>
    </li>
    <li>
      <p>
        <strong>Determine pages that should require SSL</strong>: This would include pages that transmit credentials, unprotected authentication cookies, or sensitive user information such as credit card or social security numbers. Such pages should be transmitted over SSL only.</p>
      <p>It should be noted that the Forms Authentication cookie is unprotected in the sense that it is vulnerable to HTTP Replay Attacks. As such, any page in a Forms Auth ASP.Net application that requires an authenticated user should only be accessible over SSL.</p>
    </li>
    <li>
      <p>
        <strong>Structure the URL namespace</strong>: Structure the application URL namespace to first separate the pages that require SSL from those that do not. Then define separate directories according to the various roles defined for your application. For instance you might have the following directories under your application root:</p>
      <pre>//secure/usr/secure/admin</pre>
    </li>
    <li>
      <p>
        <strong>Configure IIS to require SSL on the appropriate portions of your application</strong>:</p>
      <ol>
        <li>Right-click on 'My Computer' and select 'Manage </li>
        <li>Under the 'Services and Applications' node, expand 'Internet Information Services' and locate your website </li>
        <li>Right click on the restricted folder and choose 'Properties' </li>
        <li>Click on 'Edit' under the 'Secure Communications' section to require SSL connections. (NOTE: If you have not installed configured a certificate for this server, see the related section for steps to setup SSL on your IIS website)</li>
      </ol>
    </li>
    <li>
      <p>
        <strong>Use absolute URLs to transition to or from the sensitive portion of the namespace</strong>: Relative links use the same protocol (HTTP or HTTPS) as the current page. This can result in broken links that point to pages within your application that require SSL. It can also lead to unnecessary use of SSL, which does have an associated performance hit.</p>
      <p>The fix for both of these issues is to use absolute URLs that explicitly specify the protocol instead of relative URLs. An example redirection using an absolute URL is shown below.</p>
      <pre>private void btnLogon_Click( object sender, System.EventArgs e ){// Form an absolute path using the server name and v-dir namestring serverName = HttpUtility.UrlEncode(Request.ServerVariables["SERVER_NAME"]);string vdirName = Request.ApplicationPath;Response.Redirect("https://" + serverName + vdirName + "/Restricted/Login.aspx");}</pre>
    </li>
    <li>
      <p>
        <strong>Use URL Authorization Restrict Access</strong>: Use an <strong>&lt;authorization&gt;</strong> element to ensure that only authenticated users can access secure pages. Place this element beneath the closing <strong>&lt;/system.web&gt;</strong> tag, as shown here.</p>
      <pre>&lt;!-- The secure folder is for authenticated and SSL access only. --&gt;&lt;location path="Secure" &gt;  &lt;system.web&gt;    &lt;authorization&gt;      &lt;deny users="?" /&gt;    &lt;/authorization&gt;  &lt;/system.web&gt;&lt;/location&gt;</pre>
      <p>Additionally, the following configuration ensures that unauthenticated users are allowed to access pages in the application's root directory. Place this configuration in the main <strong>&lt;system.web&gt;</strong> element.</p>
      <pre>&lt;system.web&gt;  &lt;!-- The virtual directory root folder contains general pages.       Unauthenticated users can view them and they do not need        to be secured with SSL. --&gt;  &lt;authorization&gt;    &lt;allow users="*" /&gt;  &lt;/authorization&gt;&lt;/system.web&gt;</pre>
      <p>
        <strong>Note:</strong> If you use this type of site structure, your application must not rely on the user's identity on the non-SSL pages. In the preceding configuration, no forms authentication ticket is sent for requests for non-SSL pages. As a result, the user is considered anonymous. This has implications for related features, such as personalization, that require the user name.</p>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>MyApp is a financial tool that generates reports based on sensitive data. It allows the user to upload the financial data and download the report. Since the application is small, all of its content is located within the same directory. The access control is enforced by the web application through checking the required permissions before a given call is executed.</p>
  <p>Since both data and code is within the same directory, it may be possible for an attacker to gain access to the raw financial data.</p>
  <h1>Solution Example</h1>
  <p>MyApp is a financial tool that generates reports based on some sensitive data. It allows the user to upload the financial data and download the report. The application has a dedicated /data/ directory for the financial data. Access to contents within the /data/ directory is handled by the server hosting MyApp, making it much more difficult for an unauthorized user to gain access.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1890938551" Content_Hash="812952716">
    <Metadata>
      <Id>fbcc8a28-01fb-4fdf-a0e8-e4704be8d4ec</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Protect Sensitive Data Over the Network</Title>
      <Category>Sensitive Data</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>Guideline</Type>
      <DirectLink>Protect Sensitive Data Over the Network</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority>2</Priority>
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Use a protocol that allows adequate encryption to protect sensitive data, such as credentials and application-specific data.</p>
  <h1>Why</h1>
  <p>When data is sent over the network, it typically passes through several intermediate relays on its way towards some final destination. Using a safe protocol to transmit information is important because it adds protection against&amp;nbsp;the Network Eavesdropping Attack or the&amp;nbsp;Man in the Middle Attack during transport.</p>
  <h1>When</h1>
  <p>This is required whenever sensitive data needs to be sent between two hosts.</p>
  <h1>How</h1>
  <p>Use the following steps to protect sensitive data over the network:</p>
  <ol>
    <li>
      <p>
        <strong>Identify sensitive information.</strong> Sensitive data is any information that is kept secret and should be disclosed only to authorized parties. Common examples of sensitive data include, but are not limited to, names of customers, government issued ID numbers, credit card and other financial information, passwords, and private keys. Some industries, such as health care and banking, have regulatory standards that define sensitive information. Use regulatory requirements, as they apply to your application, to identify sensitive data. Sensitive data can be defined as follows:</p>
      <ul>
        <li>Information that either contains personally identifiable information or can be used to derive personally identifiable information that should not be shared with others. </li>
        <li>Information that a user provides that they would not want shared with other users of the application. </li>
        <li>Information that comes from an external trusted source that is not designed to be shared with users.</li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Choose an appropriate protection mechanism.</strong> Choosing the appropriate protection mechanism may depend on various conditions: purpose of the sensitive data, role of the other network party, infrastructure, and supported technologies. Because sensitive data must be encrypted when in transit, there are two potential strategies — Encrypt the application data or Encrypt the communication channel:</p>
      <ul>
        <li>
          <p>
            <strong>Encrypt the communication channel.</strong> Depending on the current infrastructure and the other network party, it is possible to encrypt the connections using SSL, IPSec, or any technologies supported by the remote party. </p>
        </li>
        <li>
          <p>
            <strong>Encrypt the application data.</strong> If your application's communication channels cannot be encrypted, encrypt the application data. Hashing or encryption should be used when protecting the application data. Use hashing if the sensitive data will be used only for comparison purposes and the actual contents of the data will never need to be recovered. Use encryption if the sensitive data will need be retrieved at a later stage.</p>
          <ul>
            <li>
              <p>
                <strong>Hashing</strong>: If hashing is used, choose a longer salt, 16 or more bits. The salt is random data that is known only by the application; to guess the value of the original data given the hash, an attacker also has to guess the salt. It is recommended to have a longer salt because it provides a bigger input to the hash function. Assuming that the produced hash is compromised, longer salts makes it more difficult for an attacker to gain access to the sensitive data. If your application uses randomly generated salt, make sure that your application encrypts the random salt and stores it into a configuration file. Use RNGCryptoServiceProvider to generate the salt. Example:</p>
              <pre>public static byte[] GenerateSalt()<br />{<br />    byte[] randBytes = new byte[4];<br />    RNGCryptoServiceProvider gen =<br />     new RNGCryptoServiceProvider();<br />    gen.GetNonZeroBytes(randBytes);<br />    return randBytes;<br />}</pre>
              <p>Choosing a strong hashing algorithm is also important. Stronger algorithms prevent multiple unique pieces of data from producing identical hash values. The current recommendation is to use SHA-256 or stronger.</p>
              <pre>public byte[] HashCredentials(byte[] pass, byte[] salt)<br />{<br />    HMACSHA512 md;<br />    byte[] digest; <br />    md = new HMACSHA256(salt);<br />    md.Initialize();<br />    digest = md.ComputeHash(pass);<br />    md.Clear();<br />    return digest;<br />}</pre>
            </li>
            <li>
              <p>
                <strong>Encrypting</strong>: If encryption is used, use a key size of 256-bit or higher for symmetric encryption and 2048-bit or higher for public/private key encryption. Use AES for symmetric encryption or RSA for public/private key encryption. You should use symmetric encryption if and only if your application is the only entity that will access the encrypted data. If the data will be accessed by more than one parties, use public/private key encryption. Public/private key encryption allows your application to share sensitive data with multiple entities without disclosing its own encryption key. The following example demonstrates the use of the Rijndael symmetric key encryption algorithm:</p>
              <pre>Rijndael encMD;<br />ICryptoTransform encCT;<br />byte[] digest;<br />// The following code obtains the encryption<br />// key and initialization vector<br />// from the application's key repository. <br />encMD = Rijndael.Create();<br />encMD.Key = MyApp.Crypto.GetEncryptionKey();<br />encMD.IV = MyApp.Crypto.GetEncryptionIV();<br />encCT = encMD.CreateEncryptor(); <br />// Note that sensitiveData is of type byte[] and contains<br />// data that is sensitive in nature<br />digest =<br /> encCT.TransformFinalBlock(sensitiveData, 0, sensitiveData.Length);<br />encMD.Clear();</pre>
            </li>
          </ul>
        </li>
      </ul>
    </li>
    <li>
      <p>
        <strong>Apply the appropriate protection mechanism</strong>: Evaluate the code and determine the places where sensitive data is transmitted. Apply the established protection mechanism at each location. For instance, if your application processes credit card transactions across a hostile network environment, encrypt the credit card information before transmitting it to the appropriate network entity:</p>
      <pre>void ProcessPayment(byte[] ccInfo, float amount)<br />{<br />    byte[] ccDigest = MyApp.Crypto.EncryptCCInfo(ccInfo);<br />    SqlConnection connection;<br />    SqlCommand command;<br />    SqlDataReader result;<br />    string query = "execute QueuePayment @ccDigest @amount;";<br />    connection = MyApp.DBManager.GetDBConnection();<br />    command = new SqlCommand(query, connection);<br />    command.Parameters.Add("@ccDigest", System.Data.SqlDbType.Binary);<br />    command.Parameters["@ccDigest"].Value = ccDigest;<br />    command.Parameters.Add("@amount", System.Data.SqlDbType.Float);<br />    command.Parameters["@amount"].Value = amount;<br />    ...<br />}</pre>
    </li>
  </ol>
  <h1>Problem Example</h1>
  <p>An e-commerce application written in ASP.NET enables customers to pay their bills online through a unified broker. The application's web component relies on an independent account management system that resides on another server. The web component communicates with the account management system using a SQL socket connection. The two servers are located in a competitively priced data center that houses a number of other customers, all of which are able to access the building at all times. A malicious user purchases hosting services at the same company, and after exploring the hosting environment, learns that the hosted accounts are networked using a shared bus topology that allows for network snooping. Because SQL connections are not encrypted by default, the attacker is able to setup a sniffer and capture all of the communication between the account management component and the web component. This enabled the attacker to login as a legitimate user on the account management server and make changes at will.</p>
  <h1>Solution Example</h1>
  <p>An e-commerce application written in ASP.NET enables customers to pay their bills online through a unified broker. The application's web component relies on an independent account management system that resides on another server. The web component communicates with the account management system using a SQL socket connection. The two servers are located in a competitively priced data center that houses a number of other customers, all of which are able to access the building at all times. The application's developers encrypt the payment information before transmitting it to the other network entity.</p>
  <pre>void ProcessPayment(byte[] ccInfo, float amount)<br />{<br />    byte[] ccDigest = MyApp.Crypto.EncryptCCInfo(ccInfo);<br />    SqlConnection connection;<br />    SqlCommand command;<br />    SqlDataReader result; <br />    string query = "execute QueuePayment @ccDigest @amount;";<br />    connection = MyApp.DBManager.GetDBConnection();<br />    command = new SqlCommand(query, connection);<br />    command.Parameters.Add("@ccDigest", System.Data.SqlDbType.Binary);<br />    command.Parameters["@ccDigest"].Value = ccDigest;<br />    command.Parameters.Add("@amount", System.Data.SqlDbType.Float);<br />    command.Parameters["@amount"].Value = amount;<br />    ...<br />} <br />... <br />public byte[] EncryptCCInfo(byte[] ccInfo)<br />{<br />    Rijndael encMD;<br />    ICryptoTransform encCT;<br />    byte[] digest;<br />    encMD = Rijndael.Create();<br />    encMD.Key = MyApp.Crypto.GetEncryptionKey();<br />    encMD.IV = MyApp.Crypto.GetEncryptionIV();<br />    encCT = encMD.CreateEncryptor();<br />    digest = encCT.TransformFinalBlock(ccInfo, 0, ccInfo.Length);<br />    encMD.Clear();<br />    return digest;<br />}</pre>
  <p>Because data between the two components is encrypted, the transmission medium is less likely to affect the application's ability to securely transmit payment information.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-159416451" Content_Hash="1089730522">
    <Metadata>
      <Id>634d908c-b966-40d6-a87b-1cb465af6684</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>How to Encrypt Configuration Sections in ASP.NET Using RSA</Title>
      <Category>Data Access</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>How To</Type>
      <DirectLink>How to Encrypt Configuration Sections in ASP.NET Using RSA</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Summary</h1>
  <p>This How to shows how to use the RSA Protected Configuration provider and the Aspnet_regiis.exe tool to encrypt sections of your configuration files. You can use Aspnet_regiis.exe tool to encrypt sensitive data, such as connection strings, held in the Web.config and Machine.config files. You can easily export and import RSA keys from server to server. This makes RSA encryption particularly effective for encrypting configuration files used on multiple servers in a Web farm.</p>
  <h1>Contents</h1>
  <ul>
    <li>Objectives </li>
    <li>Overview </li>
    <li>Summary of Steps </li>
    <li>Step 1. Identify the Configuration Sections to Be Encrypted </li>
    <li>Step 2. Choose Machine-Level or User-Level Containers </li>
    <li>Step 3. Encrypt Your Configuration File Data </li>
    <li>Web Farm Scenarios </li>
    <li>Additional Resources </li>
  </ul>
  <h1>Objectives</h1>
  <ul>
    <li>Learn about key changes for encrypting sensitive data in configuration files in ASP.NET. </li>
    <li>Learn how to choose between machine-level and user-level containers. </li>
    <li>Know which sections can and cannot be encrypted with the RSA protected configuration provider. </li>
    <li>Use the RSA protected configuration provider to encrypt connection strings. </li>
    <li>Create RSA key containers. </li>
    <li>Import and export RSA keys across multiple servers in a Web farm. </li>
  </ul>
  <h1>Overview</h1>
  <p>Configuration files such as the Web.config file are often used to hold sensitive information, including user names, passwords, database connection strings, and encryption keys. The sections that usually contain sensitive information that you need to encrypt are the following:</p>
  <ul>
    <li>&lt;appSettings&gt;. This section contains custom application settings. </li>
    <li>&lt;connectionStrings&gt;. This section contains connection strings. </li>
    <li>&lt;identity&gt;. This section can contain impersonation credentials. </li>
    <li>&lt;sessionState&gt;. This section contains the connection string for the out-of-process session state provider. </li>
  </ul>
  <p>Encrypting and decrypting data incurs performance overhead. To keep this overhead to a minimum, encrypt only the sections of your configuration file that store sensitive data.</p>
  <h1>Summary of Steps</h1>
  <p>To encrypt configuration sections by using the RSA protected configuration provider, perform the following steps:</p>
  <ul>
    <li>Step 1. Identify the configuration sections to be encrypted. </li>
    <li>Step 2. Choose machine-level or user-level key containers. </li>
    <li>Step 3. Encrypt your configuration file data. </li>
  </ul>
  <h1>Step 1. Identify the Configuration Sections to Be Encrypted</h1>
  <p>Encrypting and decrypting data incurs performance overhead. To keep this overhead to a minimum, encrypt only the sections of your configuration file that store sensitive data.</p>
  <h2>Sections You Cannot Encrypt Using Protected Configuration</h2>
  <p>If you store sensitive data in any of the following configuration sections, you cannot encrypt it by using a protected configuration provider and the Aspnet_regiis.exe tool:</p>
  <ul>
    <li>&lt;processModel&gt; </li>
    <li>&lt;runtime&gt; </li>
    <li>&lt;mscorlib&gt; </li>
    <li>&lt;startup&gt; </li>
    <li>&lt;system.runtime.remoting&gt; </li>
    <li>&lt;configProtectedData&gt; </li>
    <li>&lt;satelliteassemblies&gt; </li>
    <li>&lt;cryptographySettings&gt; </li>
    <li>&lt;cryptoNameMapping&gt; </li>
    <li>&lt;cryptoClasses&gt; </li>
  </ul>
  <p>For the configuration sections listed, you should use the Aspnet_setreg.exe tool, which is also available for previous versions of the .NET Framework.</p>
  <h1>Step 2. Choose Machine-Level or User-Level Key Containers</h1>
  <p>The <strong>RSAProtectedConfigurationProvider</strong> supports machine-level and user-level key containers for key storage. Machine-level key containers are available to all users, but a user-level key container is available to that user only.</p>
  <p>The choice of container depends largely on whether or not your application shares a server with other applications and whether or not sensitive data must be kept private for each application.</p>
  <h2>Machine Key Container</h2>
  <p>Use a machine-level key container in the following situations: </p>
  <ul>
    <li>Your application runs on its own dedicated server with no other applications. </li>
    <li>You have multiple applications on the same server and you want those applications to be able to share sensitive information and the same encryption key. </li>
  </ul>
  <p>RSA machine key containers are stored in the following folder: </p>
  <p>\Documents and Settings\All Users\Application Data\Microsoft\Crypto\RSA\MachineKeys</p>
  <h2>User Key Container</h2>
  <p>Use a user-level key container if you run your application in a shared hosting environment and you want to make sure that your application's sensitive data is not accessible to other applications on the server. In this situation, each application should have a separate identity and the resources for the application—such as files, and databases—should be restricted to that identity.</p>
  <p>RSA user-level key containers are stored in the following folder:</p>
  <p>\Documents and Settings\{UserName}\Application Data\Microsoft\Crypto\RSA</p>
  <h1>Step 3. Encrypt Your Configuration File Data</h1>
  <p>This step shows you how to encrypt a connection string in the Web.config file. It shows you how to do this with the machine store and then with the user store.</p>
  <h2>Using RSA with a Machine-Level Key Container to Encrypt a Connection String in Web.Config</h2>
  <p>The <strong>RSAProtectedConfigurationProvider</strong> is the default provider and is configured to use the machine-level key container.</p>
  <h3>To encrypt the connectionStrings section in Web.config </h3>
  <ol>
    <li>Create a new Web site named MachineRSA. Make sure that this directory is configured as a virtual directory. </li>
    <li>Add a Web.config configuration file to this directory. </li>
    <li>Add a sample <strong>connectionString</strong> similar to the following example: <div><pre>&lt;connectionStrings&gt;<br />&amp;nbsp; &lt;add name="MyLocalSQLServer" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionString="Initial Catalog=aspnetdb;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; data source=localhost;Integrated Security=SSPI;" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; providerName="System.Data.SqlClient"/&gt;<br />&lt;/connectionStrings&gt;  </pre></div></li>
    <li>Run the following command from a .NET command prompt to encrypt the <strong>connectionStrings</strong> section: <p><strong>aspnet_regiis -pe "connectionStrings" -app "/MachineRSA"</strong></p><p>The above command with the-<strong>app</strong> switch assumes that there is an IIS virtual directory called MachineRSA. If you are using the Visual Studio Web server instead of IIS, use the-<strong>pef</strong> switch, which allows you to specify the physical directory location of your configuration file. </p><p><strong>aspnet_regiis.exe -pef "connectionStrings" C:\Projects\MachineRSA</strong></p><blockquote><strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;The Aspnet_regiis.exe utility tool is located in the following directory:</blockquote><blockquote>%WinDir%\Microsoft.NET\Framework\&lt;<em>versionNumber</em>&gt;</blockquote><ul><li>The <strong>-pe</strong> switch specifies the configuration section to encrypt. This is the XML element name of the configuration section. <p>For nested elements, such as the &lt;<strong>pages</strong>&gt; section which is inside &lt;<strong>system.web</strong>&gt;, the XML name must include the containing section groups; for example: <strong>"system.web/pages"</strong>. </p></li><li>The <strong>-pef</strong> switch specifies the configuration section to encrypt and allows you to supply the physical directory path for your configuration file. </li><li>The <strong>-app</strong> switch specifies your Web application's virtual path. If it is a nested application, you need to specify the nested path from the root directory; for example, <strong>"/test/aspnet/MachineRSA"</strong>. </li><li>Because you are using the default provider with default settings, you do not need to use the-<strong>prov</strong> switch, which specifies the provider name. </li></ul><p>If the command is successful, you will see the following output: </p><div><pre>Encrypting configuration section...Succeeded!  </pre></div><blockquote><strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;The RSA machine key containers are stored in the following folder:</blockquote><blockquote>\Documents and Settings\All Users\Application Data\Microsoft\Crypto\RSA\MachineKeys</blockquote></li>
    <li>Review the Web.config file, and examine the changes. The following elements are created: <ul><li>&lt;<strong>EncryptedData</strong>&gt; </li><li>&lt;<strong>EncryptionMethod</strong>&gt; </li><li>&lt;<strong>KeyInfo</strong>&gt; </li><li>&lt;<strong>EncryptedKey</strong>&gt; </li><li>&lt;<strong>KeyName</strong>&gt; </li><li>&lt;<strong>CipherData</strong>&gt; </li><li>&lt;<strong>CipherValue</strong>&gt; </li></ul><p>Your modified Web.Config file, with the <strong>connectionStrings</strong> section encrypted, should be similar to the following example: </p><div><pre>...<br />&lt;connectionStrings configProtectionProvider="RsaProtectedConfigurationProvider"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;EncryptedData Type="http://www.w3.org/2001/04/xmlenc#Element"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;              xmlns="http://www.w3.org/2001/04/xmlenc#"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#tripledes-cbc" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;KeyInfo xmlns="http://www.w3.org/2000/09/xmldsig#"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;EncryptedKey xmlns="http://www.w3.org/2001/04/xmlenc#"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#rsa-1_5" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;KeyInfo xmlns="http://www.w3.org/2000/09/xmldsig#"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;KeyName&gt;Rsa Key&lt;/KeyName&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/KeyInfo&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;CipherData&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;CipherValue&gt;R7cyuRk+SXJoimz7wlOpJr/YLeADGnwJVcmElHbrG/<br />                         B5dDTE4C9rzSmmTsbJ9Xcl2oDQt1qYma9L7pzQsQQYqLrkajqJ4i6ZQH1cmiot8ja7Vh+yItes7TRU1AoXN9T0mbX5H1Axm0O3X/<br />                         285/MdXXTUlPkDMAZXmzNVeEJHSCE=<br />            &lt;/CipherValue&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/CipherData&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/EncryptedKey&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/KeyInfo&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;CipherData&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;CipherValue&gt;d2++QtjcVwIkJLsye+dNJbCveORxeWiVSJIbcQQqAFofhay1wMci8FFlbQWttiRYFcvxrmVfNSxoZV8GjfPtppiodhOzQZ+0/<br />                     QIFiU9Cifqh/T/7JyFkFSn13bTKjbYmHObKAzZ+Eg6gCXBxsVErzH9GRphlsz5ru1BytFYxo/<br />                     lUGRvZfpLHLYWRuFyLXnxNoAGfL1mpQM7M46x5YWRMsNsNEKTo/PU9/Jvnh/<br />                     lT+GlcgCs2JRpyzSfKE7zSJH+TpIRtd86PwQ5HG3Pd2frYdYw0rmlmlI9D<br />        &lt;/CipherValue&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/CipherData&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/EncryptedData&gt;<br />&amp;nbsp; &lt;/connectionStrings&gt;<br />...</pre></div></li>
    <li>Add the following Default.aspx Web page to your application's virtual directory, and then browse to this page to verify that encryption and decryption work correctly. <div><pre>&lt;%@ Page Language="C#" %&gt;<br />&lt;script runat="server"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void Page_Load(object sender, EventArgs e)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Response.Write("Clear text connection string is: " + <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;       ConfigurationManager.ConnectionString["MyLocalSQLServer"].ConnectionString);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&lt;/script&gt;<br />&lt;html&gt;<br />&amp;nbsp; &lt;body /&gt;<br />&lt;/html&gt;  </pre></div></li>
    <li>
      <p>MyLocalSQLServer is the name of the connection string you previously specified in the Web.config file. </p>
      <blockquote>
        <strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;If your ASP.NET application identity does not have access to the .NET Framework configuration key store, the following message is returned:</blockquote>
      <div>
        <pre>Parser Error Message: Failed to decrypt using provider 'RsaProtectedConfigurationProvider'.<br />Error message from the provider: The handle is invalid.  </pre>
      </div>
      <blockquote>
        <strong>
          <strong>To </strong>grant access to the ASP.NET application identity</strong>
      </blockquote>
      <ol>
        <li>If you are not sure which identity to use, check the identity from a Web page by using the following code: <div><pre>using System.Security.Principal;<br />...<br />protected void Page_Load(object sender, EventArgs e)<br />{<br />&amp;nbsp; Response.Write(WindowsIdentity.GetCurrent().Name);<br />}  </pre></div></li>
        <li>By default, ASP.NET applications on Windows Server 2003 run using the NT Authority\Network Service account. Open a .NET command prompt, and use the following command to give this account access to the NetFrameworkConfigurationKey store: <blockquote><strong><strong>aspnet_regiis</strong> -pa "NetFrameworkConfigurationKey" "NT Authority\Network Service"</strong></blockquote><blockquote><strong>If</strong> the command runs successfully you will see the following output:</blockquote><div><pre>Adding ACL for access to the RSA Key container...Succeeded!  </pre></div><blockquote><strong>You </strong>can check the ACL of the file in the following folder:</blockquote><blockquote><strong><strong>\Documents</strong> and Settings\All Users\Application Data\Microsoft\Crypto\RSA\MachineKeys</strong></blockquote><blockquote><strong>Your</strong><strong></strong>RSA key container file is the file in this folder with the most recent timestamp.</blockquote></li>
      </ol>
    </li>
    <li>To change the <strong>connectionStrings</strong> section back to clear text, run the following command from the command prompt: <p><strong>aspnet_regiis -pd "connectionStrings" -app "/MachineRSA"</strong></p><p>If the command is successful, you will see the following output: </p><div><pre>Decrypting configuration section...Succeeded!  </pre></div><p>To decrypt the <strong>connectionStrings</strong> section that specifies a physical path to your application's configuration file, use the <strong>-pdf</strong> switch as shown here. </p><p><strong>aspnet_regiis -pdf "connectionStrings" C:\Projects\MachineRSA</strong></p></li>
  </ol>
  <h2>Using RSA with a User-level Key Container to Encrypt a Connection String in Web.config</h2>
  <p>The following steps show you how to encrypt a &lt;<strong>connectionStrings</strong>&gt; section by using the <strong>RSAProtectedConfigurationProvider</strong> (RSA) with a user-level key container.</p>
  <p>By default, the ASP.NET applications run under the NT AUTHORITY \ Network Service account. When you access encrypted configuration sections using RSA encryption with the user-level key container, make sure that your application is running with the same user identity as the account you used to encrypt the data. </p>
  <h3>To encrypt the connectionStrings section in Web.config </h3>
  <ol>
    <li>Create a new Web site named UserRSA. Make sure that this directory is configured as a virtual directory. </li>
    <li>Add a Web.config configuration file to this directory. </li>
    <li>Add a sample <strong>connectionString</strong> similar to the following example: <div><pre>&lt;connectionStrings&gt;<br />&amp;nbsp; &lt;add name="MyLocalSQLServer" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionString="Initial Catalog=aspnetdb;data source=localhost;Integrated Security=SSPI;"<br />       providerName="System.Data.SqlClient" /&gt;<br />&lt;/connectionStrings&gt;  </pre></div></li>
    <li>Add and configure a protected configuration provider to use a user-level key container. To do this, add the following &lt;<strong>configProtectedData</strong>&gt; section to your Web.config file. You must set <strong>useMachineContainer</strong>=<strong> "false"</strong> to instruct the provider to use the user-level key container. You must also use a unique provider name or a run-time error will be generated. <div><pre>&lt;configProtectedData&gt;<br />&amp;nbsp; &lt;providers&gt;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;add keyContainerName="NetFrameworkConfigurationKey"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    useMachineContainer="false"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    description="Uses RsaCryptoServiceProvider to encrypt and decrypt"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;    name="MyUserRSAProtectedConfigurationprovider" <br />         type="System.Configuration.RsaProtectedConfigurationProvider,System.Configuration,<br />               Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/providers&gt;&amp;nbsp;&amp;nbsp; <br />&lt;/configProtectedData&gt;  </pre></div></li>
    <li>Run the following command from an SDK Command Prompt to encrypt the <strong>connectionStrings</strong> section: <p><strong>aspnet_regiis -pe "connectionStrings" -app "/UserRSA" -prov "MyUserRSAProtectedConfigurationProvider"</strong></p><ul><li>The <strong>-pe</strong> switch specifies the configuration section to encrypt. This is the XML element name of the configuration section. <p>For nested elements, such as the &lt;<strong>pages</strong>&gt; section, which is inside &lt;<strong>system.web</strong>&gt;, the XML name must include the containing section groups; for example, <strong>"system.web/pages"</strong>. </p></li><li>The <strong>-app</strong> switch specifies your Web application's virtual path. If it is a nested application, you need to specify the nested path from the root directory; for example, <strong>"/test/aspnet/MachineRSA"</strong>. </li><li>The <strong>-prov</strong> switch specifies the provider name. In this case, this is set to <strong>"MyUserRSAProtectedConfigurationProvider"</strong> which is the name you specified when configuring the provider in step 4. </li></ul><p>If the command is successful, you will see the following output: </p><div><pre>Encrypting configuration section...Succeeded!  </pre></div><blockquote><strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;RSA user-level key containers are stored in the following folder.</blockquote><blockquote>\Documents and Settings\{UserName}\Application Data\Microsoft\Crypto\RSA</blockquote></li>
    <li>Review the Web.config and examine the changes. The following elements are created. <ul><li>&lt;<strong>EncryptedData</strong>&gt; </li><li>&lt;<strong>EncryptionMethod</strong>&gt; </li><li>&lt;<strong>KeyInfo</strong>&gt; </li><li>&lt;<strong>EncryptedKey</strong>&gt; </li><li>&lt;<strong>KeyName</strong>&gt; </li><li>&lt;<strong>CipherData</strong>&gt; </li><li>&lt;<strong>CipherValue</strong>&gt; </li></ul><p>Your modified Web.Config file, with the <strong>connectionStrings</strong> section encrypted, should be similar to the following example: </p><div><pre>...<br />  &lt;connectionStrings configProtectionProvider="MyUserRSAProtectedConfigurationprovider"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;EncryptedData Type="http://www.w3.org/2001/04/xmlenc#Element"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;              xmlns="http://www.w3.org/2001/04/xmlenc#"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#tripledes-cbc" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;KeyInfo xmlns="http://www.w3.org/2000/09/xmldsig#"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;EncryptedKey xmlns="http://www.w3.org/2001/04/xmlenc#"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#rsa-1_5" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;KeyInfo xmlns="http://www.w3.org/2000/09/xmldsig#"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;KeyName&gt;Rsa Key&lt;/KeyName&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/KeyInfo&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;CipherData&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;CipherValue&gt;In7jNc0GA1eE5nvVR2hrHQ6cC1O1kMbfBXH0alBwlY2OBM4sMa8NbK4pBnUdxFkrx+oSzLYE8SHS6dYZwE3Uf5x7hk46Jx+Z/<br />                         hn1hneWMyxWn23t41708lQzySsotYnzL5VOdR4P7MrIlhW9eSpbWp7PopSzcLxlGbs41dH7L3E=<br />            &lt;/CipherValue&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/CipherData&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/EncryptedKey&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/KeyInfo&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;CipherData&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;CipherValue&gt;Zbu2LQQeiHaUFXWPjLvPR9OLwrozCZj5i2zvcEFlx/<br />                     UICt2Cn0fTdy51dbHQRjTUXnOyx2PC5vptALXsvxrhPo5I+<br />                     I2SCr21rRUQ5H55P0ejJZMsAirkNjdhCe5RflVLdK96a6Sw0cz93inWi4rNkE1SiXB76cD08Y+DHrsjmGkW8/<br />                     TeHCK2f4xSykmdJGRwpxxdt2+3DxMjQPfg39Xkr4JjRlE6FvQ/R6hkEyyqLmCxUxbTV/<br />                     +mcBcwyE3AzrbOIl+627SG1fP4ovLmMkNvjlTl5lCZnoj6<br />        &lt;/CipherValue&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/CipherData&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/EncryptedData&gt;<br />&amp;nbsp; &lt;/connectionStrings&gt;<br />...</pre></div></li>
    <li>Add the following Default.aspx Web page to your application's virtual directory, and then browse to this page to verify that encryption and decryption works correctly. <div><pre>&lt;%@ Page Language="C#" %&gt;<br />&lt;script runat="server"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void Page_Load(object sender, EventArgs e)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Response.Write("Clear text connection string is: " + <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;            ConfigurationManager.ConnectionStrings["MyLocalSQLServer"].ConnectionString);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&lt;/script&gt;<br />&lt;html&gt;<br />&amp;nbsp; &lt;body /&gt;<br />&lt;/html&gt;  </pre></div></li>
    <li>
      <p>Because your application must access the data using the same identity that you used to encrypt the data, you often need to run the encryption command using your application's service account identity. To do so, you can start a command Window by using the <strong>runas</strong> command as shown below specifying an appropriate domain and user name. </p>
      <p>
        <strong>Runas /profile /user:domain\user cmd</strong>
      </p>
      <p>When you run Aspnet_regiis from the resulting command window, it uses the specified identity to perform the encryption. This allows the application that uses the same identity to decrypt the data at run time. </p>
      <p>If your application runs under a different account than the one used to encrypt the data, ASP.NET will be unable to access the RSA user-level key container and will generate the following error: </p>
      <div>
        <pre>Parser Error Message: Failed to decrypt using provider 'RsaProtectedConfigurationProvider'. <br />Error message from the provider: Keyset does not exist  </pre>
      </div>
    </li>
    <li>To change the <strong>connectionStrings</strong> section back to clear text, run the following command from the .NET command prompt: <p><strong>aspnet_regiis -pd "connectionStrings" -app "/UserRSA"</strong></p><p>If the command is successful, you will see the following output: </p><div><pre>Decrypting configuration section...Succeeded!  </pre></div></li>
  </ol>
  <h1>Web Farm Scenarios</h1>
  <p>You can use RSA encryption in Web farms, because you can export RSA keys. You need to do this if you encrypt data in a Web.config file prior to deploying it to other servers in a Web farm. In this case, the private key required to decrypt the data must be exported and deployed to the other servers.</p>
  <h2>Using the RSA Provider to Encrypt a Connection String in Web.config in a Web Farm</h2>
  <p>To do this, you must create a custom RSA encryption key container and deploy the same key container on all servers in your Web farm. This won't work by default because the default RSA encryption key, <strong>"NetFrameworkConfigurationKey"</strong>, is different for each computer.</p>
  <h3>To use RSA encryption in a Web farm </h3>
  <ol>
    <li>Run the following command from a command prompt to create a custom RSA encryption key: <p><strong>aspnet_regiis -pc "CustomKeys" -exp</strong></p><p>The <strong>-exp</strong> switch indicates that the keys are exportable. </p><p>If the command is successful, you will see the following output: </p><div><pre>Creating RSA Key container...Succeeded!  </pre></div><p>You can verify that a custom key container exists by looking for the file and checking timestamps in the following location: </p><p>\Documents and Settings\All Users\Application Data\Microsoft\Crypto\RSA<br />\MachineKeys </p></li>
    <li>Create a new Web project named WebFarmRSA. Make sure that this directory is configured as a virtual directory. </li>
    <li>Add a Web.config configuration file to this directory. </li>
    <li>Add a sample <strong>connectionString</strong> similar to the following example: <div><pre>&lt;connectionStrings&gt;<br />&amp;nbsp; &lt;add name="MyLocalSQLServer" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionString="Initial Catalog=aspnetdb;data source=localhost;Integrated Security=SSPI;" <br />       providerName="System.Data.SqlClient" /&gt;<br />&lt;/connectionStrings&gt;  </pre></div></li>
    <li>Add and configure a custom protected configuration provider. To do this, add the following &lt;<strong>configProtectedData</strong>&gt; section to the Web.config file. Note that the key container name is set to <strong>"CustomKeys"</strong>, which is the name of the key container created previously. <div><pre>...<br />&lt;configProtectedData&gt;<br />&amp;nbsp; &lt;providers&gt;<br />&amp;nbsp; &lt;add keyContainerName="CustomKeys" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;useMachineContainer="true"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;description="Uses RsaCryptoServiceProvider to encrypt and decrypt"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;name="CustomProvider"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type="System.Configuration.RsaProtectedConfigurationProvider,System.Configuration,<br />             Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;<br />&amp;nbsp; &lt;/providers&gt;<br />&lt;/configProtectedData&gt;<br />...  </pre></div></li>
    <li>Run the following command from an SDK Command Prompt to encrypt the <strong>connectionStrings</strong> section using the custom RSA key: <p><strong>aspnet_regiis -pe "connectionStrings" -app "/WebFarmRSA" -prov "CustomProvider"</strong></p><p>If the encryption is successful, you will see the following output: </p><div><pre>Encrypting configuration section...Succeeded!  </pre></div></li>
    <li>Review the Web.config file and examine the changes. The following elements are modified: <ul><li>&lt;<strong>EncryptedData</strong>&gt; </li><li>&lt;<strong>CipherData</strong>&gt; </li><li>&lt;<strong>CipherValue</strong>&gt; </li></ul><p>Your modified Web.Config file, with the <strong>connectionStrings</strong> section encrypted, should be similar to the following example: </p><div><pre>...<br />  &lt;connectionStrings configProtectionProvider="CustomProvider"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;EncryptedData Type="http://www.w3.org/2001/04/xmlenc#Element"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;              xmlns="http://www.w3.org/2001/04/xmlenc#"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#tripledes-cbc" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;KeyInfo xmlns="http://www.w3.org/2000/09/xmldsig#"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;EncryptedKey xmlns="http://www.w3.org/2001/04/xmlenc#"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;EncryptionMethod Algorithm="http://www.w3.org/2001/04/xmlenc#rsa-1_5" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;KeyInfo xmlns="http://www.w3.org/2000/09/xmldsig#"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;KeyName&gt;Rsa Key&lt;/KeyName&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/KeyInfo&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;CipherData&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;CipherValue&gt;MWOaFwkByLRrvoGYeFUPMmN7e9uwC0D7gFEeyxs3Obll710dLQvD5XaMWcRxg1WwtOE9nysPQRrIJUaCm0b26LGUoa/<br />                         giGEfvWnslU2kig9SPICzsQAqUSB/inhRckWceb2xdy7TT+EI/vfsu6itJwE2AicMCTwx5I828mP8lV4=<br />            &lt;/CipherValue&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/CipherData&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/EncryptedKey&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/KeyInfo&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;CipherData&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;CipherValue&gt;IKO9jezdlJ/k1snyw5+e11cd9IVTlVfHBHSiYLgICf1EnMNd5WxVDZWP1uOW2UaY3Muv7HrSZCRbqq6hfA2uh2rxy5qAzFP+iu7Sg/<br />                     ku1Zvbwfq8p1UWHvPCukeyrBypiv0wpJ9Tuif7oP4Emgaoa+ewLnETSN411Gow28EKcLpbKWJDOC/<br />                     9o7g503YM4cnIvkQOomkYlL+MzMb3Rc1FSLiM9ncKQLZi+<br />                     JkRhlDIxFlsrFpKJhdNf5A0Sq2P71ZLI6G6QDCehHyn3kCZyBmVWJ0ueoGWXV4y<br />        &lt;/CipherValue&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/CipherData&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/EncryptedData&gt;<br />&amp;nbsp; &lt;/connectionStrings&gt;<br />...</pre></div></li>
    <li>Run the following command from a .NET command prompt to export the custom RSA encryption key: <p><strong>aspnet_regiis -px "CustomKeys" "C:\CustomKeys.xml" -pri</strong></p><p>The <strong>-pri</strong> switch causes the private and public key to be exported. This enables both encryption and decryption. Without the-<strong>pri</strong> switch, you would only be able to encrypt data with the exported key. </p><p>If the command is successful, you will see the following output: </p><div><pre>Exporting RSA Keys to file...Succeeded!  </pre></div></li>
    <li>Deploy the application and the encrypted Web.config file on a different server computer. Also copy the CustomKeys.xml file to a local directory on the other server, for example to the C:\ directory. </li>
    <li>On the destination server, run the following command from a command prompt to import the custom RSA encryption keys: <p><strong>aspnet_regiis -pi "CustomKeys" "C:\CustomKeys.xml"</strong></p><p>If the command is successful, you will see the following output: </p><div><pre>Importing RSA Keys from file..Succeeded!  </pre></div><blockquote><strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;After you have finished exporting and importing the RSA keys, it is important for security reasons to delete the CustomsKeys.xml file from both machines. </blockquote></li>
    <li>Grant access to the ASP.NET application identity. <p>The account used to run your Web application must be able to read the RSA key container. If you are not sure which identity your application uses, you can check this by adding the following code to a Web page: </p><div><pre>using System.Security.Principal;<br />...<br />protected void Page_Load(object sender, EventArgs e)<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; Response.Write(WindowsIdentity.GetCurrent().Name);<br />}  </pre></div><p>By default, ASP.NET applications on Windows Server 2003 run using the NT Authority\Network Service account. The following command grants this account access to the CustomKeys store: </p><p><strong>aspnet_regiis -pa "CustomKeys" "NT Authority\Network Service"</strong></p><p>If the command runs successfully, you will see the following output. </p><div><pre>Adding ACL for access to the RSA Key container...Succeeded!  </pre></div><p>You can check the ACL of the file in the following folder: </p><div><pre>\Documents and Settings\All Users\Application Data\Microsoft\Crypto\RSA\MachineKeys  </pre></div><p>Your RSA key container file will be the one in this folder with the most recent timestamp. </p></li>
    <li>Add the following Default.aspx Web page to your application's virtual directory, and then browse to this page to verify that encryption and decryption work correctly. <div><pre>&lt;%@ Page Language="C#" %&gt;<br />&lt;script runat="server"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void Page_Load(object sender, EventArgs e)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Response.Write("Clear text connection string is: " + <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;       ConfigurationManager.ConnectionStrings["MyLocalSQLServer"].ConnectionString);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&lt;/script&gt;<br />&lt;html&gt;<br />&amp;nbsp; &lt;body/&gt;<br />&lt;/html&gt;  </pre></div></li>
  </ol>
  <p>MyLocalSQLServer is the name of the connection string you specified previously in the Web.config file. </p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="140741137" Content_Hash="900825088">
    <Metadata>
      <Id>6513cc58-bf67-4458-a4fa-cee65144db25</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>How to Use Regular Expressions to Constrain Input in ASP.NET</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>How To</Type>
      <DirectLink>How to Use Regular Expressions to Constrain Input in ASP.NET</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Summary</h1>
  <p>This How to shows how you can use regular expressions within ASP.NET applications to constrain untrusted input. Regular expressions are a good way to validate text fields such as names, addresses, phone numbers, and other user information. You can use them to constrain input, apply formatting rules, and check lengths. To validate input captured with server controls, you can use the <strong>RegularExpressionValidator</strong> control. To validate other forms of input, such as query strings, cookies, and HTML control input, you can use the <strong>System.Text.RegularExpressions.Regex</strong> class.</p>
  <p>This How to shows how you can use regular expressions within ASP.NET applications to constrain untrusted input.</p>
  <h1>Contents</h1>
  <ul>
    <li>
      <div>Objectives</div>
    </li>
    <li>
      <div>Overview</div>
    </li>
    <li>
      <div>Using a RegularExpressionValidator Control</div>
    </li>
    <li>
      <div>Using the Regex Class</div>
    </li>
    <li>
      <div>Common Regular Expressions</div>
    </li>
    <li>
      <div>Additional Resources</div>
    </li>
  </ul>
  <h1>Objectives</h1>
  <ul>
    <li>Use regular expressions to constrain input, apply format rules, and check lengths. </li>
    <li>Use the ASP.NET <strong>RegularExpressionValidator</strong> control to constrain and validate input. </li>
    <li>Use the <strong>Regex</strong> class to constrain and validate input. </li>
    <li>Learn common regular expressions that can be used to constrain input. </li>
  </ul>
  <h1>Overview</h1>
  <p>If you make unfounded assumptions about the type, length, format, or range of input, your application is unlikely to be robust. Input validation can become a security issue if an attacker discovers that you have made unfounded assumptions. The attacker can then supply carefully crafted input that compromises your application by attempting SQL injection, cross-site scripting, and other injection attacks. To avoid such vulnerabilities, you should validate text fields (such as names, addresses, tax identification numbers, and so on) and use regular expressions to do the following: </p>
  <ul>
    <li>Constrain the acceptable range of input characters. </li>
    <li>Apply formatting rules. For example, pattern-based fields, such as tax identification numbers, ZIP Codes, or postal codes, require specific patterns of input characters. </li>
    <li>Check lengths. </li>
  </ul>
  <p>Regular expression support is available to ASP.NET applications through the <strong>RegularExpressionValidator</strong> control and the <strong>Regex</strong> class in the <strong>System.Text.RegularExpressions</strong> namespace.</p>
  <h1>Using a RegularExpressionValidator Control</h1>
  <p>If you capture input by using server controls, you can use the <strong>RegularExpressionValidator</strong> control to validate that input. You can use regular expressions to restrict the range of valid characters, to strip unwanted characters, and to perform length and format checks. You can constrain the input format by defining patterns that the input must match.</p>
  <h2>To validate a server control's input using a RegularExpressionValidator </h2>
  <ol>
    <li>Add a <strong>RegularExpressionValidator</strong> control to your page. </li>
    <li>Set the <strong>ControlToValidate</strong> property to indicate which control to validate. </li>
    <li>Set the <strong>ValidationExpression</strong> property to an appropriate regular expression. </li>
    <li>Set the <strong>ErrorMessage</strong> property to define the message to display if the validation fails. </li>
  </ol>
  <p>The following example shows a <strong>RegularExpressionValidator</strong> control used to validate a name field.</p>
  <div>
    <pre>&lt;%@ language="C#" %&gt;<br />&lt;form id="form1" runat="server"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:TextBox ID="txtName" runat="server"/&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:Button ID="btnSubmit" runat="server" Text="Submit" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:RegularExpressionValidator ID="regexpName" runat="server"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ErrorMessage="This expression does not validate." <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ControlToValidate="txtName"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ValidationExpression="^[a-zA-Z'.\s]{1,40}$" /&gt;<br />&lt;/form&gt;  </pre>
  </div>
  <p>The regular expression used in the preceding code example constrains an input name field to alphabetic characters (lowercase and uppercase), space characters, the single quotation mark (or apostrophe) for names such as O'Dell, and the period or dot character. In addition, the field length is constrained to 40 characters.</p>
  <h2>Using ^ and $</h2>
  <p>Enclosing the expression in the caret (<strong>^</strong>) and dollar sign (<strong>$)</strong>markers ensures that the expression consists of the desired content and nothing else. A <strong>^</strong> matches the position at the beginning of the input string and a <strong>$</strong> matches the position at the end of the input string. If you omit these markers, an attacker could affix malicious input to the beginning or end of valid content and bypass your filter.</p>
  <h1>Using the Regex Class</h1>
  <p>If you are not using server controls (which means you cannot use the validation controls) or if you need to validate input from sources other than form fields, such as query string parameters or cookies, you can use the <strong>Regex</strong> class within the <strong>System.Text.RegularExpressions</strong> namespace.</p>
  <h2>To use the Regex class </h2>
  <ol>
    <li>Add a <strong>using</strong> statement to reference the <strong>System.Text.RegularExpressions</strong> namespace. </li>
    <li>Call the <strong>IsMatch</strong> method of the <strong>Regex</strong> class, as shown in the following example. <div><pre>// Instance method:<br />Regex reg = new Regex(@"^[a-zA-Z'.]{1,40}$");<br />Response.Write(reg.IsMatch(txtName.Text));<br />// Static method:<br />if (!Regex.IsMatch(txtName.Text, <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @"^[a-zA-Z'.]{1,40}$"))<br />{<br />&amp;nbsp; // Name does not match schema<br />}  </pre></div></li>
  </ol>
  <p>For performance reasons, you should use the static <strong>IsMatch</strong> method where possible to avoid unnecessary object creation.</p>
  <p>The following example shows how to use a regular expression to validate a name input through a regular client-side HTML control.</p>
  <div>
    <pre>&lt;%@ Page Language="C#" %&gt;</pre>
    <pre>&lt;html&amp;nbsp; &gt;<br />&amp;nbsp; &lt;body&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;form id="form1" method="post" action="HtmlControls.aspx"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Name:<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;input name="txtName" type="text" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;input name="submitBtn" type="Submit" value="Submit"/&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/form&gt;<br />&amp;nbsp; &lt;/body&gt;<br />&lt;/html&gt;</pre>
  </div>
  <pre>&lt;script runat="server"&gt;</pre>
  <pre>&amp;nbsp; void Page_Load(object sender, EventArgs e)<br />&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; if (Request.RequestType == "POST")<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; string name = Request.Form["txtName"];<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (name.Length &gt; 0)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (System.Text.RegularExpressions.Regex.IsMatch(name, <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "^[a-zA-Z'.]{1,40}$"))<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Response.Write("Valid name");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; else<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Response.Write("Invalid name");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp; }</pre>
  <pre>&lt;/script&gt;  </pre>
  <h2>Use Regular Expression Comments</h2>
  <p>Regular expressions are much easier to understand if you use the following syntax and comment each component of the expression by using a number sign (<strong>#</strong>). To enable comments, you must also specify <strong>RegexOptions.IgnorePatternWhitespace</strong>, which means that non-escaped white space is ignored.</p>
  <div>
    <pre>Regex regex = new Regex(@"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ^&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; # anchor at the start<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (?=.*\d)&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; # must contain at least one numeric character<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (?=.*[a-z])&amp;nbsp; # must contain one lowercase character<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (?=.*[A-Z])&amp;nbsp; # must contain one uppercase character<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; .{8,10}&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; # From 8 to 10 characters in length<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; \s&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; # allows a space <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; $&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; # anchor at the end", <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; RegexOptions.IgnorePatternWhitespace);  </pre>
  </div>
  <h1>Common Regular Expressions</h1>
  <p>Some common regular expressions are shown in Table 1.</p>
  <p>
    <strong>Table 1. Common Regular Expressions</strong>
  </p>
  <div>
    <table>
      <tbody>
        <tr>
          <th>Field </th>
          <th>Expression</th>
          <th>Format Samples</th>
          <th>Description</th>
        </tr>
        <tr>
          <td>Name</td>
          <td>^[a-zA-Z''-'\s]{1,40}$</td>
          <td>John Doe<br />O'Dell</td>
          <td>Validates a name. Allows up to 40 uppercase and lowercase characters and a few special characters that are common to some names. You can modify this list.</td>
        </tr>
        <tr>
          <td>Social Security Number</td>
          <td>^\d{3}-\d{2}-\d{4}$</td>
          <td>111-11-1111</td>
          <td>Validates the format, type, and length of the supplied input field. The input must consist of 3 numeric characters followed by a dash, then 2 numeric characters followed by a dash, and then 4 numeric characters.</td>
        </tr>
        <tr>
          <td>Phone Number</td>
          <td>^[01]?[- .]?(\([2-9]\d{2}\)|[2-9]\d{2})[- .]?\d{3}[- .]?\d{4}$</td>
          <td>(425) 555-0123<br />425-555-0123<br />425 555 0123<br />1-425-555-0123</td>
          <td>Validates a U.S. phone number. It must consist of 3 numeric characters, optionally enclosed in parentheses, followed by a set of 3 numeric characters and then a set of 4 numeric characters. </td>
        </tr>
        <tr>
          <td>E-mail </td>
          <td>^([0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*@([0-9a-zA-Z][-\w]*[0-9a-zA-Z]\.)+[a-zA-Z]{2,9})$</td>
          <td>someone@example.com</td>
          <td>Validates an e-mail address.</td>
        </tr>
        <tr>
          <td>URL</td>
          <td>^(ht|f)tp(s?)\:\/\/[0-9a-zA-Z]([-.\w]*[0-9a-zA-Z])*(:(0-9)*)*(\/?)([a-zA-Z0-9\-\.\?\,\'\/\\\+&amp;%\$#_]*)?$</td>
          <td>http://www.microsoft.com</td>
          <td>Validates a URL </td>
        </tr>
        <tr>
          <td>ZIP Code</td>
          <td>^(\d{5}-\d{4}|\d{5}|\d{9})$|^([a-zA-Z]\d[a-zA-Z] \d[a-zA-Z]\d)$</td>
          <td>12345</td>
          <td>Validates a U.S. ZIP Code. The code must consist of 5 or 9 numeric characters.</td>
        </tr>
        <tr>
          <td>Password</td>
          <td>(?!^[0-9]*$)(?!^[a-zA-Z]*$)^([a-zA-Z0-9]{8,10})$</td>
          <td>&amp;nbsp;</td>
          <td>Validates a strong password. It must be between 8 and 10 characters, contain at least one digit and one alphabetic character, and must not contain special characters.</td>
        </tr>
        <tr>
          <td>Non- negative integer</td>
          <td>^\d+$</td>
          <td>0<br />986</td>
          <td>Validates that the field contains an integer greater than zero.</td>
        </tr>
        <tr>
          <td>Currency (non- negative)</td>
          <td>^\d+(\.\d\d)?$</td>
          <td>1.00</td>
          <td>Validates a positive currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point. For example, 3.00 is valid but 3.1 is not.</td>
        </tr>
        <tr>
          <td>Currency (positive or negative)</td>
          <td>^(-)?\d+(\.\d\d)?$</td>
          <td>1.20</td>
          <td>Validates for a positive or negative currency amount. If there is a decimal point, it requires 2 numeric characters after the decimal point.</td>
        </tr>
      </tbody>
    </table>
  </div>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information, see the regular expression tutorial at <a href="http://www.regular-expressions.info/tutorial.html">http://www.regular-expressions.info/tutorial.html</a>.</li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1935854100" Content_Hash="312903613">
    <Metadata>
      <Id>6bfe7761-6f2a-43c2-a104-7ad3063affb3</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>How to Protect From Injection Attacks in ASP.NET</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>How To</Type>
      <DirectLink>How to Protect From Injection Attacks in ASP.NET</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Summary</h1>
  <p>This How to shows how you can validate input to protect your application from injection attacks. Performing input validation is essential because almost all application-level attacks contain malicious input. </p>
  <p>You should validate all input, including form fields, query string parameters, and cookies to protect your application against malicious command injection. Assume all input to your Web application is malicious, and make sure that you use server validation for all sources of input. Use client-side validation to reduce round trips to the server and to improve the user experience, but do not rely on it because it is easily bypassed. </p>
  <p>To validate input, define acceptable input for each application input field. A proven practice is to constrain input for length, range, format, and type. Use the list of acceptable characters to define valid input, instead of the list of unacceptable characters. Using the list of unacceptable characters is impractical because it is very difficult to anticipate all possible variations of bad input.</p>
  <p>When you need to accept a range of HTML characters, make sure that you HTML-encode the data to make it safe prior to displaying it as output.</p>
  <h1>Contents</h1>
  <ul>
    <li>
      <div>Objectives</div>
    </li>
    <li>
      <div>Overview</div>
    </li>
    <li>
      <div>Summary of Steps</div>
    </li>
    <li>
      <div>Step 1. Use ASP.NET Request Validation</div>
    </li>
    <li>
      <div>Step 2. Constrain Input</div>
    </li>
    <li>
      <div>Step 3. Encode Unsafe Output</div>
    </li>
    <li>
      <div>Step 4. Use Command Parameters for SQL Queries</div>
    </li>
    <li>
      <div>Step 5. Verify that ASP.NET Errors Are Not Returned to the Client</div>
    </li>
    <li>
      <div>Additional Resources</div>
    </li>
  </ul>
  <h1>Objectives</h1>
  <ul>
    <li>Constrain input for length, range, format, and type. </li>
    <li>Apply ASP.NET request validation during development to identify injection attacks. </li>
    <li>Constrain input by using ASP.NET validator controls. </li>
    <li>Encode unsafe output. </li>
    <li>Help prevent SQL injection by using command parameters. </li>
    <li>Prevent detailed error information from returning to the client. </li>
  </ul>
  <h1>Overview</h1>
  <p>You need to validate all untrusted input to your application. You should assume that any input from users is malicious. User input to your Web application includes form fields, query strings, client-side cookies, and browser environment values such as user agent strings and IP addresses. </p>
  <p>Weak input validation is a common vulnerability that could allow your application to be exploited by a number of injection attacks. The following are common types of attacks that exploit weak or missing input validation: </p>
  <ul>
    <li>
      <strong>SQL injection. </strong>If you generate dynamic SQL queries based on user input, an attacker could inject malicious SQL commands that can be executed by the database. </li>
    <li>
      <strong>Cross-site scripting.</strong> Cross-site scripting (XSS) attacks exploit vulnerabilities in Web page validation by injecting client-side script code. This code is subsequently sent to an unsuspecting user's computer and executed on the browser. Because the browser downloads the script code from a trusted site, the browser has no way of determining whether the code is legitimate. </li>
    <li>
      <strong>Unauthorized file access.</strong> If your code accepts input from a caller, a malicious user could potentially manipulate your code's file operations, such as accessing a file they should not access or exploiting your code by injecting bad data. </li>
  </ul>
  <blockquote>
    <strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;Injection attacks work over HTTP and HTTPS Secure Socket Layer (SSL) connections. Encryption provides no defense.</blockquote>
  <p>The general approach for input validation is summarized here. You should apply this approach to any input that comes from the network, such as text boxes and other forms field input, query string parameters, cookies, server variables, and Web method parameters. Note that the strategy is to first allow only good input and then deny bad input. This is because you can easily define good input for your application, but you cannot realistically anticipate the format for all malicious input. </p>
  <p>Check for valid input as follows: </p>
  <ul>
    <li>
      <strong>Constrain: </strong>Check for known good data by validating the type, length, format, and range. To constrain input from server controls, use the ASP.NET validator controls. To constrain input from other sources, use regular expressions and custom validation. </li>
    <li>
      <strong>Reject:</strong> Check for any known bad data and reject bad input. </li>
    <li>
      <strong>Sanitize:</strong> Sometimes you also need to sanitize input and make potentially malicious input safe. For example, if your application supports free-format input fields, such as comment fields, you might want to permit certain safe HTML elements, such as &lt;<strong>b</strong>&gt; and &lt;<strong>i</strong>&gt;, and eliminate any other HTML elements. </li>
  </ul>
  <h1>Summary of Steps</h1>
  <p>To protect your ASP.NET application from injection attacks, perform the following steps: </p>
  <ul>
    <li>Step 1. Use ASP.NET request validation. </li>
    <li>Step 2. Constrain input. </li>
    <li>Step 3. Encode unsafe output. </li>
    <li>Step 4. Use command parameters for SQL queries. </li>
    <li>Step 5. Verify that ASP.NET errors are not returned to the client. </li>
  </ul>
  <p>The next sections describe each of these.</p>
  <h1>Step 1. Use ASP.NET Request Validation</h1>
  <p>By default, ASP.NET request validation detects any HTML elements and reserved characters in data posted to the server. This helps prevent users from inserting scripts into your application. Request validation checks all input data against a hard-coded list of potentially dangerous values. If a match occurs, it throws an exception of type <strong>HttpRequestValidationException</strong>.</p>
  <p>You can disable request validation in your Web.config application configuration file by adding a &lt;<strong>pages</strong>&gt; element with <strong>validateRequest="false"</strong> or on an individual page by setting <strong>ValidateRequest="false"</strong> on the <strong>@ Pages</strong> element. </p>
  <p>If you need to disable request validation, you should disable it only on the affected page. An example of this is when you have a page with a free-format text field that accepts HTML-formatted input.</p>
  <h2>Confirm that ASP.NET Request Validation Is Enabled in Machine.config</h2>
  <p>Request validation is enabled by ASP.NET by default. You can see the following default setting in the Machine.config.comments file.</p>
  <div>
    <pre>&lt;pages validateRequest="true" ... /&gt;  </pre>
  </div>
  <p>Confirm that you have not disabled request validation by overriding the default settings in your server's Machine.config file or your application's Web.config file. </p>
  <h2>Test ASP.NET Request Validation</h2>
  <p>You can test the effects of request validation. To do this, create an ASP.NET page that disables request validation by setting <strong>ValidateRequest="false"</strong>, as follows.</p>
  <div>
    <pre>&lt;%@ Language="C#" ValidateRequest="false" %&gt;<br />&lt;html&gt;<br />&amp;nbsp;&lt;script runat="server"&gt;<br />&amp;nbsp; void btnSubmit_Click(Object sender, EventArgs e)<br />&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // If ValidateRequest is false, then 'hello' is displayed<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // If ValidateRequest is true, then ASP.NET returns an exception<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; Response.Write(txtString.Text);<br />&amp;nbsp; }<br />&amp;nbsp;&lt;/script&gt;<br />&amp;nbsp;&lt;body&gt;<br />&amp;nbsp; &lt;form id="form1" runat="server"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:TextBox id="txtString" runat="server" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Text="&lt;script&gt;alert('hello');&lt;/script&gt;" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:Button id="btnSubmit" runat="server" OnClick="btnSubmit_Click" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Text="Submit" /&gt;<br />&amp;nbsp; &lt;/form&gt;<br />&amp;nbsp;&lt;/body&gt;<br />&lt;/html&gt;  </pre>
  </div>
  <p>When you run the page, "Hello" is displayed in a message box because the script in <strong>txtString</strong> is passed through and rendered as client-side script in your browser.</p>
  <p>If you set <strong>ValidateRequest="true" </strong>or remove the <strong>ValidateRequest</strong> page attribute, ASP.NET request validation rejects the script input and produces an error similar to the following.</p>
  <div>
    <pre>A potentially dangerous Request.Form value was detected from the client (txtString="&lt;script&gt;alert('hello...").  </pre>
  </div>
  <blockquote>
    <strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;Do not rely on ASP.NET request validation. Treat it as an extra precautionary measure in addition to your own input validation.</blockquote>
  <h1>Step 2. Constrain Input</h1>
  <p>To constrain input, follow these guidelines: </p>
  <ul>
    <li>
      <strong>Use server-side input validation.</strong> Do not rely on client-side validation because it is easily bypassed. Use client-side validation in addition to server-side validation to reduce round trips to the server and to improve the user experience. </li>
    <li>
      <strong>Validate length, range, format and type.</strong> Make sure that any input meets your guidelines for known good input. </li>
    <li>
      <strong>Use strong data typing. </strong>Assign numeric values to numeric data types such as <strong>Integer</strong> or <strong>Double</strong>. Assign string values to string data types. Assign dates to the <strong>DateTime</strong> data type. </li>
  </ul>
  <p>For Web form applications that obtain input through server controls, use the ASP.NET validator controls to constrain the input. For other sources of input data, such as query strings, cookies, and HTTP headers, constrain input by using the <strong>Regex</strong> class from the <strong>System.Text.RegularExpressions</strong> namespace.</p>
  <h2>Explicitly Check Input from Form Fields</h2>
  <p>To constrain form field input received through server controls, you can use the following ASP.NET validator controls: </p>
  <ul>
    <li>
      <strong>RegularExpressionValidator.</strong> Use this control to constrain text input. </li>
    <li>
      <strong>RangeValidator.</strong> Use this control to check the ranges of numeric, currency, date, and string input. </li>
    <li>
      <strong>CustomValidator.</strong> Use this control for custom validation, such as ensuring that a date is in the future or in the past. </li>
  </ul>
  <p>To validate form field input received through HTML input controls, perform validation in server-side code and use the <strong>Regex</strong> class to help constrain text input. The following sections describe how to constrain a variety of common input types.</p>
  <h3>Validating Text Fields </h3>
  <ul>
    <li>To validate text fields, such as names, addresses, and tax identification numbers, use regular expressions to do the following: </li>
    <li>Constrain the acceptable range of input characters. </li>
    <li>Apply formatting rules. For example, pattern-based fields, such as tax identification numbers, ZIP Codes, or postal codes, require specific patterns of input characters. </li>
    <li>Check lengths. </li>
  </ul>
  <h3>Using a RegularExpressionValidator</h3>
  <p>To use a <strong>RegularExpressionValidator</strong>, set the <strong>ControlToValidate</strong>, <strong>ValidationExpression</strong>, and <strong>ErrorMessage </strong>properties to appropriate values as shown in the following example.</p>
  <div>
    <pre>&lt;form id="WebForm" method="post" runat="server"&gt;<br />&amp;nbsp; &lt;asp:TextBox id="txtName" runat="server"&gt;&lt;/asp:TextBox&gt;<br />&amp;nbsp; &lt;asp:RegularExpressionValidator id="nameRegex" runat="server" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ControlToValidate="txtName" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ValidationExpression="^[a-zA-Z'.\s]{1,40}$" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ErrorMessage="Invalid name"&gt;<br />&amp;nbsp; &lt;/asp:regularexpressionvalidator&gt;<br />&lt;/form&gt;  </pre>
  </div>
  <p>The regular expression used in the preceding code example limits an input name field to alphabetic characters (lowercase and uppercase), space characters, the single apostrophe for names such as O'Dell, and the period. In addition, the field length is constrained to 40 characters.</p>
  <blockquote>
    <strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;The <strong>RegularExpressionValidator</strong> control automatically adds a caret (^) and dollar sign ($) as delimiters to the beginning and end of expressions if you have not added them yourself. You should add them to all of your regular expressions as a good practice.&amp;nbsp; Enclosing the expression in the delimiters ensures that the expression consists of the desired content and nothing else.</blockquote>
  <h3>Using the Regex Class</h3>
  <p>If you are not using server controls (which means you cannot use the validator controls), or you need to validate input from sources other than form fields (such as from query string parameters or cookies), you can use a <strong>Regex</strong> class.</p>
  <p>
    <strong>To use the Regex class</strong>
  </p>
  <ol>
    <li>Add a <strong>using</strong> statement to reference the<strong> System.Text.RegularExpressions</strong> namespace. </li>
    <li>Ensure that the regular expression is contained in the ^ and $ anchor characters (beginning of string, end of string). </li>
    <li>Call the <strong>IsMatch</strong> method of the <strong>Regex</strong> class, as shown in the following code example. </li>
  </ol>
  <div>
    <pre>// Instance method:<br />Regex reg = new Regex(@"^[a-zA-Z'.\s]{1,40}$");<br />Response.Write(reg.IsMatch(txtName.Text));</pre>
  </div>
  <pre>// Static method:<br />if (!Regex.IsMatch(txtName.Text,@"^[a-zA-Z'.\s]{1,40}$")) <br />{<br />&amp;nbsp; // Name does not match expression<br />}</pre>
  <p>If you cannot cache your regular expression for frequent use, you should use the static <strong>IsMatch</strong> method where possible for performance reasons, to avoid unnecessary object creation.</p>
  <h3>Validating Numeric Fields</h3>
  <p>In most cases, numeric fields should be checked for type and range. To validate the type and range of a numeric input field that uses a server control, you can use a <strong>RangeValidator</strong> control. The <strong>RangeValidator</strong> supports currency, date, integer, double, and string data types. </p>
  <p>To use a <strong>RangeValidator</strong>, set the <strong>ControlToValidate</strong>, <strong>Type</strong>, <strong>MinimumValue</strong>, <strong>MaximumValue</strong>, and <strong>ErrorMessage</strong> properties to appropriate values as shown in the following example.</p>
  <div>
    <pre>&lt;asp:RangeValidator <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ID="RangeValidator1" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Runat="server" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ErrorMessage="Invalid range. Number must be between 0 and 255."<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ControlToValidate="rangeInput" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; MaximumValue="255" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; MinimumValue="0" Type="Integer" /&gt;  </pre>
  </div>
  <p>If you are not using a server control, you can validate a numeric range by converting the input value to an integer and then performing a range check. For example, to validate that an integer is valid, convert the input value to a variable of type <strong>System.Int32</strong> by using the <strong>Int32.TryParse</strong> method. This method returns <strong>false</strong> if the type conversion fails.</p>
  <div>
    <pre>Int32 i;<br />if (Int32.TryParse(txtInput.Text, out i) == false)<br />{<br />&amp;nbsp; // Conversion failed<br />}  </pre>
  </div>
  <p>The following code shows how to perform a type and range check for an integer entered through an HTML text input control. </p>
  <div>
    <pre>&lt;%@ Page Language="C#" %&gt;</pre>
    <pre>&lt;script runat="server"&gt;</pre>
    <pre>&amp;nbsp; void Page_Load(object sender, EventArgs e)<br />&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; if (Request.RequestType == "POST")<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; int i;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (Int32.TryParse(Request.Form["integerTxt"], out i) == true)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // TryParse returns true if the conversion succeeds<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if ((0 &lt;= i &amp;&amp; i &lt;= 255) == true)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Response.Write("Input data is valid.");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; else<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Response.Write("Input data is out of range");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; else<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Response.Write("Input data is not an integer");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp; <br />&lt;/script&gt;</pre>
  </div>
  <pre>&lt;html&gt;<br />&amp;nbsp; &lt;body&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;form id="form1" action="NumericInput.aspx" method="post"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;div&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Enter an integer between 0 and 255:<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;input name="integerTxt" type="text" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;input name="Submit" type="submit" value="submit" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/form&gt;<br />&amp;nbsp; &lt;/body&gt;<br />&lt;/html&gt;</pre>
  <h3>Validating Date Fields</h3>
  <p>You need to validate that date fields are of the correct type. In most cases, you also need to check them for range, for example to validate that they are in the future or past. If you use a server control to capture an input date, and if you also need to validate that a date falls within a specific range, you can use a <strong>RangeValidator</strong> control with its <strong>Type</strong> field set to <strong>Date</strong>. This control lets you specify a range by using constant date values. If you need to validate a date range based on today's date, for example to validate that a date is in the future or the past, you can use a <strong>CustomValidator</strong> control.</p>
  <p>To use a <strong>CustomValidator</strong> control to validate a date, set the <strong>ControlToValidate</strong> and <strong>ErrorMessage</strong> properties and the <strong>OnServerValidate</strong> event to point to a custom method containing your validation logic. The following sample .aspx page code shows this approach.</p>
  <div>
    <pre>&lt;%@ Page Language="C#" %&gt;</pre>
    <pre>&lt;script runat="server"&gt;</pre>
    <pre>&amp;nbsp;void ValidateDateInFuture(object source, ServerValidateEventArgs args)<br />&amp;nbsp;{<br />&amp;nbsp;&amp;nbsp; DateTime dt;</pre>
  </div>
  <pre>&amp;nbsp;&amp;nbsp; // Check for valid date and that the date is in the future<br />&amp;nbsp;&amp;nbsp; if ((DateTime.TryParse(args.Value, out dt) == false) || <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; (dt &lt;= DateTime.Today))<br />&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; args.IsValid = false;<br />&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;}&amp;nbsp;</pre>
  <pre>&lt;/script&gt;</pre>
  <pre>&lt;html&gt;<br />&amp;nbsp; &lt;body&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;form id="form1" runat="server"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;div&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:Label ID="Label1" Runat="server" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Text="Future Date:"&gt;&lt;/asp:Label&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:TextBox ID="futureDatetxt" Runat="server"&gt;&lt;/asp:TextBox&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:CustomValidator <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ID="CustomValidator1" Runat="server" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ErrorMessage="Invalid date. Enter a date in the future."<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ControlToValidate="futureDatetxt"&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; OnServerValidate="ValidateDateInFuture"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/asp:CustomValidator&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;br /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:Button ID="submitBtn" Runat="server" Text="Submit"&amp;nbsp; /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/form&gt;<br />&amp;nbsp; &lt;/body&gt;<br />&lt;/html&gt;<br /></pre>
  <blockquote>
    <strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;The preceding code uses <strong>DateTime.TryParse</strong>, which is new to .NET Framework 2.0.</blockquote>
  <h2>Sanitizing Free-Text Fields</h2>
  <p>To <em>sanitize</em> input, you make untrusted input safe by preventing it from being treated as code. For example, if your application handles user input that it cannot constrain or reads data from a shared database, you might need to sanitize the data or make the output safe when you write it on your page. Sanitize data prior to output by using <strong>AntiXSSLibrary.HtmlEncode</strong>. </p>
  <h2>Allowing Restricted HTML Input</h2>
  <p>If your application needs to accept a range of HTML elements—for example through a rich text input field such as a comments field—turn off ASP.NET request validation and create a filter that allows only the HTML elements that you want your application to accept. A common practice is to restrict formatting to safe HTML elements such as &lt;<strong>b</strong>&gt; (bold) and &lt;<strong>i</strong>&gt; (italic). Before writing the data, HTML-encode it. This makes any malicious script safe by causing it to be handled as text, not as executable code. </p>
  <h2>To allow restricted HTML input </h2>
  <ol>
    <li>Disable ASP.NET request validation by the adding the <strong>ValidateRequest="false"</strong> attribute to the <strong>@ Page</strong> directive. </li>
    <li>Encode the string input with the <strong>HtmlEncode</strong> method. </li>
    <li>Use a <strong>StringBuilder</strong> and call its Replace method to selectively remove the encoding on the HTML elements that you want to permit. </li>
  </ol>
  <p>The following .aspx page code shows this approach. The page disables ASP.NET request validation by setting <strong>ValidateRequest="false"</strong>. It HTML-encodes the input and selectively allows the &lt;<strong>b</strong>&gt; and &lt;<strong>i</strong>&gt; HTML elements to support simple text formatting. </p>
  <div>
    <pre>&lt;%@ Page Language="C#" ValidateRequest="false"%&gt;</pre>
    <pre>&lt;script runat="server"&gt;</pre>
    <pre>&amp;nbsp; void submitBtn_Click(object sender, EventArgs e)<br />&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // Encode the string input<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; StringBuilder sb = new StringBuilder(<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; AntiXSSLibrary.HtmlEncode(htmlInputTxt.Text));<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // Selectively allow&amp;nbsp; and &lt;i&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; sb.Replace("&lt;b&gt;", "&lt;b&gt;");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; sb.Replace("&lt;/b&gt;", "");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; sb.Replace("&lt;i&gt;", "&lt;i&gt;");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; sb.Replace("&lt;/i&gt;", "");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; Response.Write(sb.ToString());<br />&amp;nbsp; }<br />&lt;/script&gt;</pre>
    <pre>&lt;html&gt;<br />&amp;nbsp; &lt;body&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;form id="form1" runat="server"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;div&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:TextBox ID="htmlInputTxt" Runat="server" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; TextMode="MultiLine" Width="318px"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Height="168px"&gt;&lt;/asp:TextBox&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:Button ID="submitBtn" Runat="server" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Text="Submit" OnClick="submitBtn_Click" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/form&gt;<br />&amp;nbsp; &lt;/body&gt;<br />&lt;/html&gt;  </pre>
  </div>
  <h2>Validate Query String Values</h2>
  <p>Validate query string values for length, range, format, and type. You usually do this by using a combination of regular expressions to: </p>
  <ul>
    <li>Constrain the input values. </li>
    <li>Set explicit range checks. </li>
    <li>Specify the explicit type checks performed by converting the input value to its equivalent .NET Framework type and handling any ensuing conversion errors. </li>
  </ul>
  <p>The following code example shows how to use the <strong>Regex</strong> class to validate a name string passed on a query string. </p>
  <div>
    <pre>void Page_Load(object sender, EventArgs e)<br />{<br />&amp;nbsp; if (!System.Text.RegularExpressions.Regex.IsMatch(<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Request.QueryString["Name"], @"^[a-zA-Z'.\s]{1,40}$"))<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; Response.Write("Invalid name parameter");<br />&amp;nbsp; else<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; Response.Write("Name is " + Request.QueryString["Name"]);<br />}  </pre>
  </div>
  <h2>Validate Cookie Values</h2>
  <p>Values maintained in cookies, such as query string parameters, can easily be manipulated by a client. Validate cookie values in the same way as you would for query string parameters. Validate them for length, range, format, and type.</p>
  <h2>Validate File and URL Paths</h2>
  <p>If your application has to accept input file names, file paths, or URL paths, you need to validate that the path is in the correct format and that it points to a valid location within the context of your application. Failure to do this can result in attackers persuading your application into accessing arbitrary files and resources. </p>
  <h3>Validating File Paths</h3>
  <p>To prevent a malicious user manipulating your code's file operations, avoid writing code that accepts user-supplied file or path input. For example: </p>
  <ul>
    <li>If you must accept file names as input, use the full name of the file by using <strong>System.IO.Path.GetFileName</strong>. </li>
    <li>If you must accept file paths as input, use the full file path by using <strong>System.IO.Path.GetFullPath</strong>. </li>
  </ul>
  <h3>Using MapPath to Prevent Cross Application Mapping</h3>
  <p>If you use <strong>MapPath</strong> to map a supplied virtual path to a physical path on the server, use the overload of <strong>Request.MapPath</strong> that accepts a <strong>bool</strong> parameter so that you can prevent cross-application mapping. The following code example shows this technique.</p>
  <div>
    <pre>try<br />{<br />&amp;nbsp; string mappedPath = Request.MapPath( inputPath.Text, <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Request.ApplicationPath, false);<br />}<br />catch (HttpException)<br />{<br />&amp;nbsp; // Cross-application mapping attempted<br />}  </pre>
  </div>
  <p>The final <strong>false</strong> parameter prevents cross-application mapping. This means that a user cannot successfully supply a path that contains <strong>".."</strong> to traverse outside of your application's virtual directory hierarchy. Any attempt to do this results in an exception of type <strong>HttpException</strong>.</p>
  <p>If you use server controls, you can use the <strong>Control.MapPathSecure</strong> method to retrieve the physical path to which the virtual path is mapped. <strong>Control.MapPathSecure</strong> uses code access security and throws an <strong>HttpException</strong> if the server control does not have permissions to read the resulting mapped file. For more information, see <strong>Control.MapPathSecure</strong> in the .NET Framework SDK documentation.</p>
  <h3>Using Code Access Security to Restrict File I/O</h3>
  <p>An administrator can restrict an application's file I/O to its own virtual directory hierarchy by configuring the application to run with Medium trust. In this event, .NET code access security ensures that no file access is permitted outside of the application's virtual directory hierarchy.</p>
  <p>You configure an application to run with Medium trust by setting the &lt;<strong>trust</strong>&gt; element in Web.config or Machine.config.</p>
  <div>
    <pre>&lt;trust level="Medium" /&gt;  </pre>
  </div>
  <h3>Validating URLs</h3>
  <p>You can filter for a valid URL format using a regular expression, such as the following.</p>
  <div>
    <pre>^(?:http|https|ftp)://[a-zA-Z0-9\.\-]+(?:\:\d{1,5})?(?:[A-Za-z0-9\.\;\:\@\&amp;\=\+\$\,\?/]|%u[0-9A-Fa-f]{4}|%[0-9A-Fa-f]{2})*$  </pre>
  </div>
  <p>This constrains the input, but it does not validate whether the URL is valid in terms of the application boundaries. You should check whether the target is valid in the context of your application. For example, does it point to an authorized server that you expect your application to communicate with?</p>
  <h1>Step 3. Encode Unsafe Output</h1>
  <p>If you write text output to a Web page, encode it using <strong>AntiXSSLibrary.HtmlEncode</strong>. Do this if the text came from user input, a database, or a local file. </p>
  <p>Similarly, if you write URLs that might contain unsafe characters because they have been constructed from input data or data from a shared database, use <strong>AntiXSSLibrary.UrlEncode</strong> to make them safe. </p>
  <p>Avoid the mistake of encoding the data early. Make sure you encode at the last possible opportunity before the data is displayed to the client. </p>
  <p>Do not use the <strong>HttpUtilty </strong>class provided by ASP.NET as it does not do a complete job of protecting against cross site scripting attacks, the <strong>AntiXSSLibrary </strong>is much more effective.</p>
  <h2>Use HtmlEncode to Encode Unsafe Output</h2>
  <p>The <strong>HtmlEncode</strong> method replaces characters that have special meaning in HTML to HTML variables that represent those characters. For example, &lt; is replaced with <strong>&lt;</strong> and <strong>"</strong> is replaced with <strong>"</strong>. Encoded data does not cause the browser to execute code. Instead, the data is rendered as harmless text, and the tags are not interpreted as HTML.</p>
  <p>To illustrate the use of <strong>HtmlEncode</strong>, the following page accepts input from the user and allows potentially unsafe HTML characters by setting <strong>ValidateRequest="false"</strong>. Before writing the input back to the user, the code calls <strong>AntiXSSLibrary.HtmlEncode</strong> on the supplied input text. This renders any potentially unsafe HTML as harmless text. </p>
  <div>
    <pre>&lt;%@ Page Language="C#" ValidateRequest="false" %&gt;</pre>
    <pre>&lt;script runat="server"&gt;<br />&amp;nbsp; void submitBtn_Click(object sender, EventArgs e)<br />&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Response.Write(AntiXSSLibrary.HtmlEncode(inputTxt.Text));<br />&amp;nbsp; }<br />&lt;/script&gt;</pre>
    <pre>&lt;html&amp;nbsp; &gt;<br />&amp;nbsp; &lt;body&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;form id="form1" runat="server"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;div&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:TextBox ID="inputTxt" Runat="server" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; TextMode="MultiLine" Width="382px" Height="152px"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/asp:TextBox&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:Button ID="submitBtn" Runat="server" Text="Submit" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; OnClick="submitBtn_Click" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/form&gt;<br />&amp;nbsp; &lt;/body&gt;<br />&lt;/html&gt;  </pre>
  </div>
  <p>To see the effect of the HTML encoding, place the preceding page in a virtual directory, browse to it, enter some HTML code in the input text box, and click <strong>Submit</strong>. For example, the following input is rendered as text.</p>
  <div>
    <pre>Run script and say hello &lt;script&gt;alert('hello');&lt;/script&gt;  </pre>
  </div>
  <p>It produces the following safe output.</p>
  <div>
    <pre>Run script and say hello &lt;script&gt;alert('hello');&lt;/script&gt;  </pre>
  </div>
  <p>If you remove the call to <strong>HtmlEncode</strong> and simply write back the input, the browser executes the script and displays a message box. Malicious script could pose a significant threat. </p>
  <h2>Use UrlEncode to Encode Unsafe URLs</h2>
  <p>If you need to write URLs that are based on input that you do not fully trust, use <strong>AntiXSSLibrary.UrlEncode</strong> to encode the URL string.</p>
  <div>
    <pre>AntiXSSLibrary.UrlEncode( urlString );  </pre>
  </div>
  <h1>Step 4. Use Command Parameters for SQL Queries</h1>
  <p>To help prevent SQL injection, use command parameters for SQL queries. The <strong>Parameters</strong> collection provides type checking and length validation. If you use the <strong>Parameters</strong> collection, input is treated as a literal value and SQL does not treat it as executable code. An additional benefit of using the <strong>Parameters</strong> collection is that you can enforce type and length checks. Values outside of the range trigger an exception.</p>
  <h2>Use Parameters Collection When You Call a Stored Procedure</h2>
  <p>The following code fragment illustrates the use of the <strong>Parameters</strong> collection when calling a stored procedure.</p>
  <div>
    <pre>SqlDataAdapter myCommand = new SqlDataAdapter("AuthorLogin", <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; myConnection);<br />myCommand.SelectCommand.CommandType = CommandType.StoredProcedure;<br />SqlParameter parm = myCommand.SelectCommand.Parameters.Add(<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "@LoginId", SqlDbType.VarChar, 11);<br />parm.Value = Login.Text;  </pre>
  </div>
  <h2>Use Parameters Collection When Building Your SQL Statements</h2>
  <p>If you cannot use stored procedures, you can still use parameters, as shown in the following code fragment.</p>
  <div>
    <pre>SqlDataAdapter myCommand = new SqlDataAdapter(<br />"SELECT au_lname, au_fname FROM Authors WHERE au_id = @au_id", myConnection);<br />SQLParameter parm = myCommand.SelectCommand.Parameters.Add(<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "@au_id" ,SqlDbType.VarChar, 11);<br />Parm.Value = Login.Text;  </pre>
  </div>
  <h1>Step 5. Verify that ASP.NET Errors Are Not Returned to the Client</h1>
  <p>You can use the &lt;<strong>customErrors</strong>&gt; element to configure custom, generic error messages that should be returned to the client in the event of an application exception condition.</p>
  <p>Make sure that the <strong>mode</strong> attribute is set to <strong>"remoteOnly"</strong> in the web.config file as shown in the following example.</p>
  <div>
    <pre>&lt;customErrors mode="remoteOnly" /&gt;  </pre>
  </div>
  <p>After installing an ASP.NET application, you can configure the setting to point to your custom error page as shown in the following example.</p>
  <div>
    <pre>&lt;customErrors mode="On" defaultRedirect="YourErrorPage.htm" /&gt;  </pre>
  </div>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="714443521" Content_Hash="1711132889">
    <Metadata>
      <Id>7729f9db-bfae-4606-acab-4b80ec099a2f</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>How to Prevent Cross-Site Scripting in ASP.NET</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>How To</Type>
      <DirectLink>How to Prevent Cross-Site Scripting in ASP.NET</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Summary</h1>
  <p>This How to shows how you can help protect your ASP.NET applications from cross-site scripting attacks by using proper input validation techniques and by encoding the output. It also describes a number of other protection mechanisms that you can use in addition to these two main countermeasures.</p>
  <p>Cross-site scripting (XSS) attacks exploit vulnerabilities in Web page validation by injecting client-side script code. Common vulnerabilities that make your Web applications susceptible to cross-site scripting attacks include failing to properly validate input, failing to encode output, and trusting the data retrieved from a shared database. To protect your application against cross-site scripting attacks, assume that all input is malicious. Constrain and validate all input. Encode all output that could, potentially, include HTML characters. This includes data read from files and databases.</p>
  <h1>Contents</h1>
  <ul>
    <li>
      <div>Objectives</div>
    </li>
    <li>
      <div>Overview</div>
    </li>
    <li>
      <div>Summary of Steps</div>
    </li>
    <li>
      <div>Step 1. Check That ASP.NET Request Validation Is Enabled</div>
    </li>
    <li>
      <div>Step 2. Review ASP.NET Code That Generates HTML Output</div>
    </li>
    <li>
      <div>Step 3. Determine Whether HTML Output Includes Input Parameters</div>
    </li>
    <li>
      <div>Step 4. Review Potentially Dangerous HTML Tags and Attributes</div>
    </li>
    <li>
      <div>Step 5. Evaluate Countermeasures</div>
    </li>
    <li>
      <div>Additional Considerations</div>
    </li>
    <li>
      <div>Additional Resources</div>
    </li>
  </ul>
  <h1>Objectives</h1>
  <ul>
    <li>Understand the common cross-site scripting vulnerabilities in Web page validation. </li>
    <li>Apply countermeasures for cross-site scripting attacks. </li>
    <li>Constrain input by using regular expressions, type checks, and ASP.NET validator controls. </li>
    <li>Constrain output to ensure the browser does not execute HTML tags that contain script code. </li>
    <li>Review potentially dangerous HTML tags and attributes and evaluate countermeasures. </li>
  </ul>
  <h1>Overview</h1>
  <p>Cross-site scripting attacks exploit vulnerabilities in Web page validation by injecting client-side script code. The script code embeds itself in response data, which is sent back to an unsuspecting user. The user's browser then runs the script code. Because the browser downloads the script code from a trusted site, the browser has no way of recognizing that the code is not legitimate, and Microsoft Internet Explorer security zones provide no defense. Cross-site scripting attacks work over HTTP and HTTPS (SSL) connections.&amp;nbsp; </p>
  <p>One of the most serious examples of a cross-site scripting attack occurs when an attacker writes script to retrieve the authentication cookie that provides access to a trusted site and then posts the cookie to a Web address known to the attacker. This enables the attacker to spoof the legitimate user's identity and gain illicit access to the Web site.</p>
  <p>Common vulnerabilities that make your Web application susceptible to cross-site scripting attacks include: </p>
  <ul>
    <li>Failing to constrain and validate input. </li>
    <li>Failing to encode output. </li>
    <li>Trusting data retrieved from a shared database. </li>
  </ul>
  <h2>Guidelines</h2>
  <p>The two most important countermeasures to prevent cross-site scripting attacks are to: </p>
  <ul>
    <li>
      <strong>Constrain input</strong>.<strong></strong></li>
    <li>
      <strong>Encode output</strong>. </li>
  </ul>
  <h3>Constrain Input</h3>
  <p>Start by assuming that all input is malicious. Validate input type, length, format, and range. </p>
  <ul>
    <li>To constrain input supplied through server controls, use ASP.NET validator controls such as <strong>RegularExpressionValidator</strong> and <strong>RangeValidator</strong>. </li>
    <li>To constrain input supplied through client-side HTML input controls or input from other sources such as query strings or cookies, use the <strong>System.Text.RegularExpressions.Regex</strong> class in your server-side code to check for expected using regular expressions. </li>
    <li>To validate types such as integers, doubles, dates, and currency amounts, convert the input data to the equivalent .NET Framework data type and handle any resulting conversion errors. </li>
  </ul>
  <h3>Encode Output</h3>
  <p>Use the <strong>AntiXSSLibrary.HtmlEncode</strong> method to encode output if it contains input from the user or from other sources such as databases. <strong>HtmlEncode</strong> replaces characters that have special meaning in HTML-to-HTML variables that represent those characters. For example, &lt; is replaced with <strong>&lt;</strong> and <strong>"</strong> is replaced with <strong>"</strong>. Encoded data does not cause the browser to execute code. Instead, the data is rendered as harmless HTML.</p>
  <p>Similarly, use <strong>AntiXSSLibrary.UrlEncode</strong> to encode output URLs if they are constructed from input.</p>
  <h1>Summary of Steps</h1>
  <p>To prevent cross-site scripting, perform the following steps: </p>
  <ul>
    <li>Step 1. Check that ASP.NET request validation is enabled. </li>
    <li>Step 2. Review ASP.NET code that generates HTML output. </li>
    <li>Step 3. Determine whether HTML output includes input parameters. </li>
    <li>Step 4. Review potentially dangerous HTML tags and attributes. </li>
    <li>Step 5. Evaluate countermeasures. </li>
  </ul>
  <h1>Step 1. Check That ASP.NET Request Validation Is Enabled</h1>
  <p>By default, request validation is enabled in Machine.config. Verify that request validation is currently enabled in your server's Machine.config file and that your application does not override this setting in its Web.config file. Check that <strong>validateRequest</strong> is set to <strong>true </strong>as shown in the following code example.</p>
  <div>
    <pre>&lt;system.web&gt;<br />&amp;nbsp; &lt;pages buffer="true" validateRequest="true" /&gt;<br />&lt;/system.web&gt;  </pre>
  </div>
  <p>You can disable request validation on a page-by-page basis. Check that your pages do not disable this feature unless necessary. For example, you may need to disable this feature for a page if it contains a free-format, rich-text entry field designed to accept a range of HTML characters as input. </p>
  <h2>To test that ASP.NET request validation is enabled </h2>
  <ol>
    <li>Create an ASP.NET page that disables request validation. To do this, set <strong>ValidateRequest="false"</strong>, as shown in the following code example. <div><pre>&lt;%@ Page Language="C#" ValidateRequest="false" %&gt;<br />&lt;html&gt;<br />&amp;nbsp;&lt;script runat="server"&gt;<br />&amp;nbsp; void btnSubmit_Click(Object sender, EventArgs e)<br />&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // If ValidateRequest is false, then 'hello' is displayed<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // If ValidateRequest is true, then ASP.NET returns an exception<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; Response.Write(txtString.Text);<br />&amp;nbsp; }<br />&amp;nbsp;&lt;/script&gt;<br />&amp;nbsp;&lt;body&gt;<br />&amp;nbsp; &lt;form id="form1" runat="server"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:TextBox id="txtString" runat="server" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Text="&lt;script&gt;alert('hello');&lt;/script&gt;" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:Button id="btnSubmit" runat="server"&amp;nbsp;&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; OnClick="btnSubmit_Click" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Text="Submit" /&gt;<br />&amp;nbsp; &lt;/form&gt;<br />&amp;nbsp;&lt;/body&gt;<br />&lt;/html&gt;  </pre></div></li>
    <li>Run the page. It displays <strong>Hello</strong> in a message box&amp;nbsp;because the script in txtString is passed through and rendered as a client-side script in your browser.&amp;nbsp;</li>
    <li>Set <strong>ValidateRequest="true"</strong> or remove the <strong>ValidateRequest</strong> page attribute and browse to the page again. Verify that the following error message is displayed. <div><pre>A potentially dangerous Request.Form value was detected from the client (txtString="&lt;script&gt;alert('hello...").  </pre></div><p>This indicates that ASP.NET request validation is active and has rejected the input because it includes potentially dangerous HTML characters. </p><blockquote><strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;Do not rely on ASP.NET request validation. Treat it as an extra precautionary measure in addition to your own input validation.</blockquote></li>
  </ol>
  <h1>
    <br />Step 2. Review ASP.NET Code That Generates HTML Output</h1>
  <p>ASP.NET writes HTML as output in two ways, as shown in the following code examples.</p>
  <div>
    <pre>Response.Write<br />&lt;% = </pre>
  </div>
  <p>Search your pages to locate where HTML and URL output is returned to the client.</p>
  <h1>Step 3. Determine Whether HTML Output Includes Input Parameters</h1>
  <p>Analyze your design and your page code to determine whether the output includes any input parameters. These parameters can come from a variety of sources. The following list includes common input sources: </p>
  <ul>
    <li>
      <strong>Form fields</strong>, such as the following. <div><pre>Response.Write(name.Text);<br />Response.Write(Request.Form["name"]);<br />Query Strings<br />Response.Write(Request.QueryString["name"]);  </pre></div></li>
    <li>
      <strong>Query strings</strong>, such as the following: <div><pre>Response.Write(Request.QueryString["username"]);  </pre></div></li>
    <li>
      <strong>Databases and data access methods</strong>, such as the following: <div><pre>SqlDataReader reader = cmd.ExecuteReader();<br />Response.Write(reader.GetString(1));  </pre></div><p>Be particularly careful with data read from a database if it is shared by other applications. </p></li>
    <li>
      <strong>Cookie collection</strong>, such as the following: <div><pre>Response.Write(<br />Request.Cookies["name"].Values["name"]);  </pre></div></li>
    <li>
      <strong>Session and application variables</strong>, such as the following: <div><pre>Response.Write(Session["name"]);<br />Response.Write(Application["name"]);  </pre></div></li>
  </ul>
  <p>In addition to source code analysis, you can also perform a simple test by typing text such as "<strong>XYZ</strong>" in form fields and testing the output. If the browser displays "<strong>XYZ</strong>" or if you see "<strong>XYZ</strong>" when you view the source of the HTML, your Web application is vulnerable to cross-site scripting. </p>
  <p>To see something more dynamic, inject &lt;<strong>script</strong>&gt;<strong>alert('hello');</strong>&lt;<strong>/script</strong>&gt; through an input field. This technique might not work in all cases because it depends on how the input is used to generate the output.</p>
  <h1>Step 4. Review Potentially Dangerous HTML Tags and Attributes</h1>
  <p>If you dynamically create HTML tags and construct tag attributes with potentially unsafe input, make sure you HTML-encode the tag attributes before writing them out. </p>
  <p>The following .aspx page shows how you can write HTML directly to the return page by using the &lt;<strong>asp:Literal</strong>&gt; control. The code takes user input of a color name, inserts it into the HTML sent back, and displays text in the color entered. The page uses <strong>HtmlEncode</strong> to ensure the inserted text is safe.</p>
  <div>
    <pre>&lt;%@ Page Language="C#" AutoEventWireup="true"%&gt;</pre>
    <pre>&lt;html&gt;<br />&amp;nbsp; &lt;form id="form1" runat="server"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;div&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Color:&amp;nbsp;&lt;asp:TextBox ID="TextBox1" runat="server"&gt;&lt;/asp:TextBox&gt;&lt;br /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:Button ID="Button1" runat="server" Text="Show color" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; OnClick="Button1_Click" /&gt;&lt;br /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:Literal ID="Literal1" runat="server"&gt;&lt;/asp:Literal&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;<br />&amp;nbsp; &lt;/form&gt;<br />&lt;/html&gt;</pre>
  </div>
  <pre>&lt;script runat="server"&gt;<br />&amp;nbsp; private void Page_Load(Object Src, EventArgs e)<br />&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void Button1_Click(object sender, EventArgs e)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Literal1.Text = @"&lt;span style=""color:" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; + Server.HtmlEncode(TextBox1.Text)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; + @"""&gt;Color example&lt;/span&gt;";<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp; }<br />&lt;/Script&gt;</pre>
  <h2>Potentially Dangerous HTML Tags</h2>
  <p>While not an exhaustive list, the following commonly used HTML tags could allow a malicious user to inject script code: </p>
  <ul>
    <li>&lt;<strong>applet</strong>&gt; </li>
    <li>&lt;<strong>body</strong>&gt; </li>
    <li>&lt;<strong>embed</strong>&gt; </li>
    <li>&lt;<strong>frame</strong>&gt; </li>
    <li>&lt;<strong>script</strong>&gt; </li>
    <li>&lt;<strong>frameset</strong>&gt; </li>
    <li>&lt;<strong>html</strong>&gt; </li>
    <li>&lt;<strong>iframe</strong>&gt; </li>
    <li>&lt;<strong>img</strong>&gt; </li>
    <li>&lt;<strong>style</strong>&gt; </li>
    <li>&lt;<strong>layer</strong>&gt; </li>
    <li>&lt;<strong>link</strong>&gt; </li>
    <li>&lt;<strong>ilayer</strong>&gt; </li>
    <li>&lt;<strong>meta</strong>&gt; </li>
    <li>&lt;<strong>object</strong>&gt; </li>
  </ul>
  <p>An attacker can use HTML attributes such as <strong>src</strong>, <strong>lowsrc</strong>, <strong>style</strong>, and <strong>href</strong> in conjunction with the preceding tags to inject cross-site scripting. For example, the <strong>src</strong> attribute of the &lt;<strong>img</strong>&gt; tag can be a source of injection, as shown in the following examples.</p>
  <div>
    <pre>&lt;img src="javascript:alert('hello');"&gt;<br />&lt;img src="java
script:alert('hello');"&gt;<br />&lt;img src="java
script:alert('hello');"&gt;  </pre>
  </div>
  <p>An attacker can also use the &lt;<strong>style</strong>&gt; tag to inject a script by changing the MIME type as shown in the following.</p>
  <div>
    <pre>&lt;style TYPE="text/javascript"&gt;<br />&amp;nbsp; alert('hello');<br />&lt;/style&gt;  </pre>
  </div>
  <h1>Step 5. Evaluate Countermeasures</h1>
  <p>When you find ASP.NET code that generates HTML using some input, you need to evaluate appropriate countermeasures for your specific application. Countermeasures include: </p>
  <ul>
    <li>Encode HTML output. </li>
    <li>Encode URL output. </li>
    <li>Filter user input. </li>
  </ul>
  <h2>Encode HTML Output</h2>
  <p>If you write text output to a Web page and you do not know if the text contains HTML special characters (such as &lt;, &gt;, and <strong>&amp;</strong>), pre-process the text by using the <strong>AntiXSSLibrary.HtmlEncode</strong> method as shown in the following code example. Do this if the text came from user input, a database, or a local file.</p>
  <div>
    <pre>Response.Write(AntiXSSLibrary.HtmlEncode(Request.Form["name"]));  </pre>
  </div>
  <p>Do not substitute encoding output for checking that input is well-formed and correct. Use it as an additional security precaution.</p>
  <h2>Encode URL Output</h2>
  <p>If you return URL strings that contain input to the client, use the <strong>AntiXSSLibrary.UrlEncode</strong> method to encode these URL strings as shown in the following code example.</p>
  <div>
    <pre>Response.Write(AntiXSSLibrary.UrlEncode(urlString));  </pre>
  </div>
  <h2>Filter User Input</h2>
  <p>If you have pages that need to accept a range of HTML elements, for example through some kind of rich text input field, you must disable ASP.NET request validation for the page. If you have several pages that do this, create a filter that allows only the HTML elements that you want to accept. A common practice is to restrict formatting to safe HTML elements such as bold (&lt;<strong>b</strong>&gt;) and italic (&lt;<strong>i</strong>&gt;).</p>
  <h3>To safely allow restricted HTML input </h3>
  <ol>
    <li>Disable ASP.NET request validation by the adding the <strong>ValidateRequest="false"</strong> attribute to the <strong>@ Page</strong> directive. </li>
    <li>Encode the string input with the <strong>HtmlEncode</strong> method. </li>
    <li>Use a <strong>StringBuilder</strong> and call its <strong>Replace</strong> method to selectively remove the encoding on the HTML elements that you want to permit. </li>
  </ol>
  <p>The following .aspx page code shows this approach. The page disables ASP.NET request validation by setting <strong>ValidateRequest="false"</strong>. It HTML-encodes the input and then selectively allows the &lt;<strong>b</strong>&gt; and &lt;<strong>i</strong>&gt; HTML elements to support simple text formatting. </p>
  <div>
    <pre>&lt;%@ Page Language="C#" ValidateRequest="false"%&gt;</pre>
    <pre>&lt;script runat="server"&gt;</pre>
    <pre>&amp;nbsp; void submitBtn_Click(object sender, EventArgs e)<br />&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // Encode the string input<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; StringBuilder sb = new StringBuilder(<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; AntiXSSLibrary.HtmlEncode(htmlInputTxt.Text));<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // Selectively allow&amp;nbsp; &lt;b&gt; and &lt;i&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; sb.Replace("&lt;b&gt;", "&lt;b&gt;");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; sb.Replace("&lt;/b&gt;", "");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; sb.Replace("&lt;i&gt;", "&lt;i&gt;");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; sb.Replace("&lt;/i&gt;", "");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; Response.Write(sb.ToString());<br />&amp;nbsp; }<br />&lt;/script&gt;</pre>
  </div>
  <pre>&lt;html&gt;<br />&amp;nbsp; &lt;body&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;form id="form1" runat="server"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;div&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:TextBox ID="htmlInputTxt" Runat="server" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; TextMode="MultiLine" Width="318px"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Height="168px"&gt;&lt;/asp:TextBox&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:Button ID="submitBtn" Runat="server" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Text="Submit" OnClick="submitBtn_Click" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/form&gt;<br />&amp;nbsp; &lt;/body&gt;<br />&lt;/html&gt;</pre>
  <h1>Additional Considerations</h1>
  <p>In addition to the techniques discussed previously in this How to, use the following countermeasures as further safe guards to prevent cross-site scripting: </p>
  <ul>
    <li>Set the correct character encoding. </li>
    <li>Do not rely on input sanitization. </li>
    <li>Use the HttpOnly cookie option. </li>
    <li>Use the &lt;frame&gt; security attribute. </li>
    <li>Use the innerText property instead of innerHTML. </li>
  </ul>
  <h2>Set the Correct Character Encoding</h2>
  <p>To successfully restrict valid data for your Web pages, you should limit the ways in which the input data can be represented. This prevents malicious users from using canonicalization and multi-byte escape sequences to trick your input validation routines. A multi-byte escape sequence attack is a subtle manipulation that uses the fact that character encodings, such as uniform translation format-8 (UTF-8), use multi-byte sequences to represent non-ASCII characters. Some byte sequences are not legitimate UTF-8, but they may be accepted by some UTF-8 decoders, thus providing an exploitable security hole.</p>
  <p>ASP.NET allows you to specify the character set at the page level or at the application level by using the &lt;<strong>globalization</strong>&gt; element in the Web.config file. The following code examples show both approaches and use the ISO-8859-1 character encoding, which is the default in early versions of HTML and HTTP.</p>
  <p>To set the character encoding at the page level, use the &lt;<strong>meta</strong>&gt; element or the <strong>ResponseEncoding</strong> page-level attribute as follows: </p>
  <div>
    <pre>&lt;meta http-equiv="Content Type" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; content="text/html; charset=ISO-8859-1" /&gt;</pre>
    <pre>OR<br />&lt;% @ Page ResponseEncoding="iso-8859-1" %&gt;  </pre>
  </div>
  <p>To set the character encoding in the Web.config file, use the following configuration.</p>
  <div>
    <pre>&lt;configuration&gt;<br />&amp;nbsp;&amp;nbsp; &lt;system.web&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;globalization <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; requestEncoding="iso-8859-1"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; responseEncoding="iso-8859-1"/&gt;<br />&amp;nbsp;&amp;nbsp; &lt;/system.web&gt;<br />&lt;/configuration&gt;  </pre>
  </div>
  <h2>Validating Unicode Characters</h2>
  <p>Use the following code to validate Unicode characters in a page.</p>
  <div>
    <pre>using System.Text.RegularExpressions;<br />. . .</pre>
    <pre>public class WebForm1 : System.Web.UI.Page<br />{<br />&amp;nbsp; private void Page_Load(object sender, System.EventArgs e)<br />&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // Name must contain between 1 and 40 alphanumeric characters<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // and (optionally) special characters such as apostrophes&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // for names such as O'Dell</pre>
    <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp; if (!Regex.IsMatch(Request.Form["name"],<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @"^[\p{L}\p{Zs}\p{Lu}\p{Ll}\']{1,40}$"))<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new ArgumentException("Invalid name parameter");</pre>
    <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp; // Use individual regular expressions to validate other parameters<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; . . .<br />&amp;nbsp; }<br />}  </pre>
  </div>
  <p>The following explains the regular expression shown in the preceding code: </p>
  <ul>
    <li>
      <strong>^</strong> means start looking at this position. </li>
    <li>
      <strong>\p{ ..}</strong> matches any character in the named character class specified by <strong>{..}</strong>. </li>
    <li>
      <strong>{L}</strong> performs a left-to-right match. </li>
    <li>
      <strong>{Lu}</strong> performs a match of uppercase. </li>
    <li>
      <strong>{Ll}</strong> performs a match of lowercase. </li>
    <li>
      <strong>{Zs}</strong> matches separator and space. </li>
    <li>
      <strong>'</strong>matches apostrophe. </li>
    <li>
      <strong>{1,40}</strong> specifies the number of characters: no less than 1 and no more than 40. </li>
    <li>$ means stop looking at this position. </li>
  </ul>
  <h2>Do Not Rely on Input Sanitization</h2>
  <p>A common practice is for code to attempt to sanitize input by filtering out known unsafe characters. Do not rely on this approach because malicious users can usually find an alternative means of bypassing your validation. Instead, your code should check for known secure, safe input. Table 1 shows various safe ways to represent some common characters.</p>
  <p>
    <strong>Table 1: Character Representation</strong>
  </p>
  <div>
    <table>
      <tbody>
        <tr>
          <th>Characters</th>
          <th>Decimal</th>
          <th>Hexadecimal</th>
          <th>HTML Character Set</th>
          <th>Unicode</th>
        </tr>
        <tr>
          <td>
            <strong>" </strong>(double quotation marks)</td>
          <td>"</td>
          <td>"</td>
          <td>"</td>
          <td>\u0022</td>
        </tr>
        <tr>
          <td>
            <strong>' </strong>(single quotation mark)</td>
          <td>'</td>
          <td>'</td>
          <td>'</td>
          <td>\u0027</td>
        </tr>
        <tr>
          <td>
            <strong>&amp;</strong> (ampersand)</td>
          <td>&amp;</td>
          <td>&amp;</td>
          <td>&amp;</td>
          <td>\u0026</td>
        </tr>
        <tr>
          <td>&lt; (less than)</td>
          <td>&lt;</td>
          <td>&lt;</td>
          <td>&lt;</td>
          <td>\u003c</td>
        </tr>
        <tr>
          <td>&gt; (greater than)</td>
          <td>&gt;</td>
          <td>&gt;</td>
          <td>&gt;</td>
          <td>\u003e</td>
        </tr>
      </tbody>
    </table>
  </div>
  <br />
  <h2>Use the HttpOnly Cookie Option</h2>
  <p>Internet Explorer 6 Service Pack 1 and later supports an <strong>HttpOnly</strong> cookie attribute, which prevents client-side scripts from accessing a cookie from the <strong>document.cookie</strong> property. Instead, the script returns an empty string. The cookie is still sent to the server whenever the user browses to a Web site in the current domain.</p>
  <blockquote>
    <strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;Web browsers that do not support the <strong>HttpOnly</strong> cookie attribute either ignore the cookie or ignore the attribute, which means that it is still subject to cross-site scripting attacks.<strong></strong></blockquote>
  <p>The <strong>System.Net.Cookie</strong> class in Microsoft .NET Framework version 2.0 supports an <strong>HttpOnly</strong> property. The <strong>HttpOnly</strong> property is always set to true by Forms authentication. </p>
  <p>Earlier versions of the .NET Framework (versions 1.0 and 1.1) require that you add code similar to the following to the <strong>Application</strong>_<strong>EndRequest</strong> event handler in your application Global.asax file to explicitly set the <strong>HttpOnly</strong> attribute.</p>
  <div>
    <pre>protected void Application_EndRequest(Object sender, EventArgs e) <br />{<br />&amp;nbsp; string authCookie = FormsAuthentication.FormsCookieName;<br />&amp;nbsp; foreach (string sCookie in Response.Cookies) <br />&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // Just set the HttpOnly attribute on the Forms <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // authentication cookie. Skip this check to set the attribute <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // on all cookies in the collection</pre>
  </div>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp; if (sCookie.Equals(authCookie))<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; { <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; // Force HttpOnly to be added to the cookie header<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Response.Cookies[sCookie].Path += ";HttpOnly";<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp; }<br />}</pre>
  <h2>Use the &lt;frame&gt; Security Attribute</h2>
  <p>Internet Explorer 6 and later support a new <strong>security</strong> attribute for the &lt;<strong>frame</strong>&gt; and &lt;<strong>iframe</strong>&gt; elements. You can use the <strong>security</strong> attribute to apply the user's Restricted Sites Internet Explorer security zone settings to an individual frame or iframe. By default, the Restricted Sites zone does not support script execution. </p>
  <p>If you use the <strong>security</strong> attribute, it must be set to <strong>"restricted"</strong> as shown in the following.</p>
  <div>
    <div>
      <div>
      </div>
      <div>&amp;nbsp;</div>
    </div>
    <pre>&lt;frame security="restricted" src="http://www.somesite.com/somepage.htm"&gt;&lt;/frame&gt;  </pre>
  </div>
  <h2>Use the innerText Property Instead of innerHTML</h2>
  <p>If you use the <strong>innerHTML</strong> property to build a page and the HTML is based on potentially untrusted input, you must use <strong>HtmlEncode</strong> to make it safe. To avoid having to remember to do this, use <strong>innerText</strong> instead. The <strong>innerText</strong> property renders content safe and ensures that scripts are not executed.</p>
  <p>The following example shows this approach for two HTML &lt;<strong>span</strong>&gt; controls. The code in the <strong>Page_Load</strong> method sets the text displayed in the <strong>Welcome1</strong> &lt;<strong>span</strong>&gt; element using the <strong>innerText</strong> property, so HTML-encoding is unnecessary. The code sets the text in the <strong>Welcome2</strong> &lt;<strong>span</strong>&gt; element by using the <strong>innerHtml</strong> property; therefore, you must <strong>HtmlEncode</strong> it first to make it safe.</p>
  <div>
    <pre>&lt;%@ Page Language="C#" AutoEventWireup="true"%&gt;</pre>
    <pre>&lt;html&gt;<br />&amp;nbsp; &lt;body&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span id="Welcome1" runat="server"&gt; &lt;/span&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;span id="Welcome2" runat="server"&gt; &lt;/span&gt;<br />&amp;nbsp; &lt;/body&gt;<br />&lt;/html&gt;</pre>
  </div>
  <pre>&lt;script runat="server"&gt;<br />&amp;nbsp; private void Page_Load(Object Src, EventArgs e)<br />&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // Using InnerText renders the content safe-no need to HtmlEncode<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; Welcome1.InnerText = "Hello, " + User.Identity.Name;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp; // Using InnerHtml requires the use of HtmlEncode to make it safe<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; Welcome2.InnerHtml = "Hello, " + <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Server.HtmlEncode(User.Identity.Name);<br />&amp;nbsp; }<br />&lt;/Script&gt;</pre>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="466991679" Content_Hash="-57576253">
    <Metadata>
      <Id>8617d36b-a715-4a8b-91c2-eb8064e9df15</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>How to Encrypt Configuration Sections in ASP.NET Using DPAPI</Title>
      <Category>Data Access</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>How To</Type>
      <DirectLink>How to Encrypt Configuration Sections in ASP.NET Using DPAPI</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Summary&amp;nbsp;</h1>
  <p>This How to shows how to use the Windows Data Protection application programming interface (DPAPI) protected configuration provider and the Aspnet_regiis.exe tool to encrypt sections of your configuration files. You can use the Aspnet_regiis.exe tool to
 encrypt sensitive data, such as connection strings, held in the Web.config and Machine.config files. The DPAPI protected configuration provider supports machine-level and user-level stores for key storage. The choice of store depends largely on whether or
 not your application shares a server with other applications and whether or not sensitive data must be kept private for each application. Note that if your application is deployed in a Web farm, you should use the RSA protected configuration provider due to
 the ease with which RSA keys can be exported.</p>
  <h1>Contents</h1>
  <ul>
    <li>Objectives </li>
    <li>Overview </li>
    <li>Summary of Steps </li>
    <li>Step 1. Identify the Configuration Sections to be Encrypted </li>
    <li>Step 2. Choose the Machine or User Store </li>
    <li>Step 3. Encrypt Your Configuration File Data </li>
    <li>Web Farm Scenarios </li>
    <li>Additional Resources</li>
  </ul>
  <h1>Objectives</h1>
  <ul>
    <li>Know which sections can and cannot be encrypted with the DPAPI protected configuration provider.
</li>
    <li>Choose between user-level and machine-level DPAPI key storage. </li>
    <li>Use the DPAPI protected configuration provider to encrypt sections of your configuration file.
</li>
    <li>Learn about the Web farm restrictions. </li>
  </ul>
  <h1>Overview</h1>
  <p>Configuration files such as the Web.config file are often used to hold sensitive information, including user names, passwords, database connection strings, and encryption keys. If you do not protect this information, your application is vulnerable to attackers
 or malicious users obtaining sensitive information such as account user names and passwords, database names and server names. The sections that usually contain sensitive information that you need to encrypt are the following:</p>
  <ul>
    <li>&lt;appSettings&gt;. This section contains custom application settings. </li>
    <li>&lt;connectionStrings&gt;. This section contains connection strings. </li>
    <li>&lt;identity&gt;. This section can contain impersonation credentials. </li>
    <li>&lt;sessionState&gt;. The section contains the connection string for the out-of-process session state provider.
</li>
  </ul>
  <p>Encrypting and decrypting data incurs performance overhead. To keep this overhead to a minimum, encrypt only the sections of your configuration file that store sensitive data.</p>
  <h1>Summary of Steps</h1>
  <p>To encrypt configuration sections by using the DPAPI data protection provider, perform the following steps:
</p>
  <ul>
    <li>Step 1. Identify the configuration sections to be encrypted. </li>
    <li>Step 2. Choose the machine or user store. </li>
    <li>Step 3. Encrypt your configuration file data. </li>
  </ul>
  <h1>Step 1. Identify the Configuration Sections to Be Encrypted</h1>
  <p>Encrypting and decrypting data incurs performance overhead. To keep this overhead to a minimum, encrypt only the sections of your configuration file that store sensitive data.</p>
  <h2>Sections You Cannot Encrypt Using Protected Configuration</h2>
  <p>If you store sensitive data in any of the following configuration sections, you cannot encrypt it by using protected configuration and the Aspnet_regiis.exe tool:
</p>
  <ul>
    <li>&lt;<strong>processModel</strong>&gt; </li>
    <li>&lt;<strong>runtime</strong>&gt; </li>
    <li>&lt;<strong>mscorlib</strong>&gt; </li>
    <li>&lt;<strong>startup</strong>&gt; </li>
    <li>&lt;<strong>system.runtime.remoting</strong>&gt; </li>
    <li>&lt;<strong>configProtectedData</strong>&gt; </li>
    <li>&lt;<strong>satelliteassemblies</strong>&gt; </li>
    <li>&lt;<strong>cryptographySettings</strong>&gt; </li>
    <li>&lt;<strong>cryptoNameMapping</strong>&gt; </li>
    <li>&lt;<strong>cryptoClasses</strong>&gt; </li>
  </ul>
  <p>For the configuration sections listed, you should use the Aspnet_setreg.exe tool, which is also available for previous versions of the .NET Framework.
</p>
  <p>For more information about using the Aspnet_setreg tool to encrypt data in these configuration sections, see Microsoft Knowledge Base article 329290, How to use the ASP.NET utility to encrypt credentials and session state connection strings.</p>
  <h1>Step 2. Choose the Machine or User Store</h1>
  <p>The <strong>DataProtectionConfigurationProvider</strong> supports machine-level and user-level stores for key storage. The choice of store depends largely on whether or not your application shares a server with other applications and whether or not sensitive
 data must be kept private for each application.</p>
  <h2>Machine Store</h2>
  <p>Use machine-level key storage in the following situations: </p>
  <ul>
    <li>Your application runs on its own dedicated server with no other applications.
</li>
    <li>You have multiple applications on the same server that run and you want those applications to be able to share sensitive information.
</li>
  </ul>
  <h2>User Store</h2>
  <p>Use user-level key storage if you run your application in a shared hosting environment and you want to make sure that your application's sensitive data is not accessible to other applications on the server. In this situation, each application should run
 under a separate identity, and the resources for the application—such as files and databases—should be restricted to that identity.</p>
  <h1>Step 3. Encrypt Your Configuration File Data</h1>
  <p>This step shows you how to encrypt a connection string in the Web.config file, first with the machine store and then with the user store.</p>
  <h2>Using DPAPI with the Machine Store to Encrypt a Connection String in Web.config</h2>
  <p>By default, the <strong>DataProtectionConfigurationProvider</strong> is configured to use DPAPI with the machine store.
</p>
  <h3>To encrypt the connectionStrings section in Web.config </h3>
  <ol>
    <li>Create a new Web site named MachineDPAPI. Make sure that this directory is configured as a virtual directory.
</li>
    <li>Add a Web.config configuration file to this directory. </li>
    <li>Add a sample <strong>connectionString</strong> similar to the following example.
<div><pre>&lt;connectionStrings&gt;<br />&amp;nbsp; &lt;add name="MyLocalSQLServer" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionString="Initial Catalog=aspnetdb;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; data source=localhost;Integrated Security=SSPI;" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; providerName="System.Data.SqlClient"/&gt;<br />&lt;/connectionStrings&gt;  </pre></div></li>
    <li>To encrypt the <strong>connectionStrings</strong> section, run the following command from a .NET command prompt:
<p><strong>aspnet_regiis -pe "connectionStrings" -app "/MachineDPAPI" -prov "DataProtectionConfigurationProvider"</strong></p></li>
  </ol>
  <p>The above command with the <strong>-app</strong> switch assumes that there is an IIS virtual directory called MachineDPAPI. If you are using the Visual Studio Web server instead of IIS, use the
<strong>-pef</strong> switch, which allows you to specify the physical directory location of your configuration file.</p>
  <p>
    <strong>aspnet_regiis.exe -pef "connectionStrings" C:\Projects\MachineDPAPI -prov "DataProtectionConfigurationProvider"</strong>
  </p>
  <blockquote>
    <strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;The Aspnet_regiis.exe utility tool is located in the following directory:</blockquote>
  <blockquote>%WinDir%\Microsoft.NET\Framework\&lt;<em>versionNumber</em>&gt;</blockquote>
  <ul>
    <li>The <strong>-pe</strong> switch specifies the configuration section to encrypt.
</li>
    <li>The <strong>-pef</strong> switch specifies the configuration section to encrypt and allows you to supply the physical directory path for your configuration file.
</li>
    <li>The <strong>-app</strong> switch specifies your Web application's virtual path. If it is a nested application, you need to specify the nested path from the root directory; for example,
<strong>"/test/aspnet/MachineDPAPI"</strong>. </li>
    <li>The <strong>-prov</strong> switch specifies the provider name.
<p>If the command is successful, you will see the following output: </p><div><pre>Encrypting configuration section...Succeeded!  </pre></div><blockquote><strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;The DPAPI machine key is stored at the following location:</blockquote><blockquote>%windir%\system32\Microsoft\Protect\S-1-5-18</blockquote></li>
  </ul>
  <ol>
    <li>Review the Web.config file, and examine the changes. The following elements are created:
<ul><li>&lt;<strong>EncryptedData</strong>&gt; </li><li>&lt;<strong>CipherData</strong>&gt; </li><li>&lt;<strong>CipherValue</strong>&gt; </li></ul><p>Your modified Web.config file, with the <strong>connectionStrings</strong> section encrypted, should be similar to the following example.
</p><div><pre>...<br />&lt;connectionStrings configProtectionProvider="DataProtectionConfigurationProvider"&gt; <br />&amp;nbsp; &lt;EncryptedData&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;CipherData&gt;<br />&lt;CipherValue&gt;AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAexuIJ/8oFE+sGTs7jBKZdgQAAAACAAAAAAADZgAAqAAAA<br />BAAAAA<br />Kms84dyaCPAeaSC1dIMIBAAAAAASAAACgAAAAEAAAAKaVI6aAOFdqhdc6w1Er3HMwAAAAcZ00MZOz1dI7kYRvkMIn/<br />BmfrvoHNUwz6H9rcxJ6Ow41E3hwHLbh79IUWiiNp0VqFAAAAF2sXCdb3fcKkgnagkHkILqteTXh&lt;/CipherValue&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/CipherData&gt;<br />&amp;nbsp; &lt;/EncryptedData&gt;<br />&lt;/connectionStrings&gt;<br />...</pre></div></li>
    <li>Add the following Default.aspx Web page to your application's virtual directory, and then browse to this page to verify that encryption and decryption worked correctly.
<div><pre>&lt;%@ Page Language="C#" %&gt;<br /><br />&lt;script runat="server"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void Page_Load(object sender, EventArgs e)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Response.Write("Clear text connection string is: " + <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ConfigurationManager.ConnectionStrings<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ["MyLocalSQLServer"].ConnectionString);<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&lt;/script&gt;<br />&lt;html&gt;<br />&amp;nbsp; &lt;body/&gt;<br />&lt;/html&gt;  </pre></div></li>
    <li>
      <p>MyLocalSQLServer is the name of the connection string that you previously specified in the Web.config file.
</p>
    </li>
    <li>To change the <strong>connectionStrings</strong> section back to clear text, run the following command from the command prompt:
<p><strong>aspnet_regiis -pd "connectionStrings" -app "/MachineDPAPI"</strong></p><p>If the command is successful, you will see the following output: </p><div><pre>Decrypting configuration section...<br />Succeeded!</pre></div></li>
  </ol>
  <p>To decrypt the <strong>connectionStrings</strong> section specifying a physical path to your application's configuration file, use the
<strong>-pdf</strong> switch as shown here.</p>
  <p>
    <strong>aspnet_regiis -pdf "connectionStrings" C:\Projects\MachineDPAPI</strong>
  </p>
  <h2>Using DPAPI with a User Store to Encrypt a Connection String in Web.Config</h2>
  <p>By default, the ASP.NET applications run under the NT AUTHORITY\Network Service account. When you access encrypted configuration sections using DPAPI with the user store, make sure that your application is running with the same user identity as the account
 you used to encrypt the data.</p>
  <p>Using the <strong>DataProtectionConfigurationProvider</strong> and DPAPI with the user store requires a small amount of additional configuration in the Web.config file.</p>
  <h3>To encrypt the connectionStrings section in Web.config </h3>
  <ol>
    <li>Create a new Web site named UserDPAPI. Make sure that this directory is configured as a virtual directory.
</li>
    <li>Add a Web.config configuration file to this directory. </li>
    <li>Add a sample <strong>connectionString</strong> similar to the following example.
<div><pre>&lt;connectionStrings&gt;<br />&amp;nbsp; &lt;add name="MyLocalSQLServer" connectionString="Initial Catalog=aspnetdb;<br />data source=localhost;Integrated Security=SSPI;" providerName="System.Data.SqlClient"/&gt;<br />&lt;/connectionStrings&gt;  </pre></div></li>
    <li>Add and configure a protected configuration provider to use the user store. To do this, add the following &lt;<strong>configProtectedData</strong>&gt; section. You must set
<strong>useMachineProtection</strong>=<strong> "false"</strong> to instruct the provider to use the user store. You must also use a unique provider name, or a run-time error will occur.
<div><pre>&lt;configProtectedData&gt;<br />&amp;nbsp; &lt;providers&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;add useMachineProtection="false" keyEntropy="" name="MyUserDataProtectionConfigurationProvider" <br />type="System.Configuration.DpapiProtectedConfigurationProvider, System.Configuration,<br />     Version=3.5.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" /&gt;<br />&amp;nbsp; &lt;/providers&gt;<br />&lt;/configProtectedData&gt;  </pre></div></li>
    <li>Run the following command from a command prompt to encrypt the <strong>connectionStrings</strong> section:
<p><strong>Aspnet_regiis -pe "connectionStrings" -app "/UserDPAPI" -prov "MyUserDataProtectionConfigurationProvider"</strong></p><ul><li>The -<strong>pe</strong> switch specifies the configuration section to encrypt.
</li><li>The -<strong>app</strong> switch specifies your Web application's virtual path. If it is a nested application, you need to specify the nested path from the root directory; for example:
<strong>"/test/aspnet/UserDPAPI"</strong>. </li><li>The -<strong>prov</strong> switch specifies the provider name. In this case, this is set to
<strong>"MyUserDataProtectionConfigurationProvider"</strong> which is the name you specified when configuring the provider in the step 3.
</li></ul><p>If the command is successful, you will see the following output: </p><div><pre>Encrypting configuration section...Succeeded!</pre></div></li>
  </ol>
  <p>Because your application must access the data by using the same identity that you used to encrypt the data, you may need to run the encryption command using your application's service account identity. To do so, you can start a command window by using the
<strong>runas</strong> command, specifying an appropriate domain and user name, as follows:</p>
  <p>
    <strong>Runas /profile /user:domain\user cmd</strong>
  </p>
  <p>When you run Aspnet_regiis from the resulting command window, it will use the specified identity to perform the encryption. This enables your application that uses the same identity to decrypt the data at run time.
</p>
  <ol>
    <li>Review the Web.config file, and examine the changes. The following elements are created:
<ul><li>&lt;<strong>EncryptedData</strong>&gt; </li><li>&lt;<strong>CipherData</strong>&gt; </li><li>&lt;<strong>CipherValue</strong>&gt; </li></ul><p>Your modified Web.config file, with the <strong>connectionStrings</strong> section encrypted should be similar to the following example.
</p><div><pre>...<br />&lt;connectionStrings configProtectionProvider="MyUserDataProtectionConfigurationProvider"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;EncryptedData&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;CipherData&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;CipherValue&gt;AQAAANCMnd8BFdERjHoAwE/Cl+sBAAAAWuizHyLxzk+U4/8NnMRAjQAAAAACAAAAA<br />AADZgAAqAAAABAAAADLFqu00qT0BeGh6wmHHGySAAAAAASAAACgAAAAEAAAAM56z6ezglmufZGcta83RKGgAQAA<br />tvDpExhD6h95lfWBt0FqZYzxupI2IepH/XlhLB5rsuuQDCJUL7XGIIsaVW2oNQxgNCPXxRSuCxHQ7vqgbh4G7xH<br />k0wdyws5Ax4T/RYJbfYEF5KAPzShdmdoZdkY/FOWrVEgAr7LzKFBoDcPJBvgX+lfsJdBNeWRB5BqRX552dUFjtDl<br />p8u3K/dA9twWDU2w/cRLMXJtVZ/y/ICI1fzXjX3u7sY9K1IC+5Hbi7nouCK6Ze5RLBnL0Zfdq0PyGlj2To4ftAYA<br />T0SzkBaxlXRQSzMhX+7c+rgKpMqtG9XjAW26x3IJAp2/uAr2zOZqH+tskamHYSruhTicHJDTtP+r6Rs21y2QkRT9<br />Hb9oPd9B5mDIzGtDkifWBbmwLv4XFuYcna1Zgny7McSxMI62jxayVlZKcS5dXV0shwLoUjbTDcXQmFKsRvo2sCW8<br />6wcN8ad02jhKCQMf9SWnZpd849mlqgMFiQQSFlZ6Q+vJLrXqVb8zmVZemQPQcY/DktgjOvjn0iOZ3zhl20fRENOa<br />3ZIWvvK8p9pblz3sEfS19MAW0JtYUAAAAayvNPot3An7LaCTdFYrEip+fTU4=&lt;/CipherValue&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/CipherData&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/EncryptedData&gt;<br />&amp;nbsp; &lt;/connectionStrings&gt;<br />...</pre></div></li>
    <li>Add the following Default.aspx Web page to your application's virtual directory, and then browse to this page to verify that encryption and decryption work correctly.
<div><pre>&lt;%@ Page Language="C#" %&gt;&lt;script runat="server"&gt;<br />&amp;nbsp; protected void Page_Load(object sender, EventArgs e)<br />&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; Response.Write("Clear text connection string is: " + <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ConfigurationManager.ConnectionStrings<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ["MyLocalSQLServer"].ConnectionString);<br />&amp;nbsp; }<br />&lt;/script&gt;<br />&lt;html&gt;<br />&amp;nbsp; &lt;body/&gt;<br />&lt;/html&gt;  </pre></div><p>MyLocalSQLServer is the name of the connection string that you previously specified in the Web.config file.
</p><p>Then, in the Web.config file, you need to enable impersonation as shown in the following example.
</p><div><pre>&lt;system.web&gt;<br />&amp;nbsp; ...<br />&amp;nbsp; &lt;identity impersonate="true" /&gt;<br />&amp;nbsp; ...<br />&lt;/system.web&gt;  </pre></div></li>
    <li>
      <p>If your application runs under a different account than the one used to encrypt the data, ASP.NET will be unable to access the user store where the DPAPI key is held and will generate the following error:
</p>
      <div>
        <pre>Failed to decrypt using provider 'MyUserDataProtectionConfigurationProvider'.<br />&amp;nbsp;Error message from the provider: Key not valid for use in specified state. <br />(Exception from HRESULT: 0x8009000B)  </pre>
      </div>
    </li>
    <li>To change the <strong>connectionStrings</strong> section back to clear text, run the following command from the command prompt:
<p><strong>aspnet_regiis -pd "connectionStrings" -app "/UserDPAPI"</strong></p><p>If the command is successful, you will see the following output: </p><div><pre>Decrypting configuration section...<br />Succeeded!  </pre></div></li>
  </ol>
  <h1>Web Farm Scenarios</h1>
  <p>If you want to deploy the same encrypted configuration file on multiple servers in a Web farm, you should use the
<strong>RSAProtectedConfigurationProvider</strong>. This provider makes it easy for you encrypt the data on one server computer and then export the RSA private key needed to decrypt the data. You can then deploy the configuration file and the exported key to
 the target servers, and then re-import the keys.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1355003207" Content_Hash="-441246089">
    <Metadata>
      <Id>a2511b7b-71ce-4d38-b4d5-5f877aaeb13d</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>How to Use Role Manager in ASP.NET</Title>
      <Category>Authorization</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>How To</Type>
      <DirectLink>How to Use Role Manager in ASP.NET</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Applies to</h1>
  <ul>
    <li>Microsoft Windows Server 2003 operating system or later&amp;nbsp;operating system</li>
    <li>Microsoft Windows XP Professional Service Pack 1 or later operating system </li>
  </ul>
  <h1>Summary</h1>
  <p>This How to shows you how to use the ASP.NET role manager. The role manager eases the task of managing roles and performing role-based authorization in your application. It shows how to configure the various role providers for use with your Web application, how to create new roles, how to add a user to a role, and how to use the role management API for roles-based authorization.</p>
  <h1>Contents</h1>
  <ul>
    <li>
      <div>Objectives</div>
    </li>
    <li>
      <div>Overview</div>
    </li>
    <li>
      <div>Summary of Steps</div>
    </li>
    <li>
      <div>Step 1. Configure Your Role Store</div>
    </li>
    <li>
      <div>Step 2. Configure Your Role Provider in Web.config</div>
    </li>
    <li>
      <div>Step 3. Create and Assign Roles</div>
    </li>
    <li>
      <div>Step 4. Perform Role-Based Authorization</div>
    </li>
    <li>
      <div>Additional Considerations</div>
    </li>
    <li>
      <div>Additional Resources</div>
    </li>
  </ul>
  <h1>Objectives</h1>
  <ul>
    <li>Configure an ASP.NET Web application to use role management. </li>
    <li>Learn how to configure the <strong>SqlRoleProvider</strong>, <strong>WindowsTokenRoleProvider</strong>, and <strong>AuthorizationStoreRoleProvider</strong>. </li>
    <li>Create and assign roles by using ASP.NET configuration tools, SQL scripts, and the role management APIs. </li>
    <li>Perform role based authorization in an ASP.NET Web application. </li>
  </ul>
  <h1>Overview</h1>
  <p>ASP.NET&amp;nbsp;includes a role manager feature that includes a roles management API that allows you to create and delete roles and assign and remove users from roles. The role manager stores its data in an underlying data store that it accesses through an appropriate role provider for that data store.</p>
  <p>The main benefits of using role manager are that it allows you to look up users' roles without writing and maintaining code. Additionally, the role providers offer a consistent way for you to check the role membership of your users, regardless of the underlying data store. Therefore, if your role store were to change tomorrow, you would only need to change the configuration settings to make your code work.</p>
  <p>Supplied role providers include: </p>
  <ul>
    <li>
      <strong>SqlRoleProvider.</strong> This is used where the role store is kept in SQL Server. </li>
    <li>
      <strong>WindowsTokenRoleProvider.</strong> This is a read-only provider that retrieves role information for a Windows user account based on the account's Windows security group membership. You cannot create, add to, or delete roles with this provider. </li>
    <li>
      <strong>AuthorizationStoreRoleProvider.</strong> This is used if your application uses Authorization Manager (AzMan). It uses an AzMan policy store in an XML file, in Active Directory, or in Active Directory Application Mode (ADAM) as its role store. It is typically used in an intranet or extranet scenario where Windows authentication and Active Directory is used for authentication. </li>
  </ul>
  <p>To perform role management, your ASP.NET application must be able to identify and authenticate its users in some way. For example, it might use Windows authentication or Forms authentication.</p>
  <p>This How to shows you how to set up and configure a role store and a role provider and use role-based authorization in your ASP.NET applications. Additionally, it demonstrates some of the basic roles API calls available to work with roles programmatically.</p>
  <h1>Summary of Steps</h1>
  <p>To use the role manager in your application, perform the following steps: </p>
  <ul>
    <li>Step 1. Configure your role store. </li>
    <li>Step 2. Configure your role provider in Web.config. </li>
    <li>Step 3. Create and assign roles. </li>
    <li>Step 4. Perform role-based authorization. </li>
  </ul>
  <h1>Step 1. Configure Your Role Store </h1>
  <p>In this step, you prepare the role store used to maintain role details. The setup details vary according to the store and associated provider that you choose to use.</p>
  <h2>Using SqlRoleProvider</h2>
  <p>If you want to store roles in SQL Server, you use the <strong>SqlRoleProvider</strong>. By default, roles are stored in a database named Aspnetdb in a SQL Express database instance in the \app_data folder beneath your application's virtual directory root folder. You can also configure the <strong>SqlRoleProvider</strong> to use a local or remote instance of SQL Server.</p>
  <h3>To use a SQL Express database role store in the Website \app_data folder</h3>
  <p>You do not have to create or configure this database. The first time you perform an operation that uses the role management API, ASP.NET automatically creates a database named Aspnetdb, configures it, and sets appropriate permissions on it. </p>
  <p>ASP.NET configures the SQL Express database with a database login for the default accounts used to run ASP.NET applications (Network Service on Windows Server 2003 or later&amp;nbsp;and ASPNET on Windows 2000) and grants them full access to the Aspnetdb database. </p>
  <p>If you have configured ASP.NET to run using a custom service account, you must create a SQL login for that account, and add the login to the <strong>aspnet_Roles_FullAccess</strong> role in the Aspnetdb database. </p>
  <p>
    <strong>To install the role management database in SQL Server</strong>
  </p>
  <ol>
    <li>Log on to Windows using an account that has administration rights for your SQL Server instance. </li>
    <li>Open a command prompt window and execute the following command to install the role management database. <p><strong>Aspnet_regsql.exe</strong>-<strong>E</strong>-<strong>S</strong><em>sqlinstance</em>-<strong>A r</strong></p><p>Note that this program is located in the <strong>%windir%\Microsoft.NET\Framework\{version}</strong> folder. </p><p>When you type the command, replace <em>version</em> with the version of the .NET Framework that you are using and <em>sqlinstance</em> with the name of the SQL Server instance you want to install the role management database in. </p><p>You will see the following output: </p><div><pre>Start adding the following features:<br />Rolemanager<br />............<br />Finished.  </pre></div><blockquote><strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;For information about the switches for Aspnet_regsql.exe, type <strong>Aspnet_regsql.exe -?</strong> at the command prompt.</blockquote></li>
  </ol>
  <p>
    <strong>To grant permissions in the database</strong>
  </p>
  <p>You need to create a database login for your Web application's process account; by default, this is the Network Service account. If you have configured a custom account to run ASP.NET, you must grant permissions to that account. </p>
  <blockquote>
    <strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;If you have configured your ASP.NET application to use impersonation, your ASP.NET application executes using the security context of the original caller. To access data in a SQL Server database, you must usually create a database login for the original caller and grant access to the required data.</blockquote>
  <blockquote>However, the role management system accesses the Aspnetdb database by using the process identity regardless of whether your application uses impersonation. </blockquote>
  <ol>
    <li>Open SQL Server Enterprise Manager, expand <strong>Security</strong>, and then expand <strong>Logins</strong> for the server hosting the role management database. Create a new login for your Web application's process account (for example, <strong>NT AUTHORITY/Network Service</strong>). </li>
    <li>Set the default database to <strong>Aspnetdb</strong>. </li>
    <li>Under the <strong>Databases</strong> node in Enterprise Manager, expand the <strong>Aspnetdb</strong> database entry, and then click <strong>Roles</strong>. Right-click <strong>aspnet_Roles_FullAccess</strong>, and then click <strong>Properties</strong>. In the <strong>Database Role Properties</strong> dialog box, click <strong>Add</strong>, and then select the database login you created in the previous step to add the login to that role. <blockquote><strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;Aspnet_regsql.exe creates three database roles with differing levels of access to the role management database: </blockquote><ul><li><strong>FullAccess</strong> gives rights to create and delete roles, and add and remove users from those roles. </li><li><strong>BasicAccess</strong> allows role membership checks for the current user only. </li><li><strong>ReportingAccess</strong> allows a page to check which roles exist and which users belong to them. </li></ul></li>
  </ol>
  <h2>Using WindowsTokenRoleProvider</h2>
  <p>You use the <strong>WindowsTokenRoleProvider</strong> with ASP.NET applications that use Windows authentication. It is a read-only provider that retrieves role information for a Windows user based on Windows security groups. You cannot create, add to, or delete roles with this provider. Instead, you must use the Windows Computer Management or Active Directory Users and Computers administration tools.</p>
  <p>The Windows security system acts as role store for this provider, so no additional configuration is required to set up the role store.</p>
  <h2>Using AuthorizationStoreRoleProvider</h2>
  <p>Use the <strong>AuthorizationStoreRoleProvider</strong> to store roles data in an AzMan policy store in an XML file, in Active Directory, or ADAM. </p>
  <p>AzMan is supported on Windows 2000 Server or later and on Windows XP Professional.&amp;nbsp; </p>
  <h1>Step 2. Configure Your Role Provider in Web.config</h1>
  <p>In this step, you configure the appropriate role provider in your application's Web.config file.</p>
  <h2>Using SqlRoleProvider</h2>
  <p>To use the role store in the default SQL Express instance in a database in your Web site's \app_dir folder, add the following configuration to your application's Web.config file.</p>
  <div>
    <pre>&lt;system.web&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;roleManager enabled="true" /&gt;<br />&lt;/system.web&gt;  </pre>
  </div>
  <p>This configuration enables role management and causes your application to use the default provider named <strong>AspNetSqlRoleProvider</strong> defined in the Machine.config file. This uses the local SQL Express instance.</p>
  <p>To use a role store in SQL Server, add a connection string to point to your role database and add a role provider definition in the Web.config file, as shown here.</p>
  <div>
    <pre>&lt;configuration&gt;<br />&amp;nbsp; &lt;connectionStrings&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;add name="SqlRoleManagerConnection" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionString="Data Source=sqlinstance;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Initial Catalog=aspnetdb;Integrated Security=SSPI;"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/add&gt;<br />&amp;nbsp; &lt;/connectionStrings&gt;<br />&lt;/configuration&gt;</pre>
  </div>
  <pre>&lt;roleManager enabled="true" defaultProvider="SqlRoleManager"&gt;<br />&amp;nbsp; &lt;providers&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;add name="SqlRoleManager" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type="System.Web.Security.SqlRoleProvider"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionStringName="SqlRoleManagerConnection"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; applicationName="MyApplication" /&gt;<br />&amp;nbsp; &lt;/providers&gt;<br />&lt;/roleManager&gt;</pre>
  <h2>Using WindowsTokenRoleProvider</h2>
  <p>The Windows security system acts as role store for this provider, and Windows groups represent roles. You can use this provider when you use Windows authentication. To do this, add the following configuration to your application's Web.config file.</p>
  <div>
    <pre>&lt;authentication mode="Windows" /&gt;<br />&lt;roleManager enabled="true" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; defaultProvider="AspNetWindowsTokenRoleProvider" /&gt;  </pre>
  </div>
  <p>This configuration enables role management and uses the role provider named <strong>AspNetWindowsTokenRoleProvider</strong>, which is defined in the Machine.config file.</p>
  <h2>Using AuthorizationStoreRoleProvider</h2>
  <p>The <strong>AuthorizationStoreRoleProvider</strong> is used to store roles data in an AzMan policy store in an XML file, in Active Directory, or in ADAM. To configure this provider, add a connection string to point to the relevant policy store and then add a role provider definition in the Web.config file.</p>
  <p>The following connection string refers to an XML-based policy store contained in a file named Azmanstore.xml.</p>
  <div>
    <pre>&lt;configuration&gt; <br />&amp;nbsp; &lt;connectionStrings&gt; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;add name="AzManPolicyStoreConnectionString" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionString="msxml://c:/RolesData/azmanstore.xml" /&gt;<br />&amp;nbsp; &lt;/connectionStrings&gt; <br />&lt;/configuration&gt;  </pre>
  </div>
  <p>The following connection string refers to an ADAM-based policy store.</p>
  <div>
    <pre>&lt;configuration&gt; <br />&amp;nbsp; &lt;connectionStrings&gt; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;add name="AzManPolicyStoreConnectionString" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionString= "msldap://servername:port/CN=AzManADAMStore,<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; OU=SecNetPartition,O=SecNet,C=US"/&gt;<br />&amp;nbsp; &lt;/connectionStrings&gt; <br />&lt;/configuration&gt;  </pre>
  </div>
  <p>The following configuration shows how to enable role management and use the provider named <strong>RoleManagerAzManADAMProvider</strong>. This uses the connection string shown earlier to connect to an ADAM policy store.</p>
  <div>
    <pre>&lt;roleManager <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; enabled="true" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; cacheRolesInCookie="true" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; defaultProvider="RoleManagerAzManADAMProvider"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; cookieName=".ASPXROLES" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; cookiePath="/" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; cookieTimeout="30" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; cookieRequireSSL="false" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; cookieSlidingExpiration="true"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; createPersistentCookie="false" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; cookieProtection="All"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;providers&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;add name="RoleManagerAzManADAMProvider"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; type="System.Web.Security.AuthorizationStoreRoleProvider, System.Web,<br />     Version=3.5.0.0, Culture=neutral, publicKeyToken=b03f5f7f11d50a3a"<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connectionStringName="AzManPolicyStoreConnectionString" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; applicationName="AzManDemo"/&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/providers&gt;<br />&lt;/roleManager&gt;  </pre>
  </div>
  <h1>Step 3. Create and Assign Roles</h1>
  <p>In this step, you create roles for your application and assign users to those roles. There are several methods you can use to create and assign roles. Using them depends on how your application authenticates its users and which role provider it uses. The various methods for creating and assigning users to roles include: </p>
  <ul>
    <li>At development time, you can use the ASP.NET configuration tool. </li>
    <li>If you are using the <strong>AuthorizationStoreRoleProvider</strong>, you can use the AzMan administrator Microsoft Management Console (MMC) snap-in. </li>
    <li>You can create roles programmatically by using either the role management APIs or, if you are using the <strong>SqlRoleProvider</strong>, by executing SQL scripts to add them to the database directly. </li>
    <li>If you are using the <strong>WindowsTokenRoleProvider</strong>, you use the Windows Computer Management tool or Active Directory Users and Computers to create Windows groups which are used as roles. </li>
  </ul>
  <h2>Using the ASP.NET Web Site Configuration Tool</h2>
  <p>You can use the ASP.NET Web Site Configuration tool from Visual Studio .NET at development time if your application uses Forms authentication and you have configured your application to use the ASP.NET membership feature. If your application uses Windows authentication, you cannot use this tool and you must use either the Roles API or the AzMan administrator MMC snap-in as described in the next section. </p>
  <h3>To assign users to roles by using the ASP.NET Web Site Configuration tool </h3>
  <ol>
    <li>Create roles by using the ASP.NET configuration tool by performing the following steps: <ol><li>Start Visual Studio. </li><li>On the <strong>Website</strong> menu, click <strong>ASP.NET Configuration</strong>. </li><li>On the <strong>Home</strong> tab, click <strong>Security</strong>. </li><li>Click <strong>Create or</strong><strong>Manage Roles</strong>. </li><li>Use the form to add your application roles. </li></ol></li>
    <li>Assign users to roles as follows: <ol><li>In Visual Studio .NET, click <strong>ASP.NET Configuration </strong>on the <strong>Website</strong> menu. </li><li>On the <strong>Home</strong> tab, click <strong>Security</strong>. </li><li>Click <strong>Create or</strong><strong>Manage Roles</strong>. </li><li>In the <strong>Add/Remove Users</strong> column, click <strong>Manage</strong> for a role you have created. This opens a form where you can add or remove users from the role. </li></ol></li>
  </ol>
  <h2>Using the AzMan Administrator MMC Snap-In</h2>
  <p>This tool is provided for applications that use an AzMan store to manage its users and roles. It is particularly convenient for applications using Windows authentication that cannot use the ASP.NET configuration tool to assign users to roles. </p>
  <h2>Using SQL Scripts</h2>
  <p>If you have suitable permissions on the role management database, you can run a SQL script to call the various stored procedures provided with the Aspnetdb database. For example, the following script creates a new role in an application and adds a user to it.</p>
  <div>
    <pre>EXEC aspnet_Roles_CreateRole 'ThisApplication', 'NewRole'<br />EXEC aspnet_UsersInRoles_AddUsersToRoles 'ThisApplication', 'ThisUser', 'NewRole', 8  </pre>
  </div>
  <p>There are 19 role-managing stored procedures created inside the role management database. Most of these stored procedures have purposes analogous to calls in the role management API. </p>
  <h2>Using the Role Management APIs</h2>
  <p>You can assign users to roles or remove users from roles by using methods of the <strong>System.Web.Security.Roles</strong> class. You can also check for the user's role membership and authorize as appropriate.</p>
  <blockquote>
    <strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;Because the <strong>WindowsTokenRoleProvider</strong> is read-only, it supports only the <strong>IsUserInRole</strong> and <strong>GetRolesForUser </strong>methods.<strong></strong></blockquote>
  <p>The following code shows how to create new roles.</p>
  <div>
    <pre>using System.Web.Security;</pre>
    <pre>if (!Roles.RoleExists("TestRole"))<br />{<br />&amp;nbsp; Roles.CreateRole("TestRole");<br />}  </pre>
  </div>
  <blockquote>
    <strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;Role names are not case sensitive. If you attempt to create the same role twice, an exception is thrown.</blockquote>
  <p>The following code shows how to add users to roles.</p>
  <div>
    <pre>// Example 1 - Add one user to one role<br />Roles.AddUserToRole("TestOne", "ExampleRole1");</pre>
    <pre>// Example 2 - Add one user to several roles<br />Roles.AddUserToRoles("TestTwo", <br />&amp;nbsp; new string[] { "ExampleRole1", "ExampleRole2" });</pre>
    <pre>// Example 3 - Add several users to one roles<br />Roles.AddUsersToRole(<br />&amp;nbsp; new string[] { "TestTwo", "TestThree" }, "ExampleRole3");</pre>
    <pre>// Example 4 - Add several users to several roles<br />Roles.AddUsersToRoles(<br />&amp;nbsp; new string[] { "TestThree", "TestFour" }, <br />&amp;nbsp; new string[] { "ExampleRole4" }); </pre>
  </div>
  <p>The following code shows how to remove users from roles.</p>
  <div>
    <pre>// Example 1 - Add one user to one role<br />Roles.RemoveUserFromRole("TestOne", "ExampleRole1");</pre>
    <pre>// Example 2 - Add one user to several roles<br />Roles.RemoveUserFromRoles("TestTwo", <br />&amp;nbsp; new string[] { "ExampleRole1", "ExampleRole2" });</pre>
    <pre>// Example 3 - Add several users to one roles<br />Roles.RemoveUsersFromRole(<br />&amp;nbsp; new string[] { "TestTwo", "TestThree" }, "ExampleRole3");</pre>
    <pre>// Example 4 - Add several users to several roles<br />Roles.RemoveUsersFromRoles(<br />&amp;nbsp; new string[] { "TestThree", "TestFour" }, <br />&amp;nbsp; new string[] { "ExampleRole4" }); </pre>
  </div>
  <blockquote>
    <strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;Both the <strong>AddUser</strong> and <strong>RemoveUser</strong> methods throw a <strong>TargetInvocationException</strong> if you specify a role that does not exist or if you specify an invalid Windows user account name. The inner exception gives the reason for the failure. None of the methods mentioned earlier can be used against a <strong>WindowsTokenRoleProvider</strong>.</blockquote>
  <h1>Step 4. Perform Role-Based Authorization </h1>
  <p>In this step, you create test applications that use role management. This step provides two samples: </p>
  <ul>
    <li>The first sample uses the <strong>SqlRoleProvider</strong> or <strong>AuthorizationStoreRoleProvider</strong>, in which the application assigns a role to a user, removes a role from a user, and tests for role membership. </li>
    <li>The second sample uses the <strong>WindowsTokenRoleProvider</strong> to check which Windows groups (roles) the current user is a member of. The <strong>WindowsTokenRoleProvider</strong> supports only the<strong> IsUserInRole </strong>and <strong>GetRolesForUser </strong>methods of the role management API, and it does not allow you to create, assign to, or remove users from Windows groups. </li>
  </ul>
  <p>Both of these sample applications use Integrated Windows authentication in Microsoft Internet Information Services (IIS) to authenticate callers. This is a requirement when using the <strong>WindowsTokenRoleProvider</strong>, but if you are using the <strong>SqlRoleProvider</strong> or <strong>AuthorizationStoreRoleProvider</strong>, you could use alternative authentication such as forms authentication.</p>
  <h2>Sample: Using SqlRoleProvider or AuthorizationStoreRoleProvider</h2>
  <p>This sample uses the <strong>SqlRoleProvider</strong> or <strong>AuthorizationStoreRoleProvider</strong>.</p>
  <h3>To test role management with SqlRoleProvider or AuthorizationStoreRoleProvider </h3>
  <ol>
    <li>Use Visual Studio to create a Web site, add a Web.config file, and configure the role store and <strong>SqlRoleProvider</strong> or <strong>AuthorizationStoreRoleProvider</strong> as described in steps 1 and 2 of this How to. </li>
    <li>Using the Internet Information Services MMC snap-in, edit the properties of the Web site. Edit the <strong>Anonymous access and authentication control</strong> on the <strong>Directory</strong><strong>security</strong> tab. Clear the <strong>Anonymous access</strong> check box and select the <strong>Integrated Windows authentication</strong> check box. </li>
    <li>In the Web.config file, enable Windows authentication. <div><pre>&lt;system.web&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; ...<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;authentication mode="Windows"/&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; ...<br />&lt;/system.web&gt;  </pre></div></li>
    <li>Add the following code to the Default.aspx file. <div><pre>&lt;%@ Page Language="C#" %&gt;<br />&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "<a href="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd</a>"&gt;<br />&lt;script runat="server"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void Page_Load(object sender, EventArgs e)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (!Roles.RoleExists("TestRole"))<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Roles.CreateRole("TestRole");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ShowRoleMembership();<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; private void ShowRoleMembership()<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; if (Roles.IsUserInRole("TestRole"))<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Label1.Text = User.Identity.Name + " is in role TestRole";<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; else<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Label1.Text = User.Identity.Name + " is NOT in role TestRole";<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void Button1_Click(object sender, EventArgs e)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Roles.AddUserToRole(User.Identity.Name, "TestRole");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ShowRoleMembership();<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void Button2_Click(object sender, EventArgs e)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Roles.RemoveUserFromRole(User.Identity.Name, "TestRole");<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ShowRoleMembership();<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&lt;/script&gt;<br />&lt;html&amp;nbsp; &gt;<br />&lt;head runat="server"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;title&gt;Untitled Page&lt;/title&gt;<br />&lt;/head&gt;<br />&lt;body&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;form id="form1" runat="server"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;div&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:Button ID="Button1" runat="server" Text="Add to role" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; OnClick="Button1_Click" /&gt;&lt;br /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;br /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:Button ID="Button2" runat="server" Text="Remove from role" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; OnClick="Button2_Click" /&gt;&lt;br /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;br /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:Label ID="Label1" runat="server" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/form&gt;<br />&lt;/body&gt;<br />&lt;/html  </pre></div></li>
    <li>Run the application. Note the following features about this application: <ol><li>When you browse to the application, the code in the <strong>Page_Load</strong> event handler creates the role <strong>TestRole</strong> if it does not already exist. <ul><li>The text of <strong>Label1</strong> shows whether the current authenticated user is a member of the <strong>TestRole</strong> role. </li><li>When you click the <strong>Add to role</strong> button, the code in the <strong>Button1_Click</strong> event handler uses the role management API to add the current authenticated user to the <strong>TestRole</strong> role. </li><li>If you click the <strong>Add to role</strong> button again before clicking the <strong>Remove from role</strong> button, the call to <strong>Roles.AddUserToRole</strong> throws an exception because the user is already in the role <strong>TestUser</strong>. You must code for this condition in your applications. </li><li>When you click the <strong>Remove from role</strong> button, the current authenticated user is removed from the role <strong>TestRole</strong>. </li><li>If you click the <strong>Remove from role</strong> button again before clicking the <strong>Add to role</strong> button, the call to <strong>Roles.RemoveUserFromRole</strong> throws an exception because the user is already not in the role <strong>TestUser</strong> and cannot be removed twice. You must code for this condition in your applications. </li></ul></li></ol></li>
  </ol>
  <p>
    <strong>To control access to pages and folders using roles</strong>
  </p>
  <p>A typical use for roles is to establish rules that allow or deny access to pages or folders. You can set up such access rules in the &lt;<strong>authorization</strong>&gt; section of the Web.config file. The following example allows users in the role of members to view pages in the folder named <strong>memberPages</strong> and denies access to anyone else.</p>
  <div>
    <pre>&lt;configuration&gt;<br />&amp;nbsp;&amp;nbsp; &lt;location path="memberPages"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;system.web&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;authorization&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;allow roles="Manager" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;deny users="*" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/authorization&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/system.web&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/location&gt;<br />&amp;nbsp;&amp;nbsp; &lt;!-- other configuration settings here --&gt;<br />&lt;configuration&gt;  </pre>
  </div>
  <h2>Sample: Using WindowsTokenRoleProvider</h2>
  <p>This sample uses the <strong>WindowsTokenRoleProvider</strong>.</p>
  <h3>To test role management with WindowsTokenRoleProvider </h3>
  <ol>
    <li>Use Visual Studio&amp;nbsp;to create a Web site, add a Web.config file, and configure the <strong>WindowsTokenRoleProvider</strong> as described in step 2 of this How to. </li>
    <li>Using the Internet Information Services MMC snap-in, edit the properties of the Web site. Edit the <strong>Anonymous access and authentication control</strong> on the <strong>Directory security</strong> tab. Clear the <strong>Anonymous access</strong> check box and select the <strong>Integrated Windows Authentication</strong> check box. </li>
    <li>In the Web.config file, enable Windows authentication. <div><pre>&lt;system.web&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; ...<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;authentication mode="Windows"/&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; ...<br />&lt;/system.web&gt;  </pre></div></li>
    <li>Add the following code to Default.aspx. <div><div><div></div></div><pre>&lt;%@ Page Language="C#" %&gt;<br />&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.1//EN" "<a href="http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd">http://www.w3.org/TR/xhtml11/DTD/xhtml11.dtd</a>"&gt;<br />&lt;script runat="server"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; protected void Page_Load(object sender, EventArgs e)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; string[] members = Roles.GetRolesForUser();<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; foreach (string role in members)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; {<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; Label1.Text += role + "&lt;br /&gt;";<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; }<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; } <br />&lt;/script&gt;<br />&lt;html&amp;nbsp; &gt;<br />&lt;head runat="server"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;title&gt;Untitled Page&lt;/title&gt;<br />&lt;/head&gt;<br />&lt;body&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;form id="form1" runat="server"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;div&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:Label ID="Label1" runat="server" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/div&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/form&gt;<br />&lt;/body&gt;<br />&lt;/html&gt;  </pre></div></li>
    <li>Run the application. A list of roles that correspond to the Windows groups that the authenticated user is a member of is displayed. Note the following features about this application: <ol><li>Because <strong>WindowsTokenRoleProvider</strong> is read-only, you cannot create, assign to, or remove users from roles. The <strong>WindowsTokenRoleProvider</strong> supports only the <strong>IsUserInRole </strong>and <strong>GetRolesForUser</strong> methods of the role management API. </li></ol></li>
  </ol>
  <ul>
    <li>The text of <strong>Label1</strong> shows which Windows groups the currently logged on user is a member of. </li>
    <li>The <strong>WindowsPrincipal </strong>class supports an override of the <strong>IsInRole</strong> method that accepts a <strong>WindowsBuiltinRole</strong> enumeration. This method allows you to test against membership of common Windows groups. The <strong>WindowsBuiltInRole</strong> enumeration contains members representing common groups such as Administrators, Guest, PowerUser, and User as shown here. <div><div><div></div><div>&amp;nbsp;</div></div><pre>WindowsPrincipal User = new <br />&amp;nbsp; WindowsPrincipal((WindowsIdentity)HttpContext.Current.User.Identity);<br />if (User.IsInRole(WindowsBuiltInRole.PowerUser))<br />{<br />&amp;nbsp; ...<br />}  </pre></div></li>
  </ul>
  <p>
    <strong>To control access to pages and folders using built-in roles with the WindowsTokenRoleProvider</strong>
  </p>
  <p>You can control access to pages or folders to members of one of the built-in Windows groups by specifying the role in the format <strong>BUILTIN\<em>groupName</em></strong>. The following example allows users in the built-in administrators group to view pages in the folder named memberPages and denies access to anyone else.</p>
  <div>
    <pre>&lt;configuration&gt;<br />&amp;nbsp;&amp;nbsp; &lt;location path="memberPages"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;system.web&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;authorization&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;allow roles="BUILTIN\Administrators" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;deny users="*" /&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/authorization&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/system.web&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;/location&gt;<br />&amp;nbsp;&amp;nbsp; &lt;!-- other configuration settings here --&gt;<br />&lt;/configuration  </pre>
  </div>
  <h1>Additional Considerations</h1>
  <p>If a user's browser accepts cookies, you can store role information for that user in a cookie on the user's computer. On each page request, ASP.NET reads the role information for that user from the cookie. This can improve application performance by reducing the amount of communication required with the roles data store. </p>
  <p>To configure and enable role caching, set <strong>cacheRolesInCookie = true</strong> as shown here.</p>
  <div>
    <pre>&lt;roleManager enabled="true" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cacheRolesInCookie="true" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cookieName=".ASPXROLES"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cookieTimeout="30" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cookiePath="/" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cookieRequireSSL="false" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cookieSlidingExpiration="true"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; cookieProtection="All" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; defaultProvider="AspNetSqlRoleProvider"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; createPersistentCookie="false" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; maxCachedResults="25"/&gt;  </pre>
  </div>
  <p>If the role information for a user is too long to store in a cookie, ASP.NET stores only the most recently used role information in the cookie, and then it looks up additional role information in the data source as required. </p>
  <p>To secure the role cookie: </p>
  <ul>
    <li>Set <strong>cookieRequireSSL</strong> to <strong>true</strong> to ensure the cookie is only used over an SSL protected channel. </li>
    <li>Set <strong>createPersistentCookie</strong> to <strong>false</strong> to prevent the cookie from being stored on the client computer, in which case the cookie is only used to protect the current session. </li>
    <li>Set <strong>cookieTimeout</strong> to the number of minutes for which the cookie is valid.</li>
  </ul>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1152373269" Content_Hash="1617189997">
    <Metadata>
      <Id>d1220cc3-7aef-472d-92de-182218c05c93</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>How to Protect From SQL Injection in ASP.NET</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Implementation</Phase>
      <Technology>ASP.NET 3.5</Technology>
      <Type>How To</Type>
      <DirectLink>How to Protect From SQL Injection in ASP.NET</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Summary</h1>
  <p>This How to shows a number of ways to help protect your ASP.NET application from SQL injection attacks. SQL injection can occur when an application uses input to construct dynamic SQL statements or when it uses stored procedures to connect to the database. Conventional security measures, such as the use of SSL and IPSec, do not protect your application from SQL injection attacks. Successful SQL injection attacks enable malicious users to execute commands in an application's database.</p>
  <p>Countermeasures include using a list of acceptable characters to constrain input, using parameterized SQL for data access, and using a low privileged account that has restricted permissions in the database. Using stored procedures with parameterized SQL is the recommended approach because SQL parameters are type safe. Type-safe SQL parameters can also be used with dynamic SQL. In situations where parameterized SQL cannot be used, consider using character escaping techniques. </p>
  <h1>Contents</h1>
  <ul>
    <li>
      <div>Objectives</div>
    </li>
    <li>
      <div>Overview</div>
    </li>
    <li>
      <div>Summary of Steps</div>
    </li>
    <li>
      <div>Step 1. Constrain Input</div>
    </li>
    <li>
      <div>Step 2. Use Parameters with Stored Procedures</div>
    </li>
    <li>
      <div>Step 3. Use Parameters with Dynamic SQL</div>
    </li>
    <li>
      <div>Additional Considerations</div>
    </li>
    <li>
      <div>Additional Resources</div>
    </li>
  </ul>
  <h1>Objectives</h1>
  <ul>
    <li>Learn how SQL injection attacks work. </li>
    <li>Constrain input to prevent SQL injection. </li>
    <li>Use type safe SQL command parameters to prevent SQL injection. </li>
    <li>Use a low privileged account to connect to the database.&amp;nbsp; </li>
    <li>Learn additional countermeasures to further reduce risk. </li>
  </ul>
  <h1>Overview</h1>
  <p>A successful SQL injection attack enables a malicious user to execute commands in your application's database by using the privileges granted to your application's login. The problem is more severe if your application uses an over-privileged account to connect to the database. For example, if your application's login has privileges to eliminate a database, then without adequate safeguards, an attacker might be able to perform this operation.</p>
  <p>Common vulnerabilities that make your data access code susceptible to SQL injection attacks include: </p>
  <ul>
    <li>Weak input validation. </li>
    <li>Dynamic construction of SQL statements without the use of type-safe parameters. </li>
    <li>Use of over-privileged database logins. </li>
  </ul>
  <h2>SQL Injection Example</h2>
  <p>Consider what happens when a user types the following string in the <strong>SSN</strong> text box, which is expecting a Social Security number of the form <em>nnn-nn-nnnn</em>.</p>
  <div>
    <pre>' ; DROP DATABASE pubs  --  </pre>
  </div>
  <p>Using the input, the application executes the following dynamic SQL statement or stored procedure, which internally executes a similar SQL statement. </p>
  <div>
    <pre>// Use dynamic SQL<br />SqlDataAdapter myCommand = new SqlDataAdapter(<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "SELECT au_lname, au_fname FROM authors WHERE au_id = '" + <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SSN.Text + "'", myConnection);</pre>
  </div>
  <pre>// Use stored procedures<br />SqlDataAdapter myCommand = new SqlDataAdapter(<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "LoginStoredProcedure '" + <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; SSN.Text + "'", myConnection);<br /></pre>
  <p>The developer's intention was that when the code runs, it inserts the user's input and generates a SQL the following statement.</p>
  <div>
    <pre>SELECT au_lname, au_fname FROM authors WHERE au_id = '172-32-9999'  </pre>
  </div>
  <p>However, the code inserts the user's malicious input and generates the following query.</p>
  <div>
    <pre>SELECT au_lname, au_fname FROM authors WHERE au_id = ''; DROP DATABASE pubs --'  </pre>
  </div>
  <p>In this case, the <strong>'</strong> (single quotation mark) character that starts the rogue input terminates the current string literal in the SQL statement. It closes the current statement only if the following parsed token does not make sense as a continuation of the current statement but does make sense as the start of a new statement. As a result, the opening single quotation mark character of the rogue input results in the following statement.</p>
  <div>
    <pre>SELECT au_lname, au_fname FROM authors WHERE au_id = ''  </pre>
  </div>
  <p>The<strong>;</strong> (semicolon) character tells SQL that this is the end of the current statement, which is then followed by the following malicious SQL code.</p>
  <div>
    <div>
      <div>
      </div>
      <div>
        <a class="copyCode" href="javascript:CopyCode('ctl00_LibFrame_ctl09');">
        </a>&amp;nbsp;</div>
    </div>
    <pre>; DROP DATABASE pubs  </pre>
  </div>
  <blockquote>
    <strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;The semicolon is not necessarily required to separate SQL statements. This is dependent on vendor or implementation, but Microsoft SQL Server does not require them. For example, SQL Server parses the following as two separate statements:</blockquote>
  <blockquote>SELECT * FROM MyTable DELETE FROM MyTable</blockquote>
  <blockquote>
  </blockquote>
  <p>Finally, the <strong>--</strong> (double dash) sequence of characters is a SQL comment that tells SQL to ignore the rest of the text. In this case, SQL ignores the closing <strong>'</strong> (single quotation mark) character, which would otherwise cause a SQL parser error.</p>
  <div>
    <pre>--'  </pre>
  </div>
  <h2>Guidelines</h2>
  <p>To counter SQL injection attacks, you need to: </p>
  <ul>
    <li>
      <strong>Constrain and sanitize input data. </strong>Check for known good data by validating for type, length, format, and range. </li>
    <li>
      <strong>Use type-safe SQL parameters for data access.</strong> You can use these parameters with stored procedures or dynamically constructed SQL command strings. Parameter collections such as <strong>SqlParameterCollection</strong> provide type checking and length validation. If you use a parameters collection, input is treated as a literal value, and SQL Server does not treat it as executable code. An additional benefit of using a parameters collection is that you can enforce type and length checks. Values outside of the range trigger an exception. This is a good example of defense in depth. </li>
    <li>
      <strong>Use an account that has restricted permissions in the database.</strong> Ideally, you should only grant execute permissions to selected stored procedures in the database and provide no direct table access. </li>
    <li>
      <strong>Avoid disclosing database error information. </strong>In the event of database errors, make sure you do not disclose detailed error messages to the user. </li>
  </ul>
  <blockquote>
    <strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;Conventional security measures, such as the use of Secure Socket Layer (SSL) and IP Security (IPSec), do not protect your application from SQL injection attacks. </blockquote>
  <h1>Summary of Steps</h1>
  <p>To protect your application from SQL injection, perform the following steps: </p>
  <ul>
    <li>Step 1. Constrain input. </li>
    <li>Step 2. Use parameters with stored procedures. </li>
    <li>Step 3. Use parameters with dynamic SQL.<strong></strong></li>
  </ul>
  <h1>Step 1. Constrain Input</h1>
  <p>You should validate all input to your ASP.NET applications for type, length, format, and range. By constraining the input used in your data access queries, you can protect your application from SQL injection. </p>
  <blockquote>
    <strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;When constraining input, it is a good practice to create a list of acceptable characters and use regular expressions to reject any characters that are not on the list. The potential risk associated with using a list of unacceptable characters is that it is always possible to overlook an unacceptable character when defining the list; also, an unacceptable character can be represented in an alternate format to pass validation. </blockquote>
  <h2>Constrain Input in ASP.NET Web Pages</h2>
  <p>Start by constraining input in the server-side code for your ASP.NET Web pages. Do not rely on client-side validation because it can be easily bypassed. Use client-side validation only to reduce round trips and to improve the user experience.</p>
  <p>If you use server controls, use the ASP.NET validator controls, such as the <strong>RegularExpressionValidator</strong> and <strong>RangeValidator</strong> controls to constrain input. If you use regular HTML input controls, use the <strong>Regex</strong> class in your server-side code to constrain input.</p>
  <p>If in the previous code example, the SSN value is captured by an ASP.NET <strong>TextBox</strong> control, you can constrain its input by using a <strong>RegularExpressionValidator</strong> control as shown in the following.</p>
  <div>
    <pre>&lt;%@ language="C#" %&gt;<br />&lt;form id="form1" runat="server"&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:TextBox ID="SSN" runat="server"/&gt;<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;asp:RegularExpressionValidator ID="regexpSSN" runat="server"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ErrorMessage="Incorrect SSN Number" <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ControlToValidate="SSN"&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ValidationExpression="^\d{3}-\d{2}-\d{4}$" /&gt;<br />&lt;/form&gt;  </pre>
  </div>
  <p>If the SSN input is from another source, such as an HTML control, a query string parameter, or a cookie, you can constrain it by using the <strong>Regex</strong> class from the <strong>System.Text.RegularExpressions</strong> namespace. The following example assumes that the input is obtained from a cookie.</p>
  <p>using System.Text.RegularExpressions;</p>
  <div>
    <pre>if (Regex.IsMatch(Request.Cookies["SSN"], "^\d{3}-\d{2}-\d{4}$"))<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // access the database<br />}<br />else<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // handle the bad input<br />}  </pre>
  </div>
  <h2>Constrain Input in Data Access Code</h2>
  <p>In some situations, you need to provide validation in your data access code, perhaps in addition to your ASP.NET page-level validation. Two common situations where you need to provide validation in your data access code are: </p>
  <ul>
    <li>
      <strong>Untrusted clients.</strong> If the data can come from an untrusted source or you cannot guarantee how well the data has been validated and constrained, add validation logic that constrains input to your data access routines. </li>
    <li>
      <strong>Library code. </strong>If your data access code is packaged as a library designed for use by multiple applications, your data access code should perform its own validation, because you can make no safe assumptions about the client applications. </li>
  </ul>
  <p>The following example shows how a data access routine can validate its input parameters by using regular expressions prior to using the parameters in a SQL statement.</p>
  <div>
    <pre>using System;<br />using System.Text.RegularExpressions;</pre>
  </div>
  <pre>public void CreateNewUserAccount(string name, string password)<br />{<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // Check name contains only lower case or upper case letters, <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // the apostrophe, a dot, or white space. Also check it is <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // between 1 and 40 characters long<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; if ( !Regex.IsMatch(userIDTxt.Text, @"^[a-zA-Z'./s]{1,40}$"))<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new FormatException("Invalid name format");</pre>
  <pre>&amp;nbsp;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp; // Check password contains at least one digit, one lower case <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // letter, one uppercase letter, and is between 8 and 10 <br />&amp;nbsp;&amp;nbsp;&amp;nbsp; // characters long<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; if ( !Regex.IsMatch(passwordTxt.Text, <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; @"^(?=.*\d)(?=.*[a-z])(?=.*[A-Z]).{8,10}$" ))<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; throw new FormatException("Invalid password format");</pre>
  <pre>&amp;nbsp;</pre>
  <pre>&amp;nbsp;&amp;nbsp;&amp;nbsp; // Perform data access logic (using type safe parameters)<br />&amp;nbsp;&amp;nbsp;&amp;nbsp; ...<br />}</pre>
  <h1>Step 2. Use Parameters with Stored Procedures</h1>
  <p>Using stored procedures does not necessarily prevent SQL injection. The important thing to do is use parameters with stored procedures. If you do not use parameters, your stored procedures can be susceptible to SQL injection if they use unfiltered input as described in the "Overview" section of this document.</p>
  <p>The following code shows how to use <strong>SqlParameterCollection</strong> when calling a stored procedure.</p>
  <div>
    <pre>using System.Data;<br />using System.Data.SqlClient;</pre>
    <pre>using (SqlConnection connection = new SqlConnection(connectionString))<br />{<br />&amp;nbsp; DataSet userDataset = new DataSet();<br />&amp;nbsp; SqlDataAdapter myCommand = new SqlDataAdapter( <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "LoginStoredProcedure", connection);<br />&amp;nbsp; myCommand.SelectCommand.CommandType = CommandType.StoredProcedure;<br />&amp;nbsp; myCommand.SelectCommand.Parameters.Add("@au_id", SqlDbType.VarChar, 11);<br />&amp;nbsp; myCommand.SelectCommand.Parameters["@au_id"].Value = SSN.Text;</pre>
    <pre>&amp;nbsp; myCommand.Fill(userDataset);<br />}  </pre>
  </div>
  <p>In this case, the <strong>@au_id</strong> parameter is treated as a literal value and not as executable code. Also, the parameter is checked for type and length. In the preceding code example, the input value cannot be longer than 11 characters. If the data does not conform to the type or length defined by the parameter, the <strong>SqlParameter</strong> class throws an exception.</p>
  <h2>Review Your Application's Use of Parameterized Stored Procedures</h2>
  <p>Because using stored procedures with parameters does not necessarily prevent SQL injection, you should review your application's use of this type of stored procedure. For example, the following parameterized stored procedure has several security vulnerabilities.</p>
  <div>
    <pre>CREATE PROCEDURE dbo.RunQuery@var ntextAS<br />        exec sp_executesql @varGO  </pre>
  </div>
  <p>An application that uses a stored procedure similar to the one in the preceding code example has the following vulnerabilities: </p>
  <ul>
    <li>The stored procedure executes whatever statement is passed to it. Consider the <strong>@var</strong> variable being set to: <div><pre>DROP TABLE ORDERS;  </pre></div><p>In this case, the ORDERS table will be dropped. </p></li>
    <li>The stored procedure runs with <strong>dbo</strong> privileges. </li>
    <li>The stored procedure's name (<strong>RunQuery</strong>) is a poor choice. If an attacker is able to probe the database, he or she will see the name of the stored procedure. With a name like <strong>RunQuery</strong>, he can guess that the stored procedure is likely to run the supplied query. </li>
  </ul>
  <h1>Step 3. Use Parameters with Dynamic SQL</h1>
  <p>If you cannot use stored procedures, you should still use parameters when constructing dynamic SQL statements. The following code shows how to use <strong>SqlParametersCollection</strong> with dynamic SQL.</p>
  <div>
    <pre>using System.Data;<br />using System.Data.SqlClient;</pre>
  </div>
  <pre>using (SqlConnection connection = new SqlConnection(connectionString))<br />{<br />&amp;nbsp; DataSet userDataset = new DataSet();<br />&amp;nbsp; SqlDataAdapter myDataAdapter = new SqlDataAdapter(<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "SELECT au_lname, au_fname FROM Authors WHERE au_id = @au_id", <br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connection);&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; <br />&amp;nbsp; myCommand.SelectCommand.Parameters.Add("@au_id", SqlDbType.VarChar, 11);<br />&amp;nbsp; myCommand.SelectCommand.Parameters["@au_id"].Value = SSN.Text;<br />&amp;nbsp; myDataAdapter.Fill(userDataset);<br />}</pre>
  <h2>Using Parameter Batching</h2>
  <p>A common misconception is that if you concatenate several SQL statements to send a batch of statements to the server in a single round trip, you cannot use parameters. However, you can use this technique if you make sure that parameter names are not repeated. You can easily do this by making sure that you use unique parameter names during SQL text concatenation, as shown here.</p>
  <div>
    <pre>using System.Data;<br />using System.Data.SqlClient;<br />. . .<br />using (SqlConnection connection = new SqlConnection(connectionString))<br />{<br />&amp;nbsp; SqlDataAdapter dataAdapter = new SqlDataAdapter(<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "SELECT CustomerID INTO #Temp1 FROM Customers " +<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "WHERE CustomerID &gt; @custIDParm; SELECT CompanyName FROM Customers " +<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "WHERE Country = @countryParm and CustomerID IN " +<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "(SELECT CustomerID FROM #Temp1);",<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; connection);<br />&amp;nbsp; SqlParameter custIDParm = dataAdapter.SelectCommand.Parameters.Add(<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "@custIDParm", SqlDbType.NChar, 5);<br />&amp;nbsp; custIDParm.Value = customerID.Text;</pre>
    <pre>&amp;nbsp; SqlParameter countryParm = dataAdapter.SelectCommand.Parameters.Add(<br />&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; "@countryParm", SqlDbType.NVarChar, 15);<br />&amp;nbsp; countryParm.Value = country.Text;</pre>
    <pre>&amp;nbsp; connection.Open();<br />&amp;nbsp; DataSet dataSet = new DataSet();<br />&amp;nbsp; dataAdapter.Fill(dataSet);<br />}<br />. . .  </pre>
  </div>
  <h1>Additional Considerations</h1>
  <p>Other things to consider when you develop countermeasures to prevent SQL injection include: </p>
  <ul>
    <li>Use escape routines to handle special input characters. </li>
    <li>Use a low privileged database account.&amp;nbsp; </li>
    <li>Avoid disclosing error information. </li>
  </ul>
  <h2>Use Escape Routines to Handle Special Input Characters</h2>
  <p>In situations where parameterized SQL cannot be used and you are forced to use dynamic SQL instead, you need to safeguard against input characters that have special meaning to SQL Server (such as the single quote character). If not handled, special characters such as the single quote character in the input can be utilized to cause SQL injection. </p>
  <blockquote>
    <strong>Note</strong>&amp;nbsp;&amp;nbsp;&amp;nbsp;Special input characters pose a threat only with dynamic SQL and not when using parameterized SQL. </blockquote>
  <p>Escape routines add an escape character to characters that have special meaning to SQL Server, thereby making them harmless. This is illustrated in the following code fragment:</p>
  <div>
    <pre>private string SafeSqlLiteral(string inputSQL){  return inputSQL.Replace("'", "''");</pre>
  </div>
  <p>}</p>
  <h2>Use a Least-Privileged Database Account</h2>
  <p>Your application should connect to the database by using a least-privileged account. If you use Windows authentication to connect, the Windows account should be least-privileged from an operating system perspective and should have limited privileges and limited ability to access Windows resources. Additionally, whether or not you use Windows authentication or SQL authentication, the corresponding SQL Server login should be restricted by permissions in the database.</p>
  <p>Consider the example of an ASP.NET application running on Microsoft Windows Server 2003 that accesses a database on a different server in the same domain. By default, the ASP.NET application runs in an application pool that runs under the Network Service account. This account is a low privileged account.</p>
  <h3>To access SQL Server with the Network Service account </h3>
  <ol>
    <li>Create a SQL Server login for the Web server's Network Service account. The Network Service account has network credentials that are presented at the database server as the identity <em>DOMAIN</em>\<em>WEBSERVERNAME</em>$. For example, if your domain is called XYZ and the Web server is called 123, you create a database login for XYZ\123$. </li>
    <li>Grant the new login access to the required database by creating a database user and adding the user to a database role. </li>
    <li>Establish permissions to let this database role call the required stored procedures or access the required tables in the database. Only grant access to stored procedures the application needs to use, and only grant sufficient access to tables based on the application's minimum requirements. <p>For example, if the ASP.NET application only performs database lookups and does not update any data, you only need to grant read access to the tables. This limits the damage that an attacker can cause if the attacker succeeds in a SQL injection attack. </p></li>
  </ol>
  <h2>Avoid Disclosing Error Information</h2>
  <p>Use structured exception handling to catch errors and prevent them from propagating back to the client. Log detailed error information locally, but return limited error details to the client. </p>
  <p>If errors occur while the user is connecting to the database, be sure that you provide only limited information about the nature of the error to the user. If you disclose information related to data access and database errors, you could provide a malicious user with useful information that he or she can use to compromise your database security. Attackers use the information in detailed error messages to help deconstruct a SQL query that they are trying to inject with malicious code. A detailed error message may reveal valuable information such as the connection string, SQL server name, or table and database naming conventions.</p>
  <hr />
  <p>Adapted from Microsoft patterns &amp; practices guidance.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-177320928" Content_Hash="1723727406">
    <Metadata>
      <Id>399a0935-8990-49fb-b4ab-e04643429dbe</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Encrypt the Data Or Secure the Communication Channel</Title>
      <Category>Communication Security</Category>
      <Phase>Design</Phase>
      <Technology> Any</Technology>
      <Type>Principle</Type>
      <DirectLink>Encrypt the Data Or Secure the Communication Channel</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<br />
  <h1>Description</h1>
  <p>If you are sending sensitive data over the network to the client, encrypt the data or secure the channel. A common practice is to use SSL between the client and Web server. Between servers, an increasingly common approach is to use IPSec. For securing sensitive data that flows through several intermediaries, for example, Web service Simple Object Access Protocol (SOAP) messages, use message level encryption.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-2113264258" Content_Hash="648007361">
    <Metadata>
      <Id>610ea4af-99d3-4077-b1ad-a785a8eb0052</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Use SSL to Protect Session Authentication Cookies</Title>
      <Category>Session Management</Category>
      <Phase>Design</Phase>
      <Technology> Any</Technology>
      <Type>Principle</Type>
      <DirectLink>Use SSL to Protect Session Authentication Cookies</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Description</h1>
  <p>Do not pass authentication cookies over HTTP connections. Set the secure cookie property within authentication cookies, which instructs browsers to send cookies back to the server only over HTTPS connections. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-296666045" Content_Hash="279882685">
    <Metadata>
      <Id>74b457be-5d2c-41ac-84dd-863d465a8511</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Don&amp;#39;t Trust User Input</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Design</Phase>
      <Technology> Any</Technology>
      <Type>Principle</Type>
      <DirectLink>Don&amp;#39;t Trust User Input</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Description</h1>
  <p>Applications should thoroughly validate all user input before performing operations with that input. The validation may include filtering out special characters. This preventive measure protects the application against accidental misuse or deliberate attacks by people who are attempting to inject malicious commands into the system. Common examples include SQL injection attacks, cross-site scripting attacks, and buffer overflow. </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1682710464" Content_Hash="85297018">
    <Metadata>
      <Id>9d0ec95a-7749-4bb2-9822-bc909b496d20</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Constrain, Reject, And Sanitize Input</Title>
      <Category>Input and Data Validation</Category>
      <Phase>Design</Phase>
      <Technology> Any</Technology>
      <Type>Principle</Type>
      <DirectLink>Constrain, Reject, And Sanitize Input</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Description</h1>
  <p>The preferred approach to validating input is to constrain what you allow from the beginning. It is much easier to validate data for known valid types, patterns, and ranges than it is to validate data by looking for known bad characters. When you design your application, you know what your application expects. The range of valid data is generally a more finite set than potentially malicious input. However, for defense in depth you may also want to reject known bad input and then sanitize the input.</p>
  <p>To create an effective input validation strategy, be aware of the following approaches and their tradeoffs: </p>
  <ul>
    <li>Constrain input. </li>
    <li>Validate data for type, length, format, and range. </li>
    <li>Reject known bad input. </li>
    <li>Sanitize input. </li>
  </ul>
  <h3>Constrain Input</h3>
  <p>Constraining input is about allowing good data. This is the preferred approach. The idea here is to define a filter of acceptable input by using type, length, format, and range. Define what is acceptable input for your application fields and enforce it. Reject everything else as bad data.</p>
  <p>Constraining input may involve setting character sets on the server so that you can establish the canonical form of the input in a localized way.</p>
  <h3>Validate Data for Type, Length, Format, and Range</h3>
  <p>Use strong type checking on input data wherever possible, for example, in the classes used to manipulate and process the input data and in data access routines. For example, use parameterized stored procedures for data access to benefit from strong type checking of input fields.</p>
  <p>String fields should also be length checked and in many cases checked for appropriate format. For example, ZIP codes, personal identification numbers, and so on have well defined formats that can be validated using regular expressions. Thorough checking is not only good programming practice; it makes it more difficult for an attacker to exploit your code. The attacker may get through your type check, but the length check may make executing his favorite attack more difficult.</p>
  <h3>Reject Known Bad Input</h3>
  <p>Deny "bad" data; although do not rely completely on this approach. This approach is generally less effective than using the "allow" approach described earlier and it is best used in combination. To deny bad data assumes your application knows all the variations of malicious input. Remember that there are multiple ways to represent characters. This is another reason why "allow" is the preferred approach.</p>
  <p>While useful for applications that are already deployed and when you cannot afford to make significant changes, the "deny" approach is not as robust as the "allow" approach because bad data, such as patterns that can be used to identify common attacks, do not remain constant. Valid data remains constant while the range of bad data may change over time.</p>
  <h3>Sanitize Input</h3>
  <p>Sanitizing is about making potentially malicious data safe. It can be helpful when the range of input that is allowed cannot guarantee that the input is safe. This includes anything from stripping a null from the end of a user-supplied string to escaping out values so they are treated as literals.</p>
  <p>Another common example of sanitizing input in Web applications is using URL encoding or HTML encoding to wrap data and treat it as literal text rather than an executable script. HtmlEncode methods escape out HTML characters, and UrlEncode methods encode a URL so that it is a valid URI request.</p>
  <h3>In Practice</h3>
  <p>The following are examples applied to common input fields, using the preceding approaches: </p>
  <ul>
    <li>
      <strong>Last Name field</strong>. This is a good example where constraining input is appropriate In this case, you might allow string data in the range ASCII A-Z and a-z, and also hyphens and curly apostrophes (curly apostrophes have no significance to SQL) to handle names such as O'Dell. You would also limit the length to your longest expected value. </li>
    <li>
      <strong>Quantity field</strong>. This is another case where constraining input works well. In this example, you might use a simple type and range restriction. For example, the input data may need to be a positive integer between 0 and 1000. </li>
    <li>
      <strong>Free-text field</strong>. Examples include comment fields on discussion boards. In this case, you might allow letters and spaces, and also common characters such as apostrophes, commas, and hyphens. The set that is allowed does not include less than and greater than signs, brackets, and braces. </li>
  </ul>
  <p>Some applications might allow users to mark up their text using a finite set of script characters, such as bold "&lt;b&gt;", italic "&lt;i&gt;", or even include a link to their favorite URL. In the case of a URL, your validation should encode the value so that it is treated as a URL. </p>
  <p>An existing Web application that does not validate user input. In an ideal scenario, the application checks for acceptable input for each field or entry point. However, if you have an existing Web application that does not validate user input, you need a stopgap approach to mitigate risk until you can improve your application's input validation strategy. While neither of the following approaches ensures safe handling of input, because that is dependent on where the input comes from and how it is used in your application, they are in practice today as quick fixes for short-term security improvement: </p>
  <ul>
    <li>HTML-encoding and URL-encoding user input when writing back to the client. In this case, the assumption is that no input is treated as HTML and all output is written back in a protected form. This is sanitization in action. </li>
    <li>Rejecting malicious script characters. This is a case of rejecting known bad input. In this case, a configurable set of malicious characters is used to reject the input. As described earlier, the problem with this approach is that bad data is a matter of context. </li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1893037100" Content_Hash="1770818567">
    <Metadata>
      <Id>b5ba90be-d6e2-4f37-a75a-ac31315ad990</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Protect Your Administration Interfaces</Title>
      <Category>Server Hardening</Category>
      <Phase>Design</Phase>
      <Technology> Any</Technology>
      <Type>Principle</Type>
      <DirectLink>Protect Your Administration Interfaces</DirectLink>
      <Tag />
      <Security_Demand />
      <Author>J.D. Meier, Alex Mackman, Michael Dunner, Srinath Vasireddy, Ray Escamilla and Anandha Murukan</Author>
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Description<br /></h1>
  <p>It is important that configuration management functionality is accessible only by authorized operators and administrators. A key part is to enforce strong authentication over your administration interfaces, for example, by using certificates.</p>
  <p>If possible, limit or avoid the use of remote administration and require administrators to log on locally. If you need to support remote administration, use encrypted channels, for example, with SSL or VPN technology, because of the sensitive nature of the data passed over administrative interfaces. Also consider limiting remote administration to computers on the internal network by using IPSec policies, to further reduce risk.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1722677719" Content_Hash="355285596">
    <Metadata>
      <Id>c977bdea-a46e-4259-8266-b396efcf83b8</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Protect Authentication Cookies</Title>
      <Category>Authentication</Category>
      <Phase>Design</Phase>
      <Technology> Any</Technology>
      <Type>Principle</Type>
      <DirectLink>Protect Authentication Cookies</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Description</h1>
  <p>A stolen authentication cookie is a stolen logon. Protect authentication tickets using encryption and secure communication channels. Also limit the time interval in which an authentication ticket remains valid, to counter the spoofing threat that can result from replay attacks, where an attacker captures the cookie and uses it to gain illicit access to your site. Reducing the cookie timeout does not prevent replay attacks but it does limit the amount of time the attacker has to access the site using the stolen cookie.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1154780927" Content_Hash="-2106966475">
    <Metadata>
      <Id>ea26dddc-9b25-4905-82d2-bb72801b6d20</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Protect Your Encryption Keys</Title>
      <Category>Encryption</Category>
      <Phase>Design</Phase>
      <Technology> Any</Technology>
      <Type>Principle</Type>
      <DirectLink>Protect Your Encryption Keys</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<h1>Description</h1>
  <p>An encryption key is a secret number used as input to the encryption and decryption processes. For encrypted data to remain secure, the key must be protected. If an attacker compromises the decryption key, your encrypted data is no longer secure.</p>
  <p>The following practices help secure your encryption keys: </p>
  <ul>
    <li>Use&amp;nbsp;platform provided&amp;nbsp;key management. </li>
    <li>Cycle your keys periodically. </li>
  </ul>
  <p>
    <strong>Use&amp;nbsp;Platform Provided&amp;nbsp;Key Management</strong>
  </p>
  <p>One of the major advantages of using platform provided key management is that the key management issue is handled by the operating system. For example, if you are using the .NET framework, you can use DPAPI to handle key management. The key that DPAPI uses is derived from the password that is associated with the process account that calls the DPAPI functions. You can use DPAPI to pass the burden of key management to the operating system.</p>
  <p>
    <strong>Cycle Your Keys Periodically</strong>
  </p>
  <p>Generally, a static secret is more likely to be discovered over time. Questions to keep in mind are: Did you write it down somewhere? Did Bob, the administrator with the secrets, change positions in your company or leave the company? Do not overuse keys.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1005596367" Content_Hash="-1259666805">
    <Metadata>
      <Id>f55158b5-1629-45a3-aa15-f7ed73c2449c</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Encrypt the Contents of Authentication Cookies</Title>
      <Category>Session Management</Category>
      <Phase>Design</Phase>
      <Technology> Any</Technology>
      <Type>Principle</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<br><h1>Description</h1><p>Encrypt the cookie contents even if you are using SSL. This prevents an attacker viewing or modifying the cookie if he manages to steal it through an XSS attack. In this event, the attacker could still use the cookie to access your application, but only while the cookie remains valid.</p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>00000000-0000-0000-0000-0000001cc05b</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Unique Tokens Are Included in HTTP Requests</Title>
      <Category>Session Management</Category>
      <Phase>Design</Phase>
      <Technology>Java</Technology>
      <Type>Checklist Item</Type>
      <DirectLink>Unique Tokens Are Included in HTTP Requests</DirectLink>
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="false" DataType="html">
      <Data><![CDATA[<h1>What to Check For</h1>
  <p>Verify that unique tokens are included in HTTP requests in hidden fields.</p>
  <h1>Why</h1>
  <p>CSRF may be possible when an attacker can form a URL, which performs an action on the behalf of an authenticated user. Forming such URLs becomes much more difficult, if unique tokens are included in HTTP requests. </p>
  <h1>How to Check</h1>
  <p>To verify that unique tokens are included in HTTP requests:</p>
  <ol>
    <li>
      <p>
        <strong>Identify sensitive operations.</strong> Review application design and code to identify all operations that require authorization.</p>
    </li>
    <li>
      <p>
        <strong>Identify code that performs sensitive operations.</strong> Identify all pages that are involved in performing sensitive operations - this includes both the pages that link to sensitive operations and the code that actually carries out the sensitive operations.</p>
    </li>
    <li>
      <p>
        <strong>Examine code that performs sensitive operations.</strong> Review each page that allows calling sensitive operations to make sure that it sends a unique token with the request in a hidden field. Review each page that performs sensitive information to make sure that it validates the unique token.</p>
    </li>
  </ol>
  <h1>How to Fix</h1>
  <p>To include unique tokens in HTTP requests:</p>
  <ol>
    <li>
      <p>
        <strong>Identify sensitive operations.</strong> Review application design and code to identify all operations that require authorization.</p>
    </li>
    <li>
      <p>
        <strong>Identify code that performs sensitive operations.</strong> Identify all pages that are involved in performing sensitive operations - this includes both the pages that link to sensitive operations and the code that actually carries out the sensitive operations.</p>
    </li>
    <li>
      <p>
        <strong>Choose a method for generating unique tokens.</strong> There are different ways to generate unique tokens. One approach is to generate random tokens for each request. Another approach is to use <em>javax.faces.ViewState</em>. A third approach is to use an API designed specifically for mitigating CSRF, such as ESAPI. Do not use session IDs as anti-CSRF tokens.</p>
    </li>
    <li>
      <p>
        <strong>Add unique tokens to HTTP requests.</strong> Add code that uses the chosen method of generating unique tokens. Add code that adds the generated unique tokens to the pages that link to sensitive operations in hidden fields.</p>
    </li>
    <li>
      <p>
        <strong>Add token validation code.</strong> Add code to the pages that carry out sensitive operations that validates the unique tokens to make sure that they have been generated on the server-side.</p>
    </li>
  </ol>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information about preveting Cross-Site Request Forgery vulnerabilities, please see <a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet">https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet</a></li>
    <li>For more information about OWASP CSRFGuard, please see <a href="https://www.owasp.org/index.php/Category:OWASP_CSRFGuard_Project">https://www.owasp.org/index.php/Category:OWASP_CSRFGuard_Project</a></li>
  </ul>
  <ul>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>00000000-0000-0000-0000-0000008d7241</Id>
      <Library_Id>4738d445-bc9b-456c-8b35-a35057596c16</Library_Id>
      <Title>Include Unique Tokens in HTTP Requests</Title>
      <Category>Session Management</Category>
      <Phase>Design</Phase>
      <Technology>Java</Technology>
      <Type>Guideline</Type>
      <DirectLink>Include Unique Tokens in HTTP Requests</DirectLink>
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="false" DataType="html">
      <Data><![CDATA[<h1>What to Do</h1>
  <p>Include unique tokens in HTTP requests when performing sensitive operations to prevent Cross-Site Request Forgery (CSRF).</p>
  <h1>Why</h1>
  <p>CSRF may be possible when an attacker can form a URL, which performs an action on the behalf of an authenticated user. Forming such URLs becomes much more difficult, if unique tokens are included in HTTP requests. </p>
  <h1>How</h1>
  <p>To include unique tokens in HTTP requests:</p>
  <ol>
    <li>
      <p>
        <strong>Identify sensitive operations.</strong> Review application design and code to identify all operations that require authorization.</p>
    </li>
    <li>
      <p>
        <strong>Identify code that performs sensitive operations.</strong> Identify all pages that are involved in performing sensitive operations - this includes both the pages that link to sensitive operations and the code that actually carries out the sensitive operations.</p>
    </li>
    <li>
      <p>
        <strong>Choose a method for generating unique tokens. </strong>There are different ways to generate unique tokens. One approach is to generate random tokens for each request. Another approach is to use <em>javax.faces.ViewState</em>. A third approach is to use an API designed specifically for mitigating CSRF, such as ESAPI. Do not use session IDs as anti-CSRF tokens.</p>
    </li>
    <li>
      <p>
        <strong>Add unique tokens to HTTP requests.</strong> Add code that uses the chosen method of generating unique tokens. Add code that adds the generated unique tokens to the pages that link to sensitive operations in hidden fields.</p>
    </li>
    <li>
      <p>
        <strong>Add token validation code.</strong> Add code to the pages that carry out sensitive operations that validates the unique tokens to make sure that they have been generated on the server-side.</p>
    </li>
  </ol>
  <h1>Additional Resources</h1>
  <ul>
    <li>For more information about preveting Cross-Site Request Forgery vulnerabilities, please see <a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet">https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet</a></li>
    <li>For more information about OWASP CSRFGuard, please see <a href="https://www.owasp.org/index.php/Category:OWASP_CSRFGuard_Project">https://www.owasp.org/index.php/Category:OWASP_CSRFGuard_Project</a></li>
  </ul>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1850612607" Content_Hash="2076832792">
    <Metadata>
      <Id>00000000-0000-0000-0000-00000001f6f7</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Editing Articles</Title>
      <Category>Editing</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink>Editing Articles</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
Editing content in TeamMentor is done via the "Edit Mode" which is&amp;nbsp;<span style="font-size:10pt">available to Editors and Administrators.&amp;nbsp;</span></div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
    <span style="font-size:10pt">
      <br />
    </span>
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; line-height:normal">
    <span style="font-size:10pt">
      <b>Open Edit Mode</b>
    </span>
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; line-height:normal">
    <span style="font-size:10pt">
      <b>
        <br />
      </b>
    </span>
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
    <span style="font-size:10pt">There are two ways to &amp;nbsp;access the TeamMentor "Edit Mode":</span>
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
    <span style="font-size:10pt">
      <br />
    </span>
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
    <span style="font-size:10pt">1) click the "Edit Mode" link in the top right of the main user interface:</span>
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
    <span style="font-size:10pt">
      <br />
    </span>
  </div>
  <div>
    <blockquote style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:40px; border-top-style:none; border-right-style:none; border-bottom-style:none; border-left-style:none; border-width:initial; border-color:initial; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px">
      <div>
        <img src="/Image/Edit%20link%20(top%20right).jpg" style="" />
        <br />
        <br />
      </div>
    </blockquote>
    <font size="2" face="Arial, Verdana">2) left-click on the library tree to open up the context menu, and choose the option 'Open Edit Mode':</font>
  </div>
  <div>
    <font size="2" face="Arial, Verdana">
      <br />
    </font>
    <blockquote style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:40px; border-top-style:none; border-right-style:none; border-bottom-style:none; border-left-style:none; border-width:initial; border-color:initial; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px">
      <div>
        <img src="/Image/Edit%20mode%20-%20context%20menu%20item.jpg" />
      </div>
      <div>
        <br />
      </div>
    </blockquote>
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
Once the "Edit Mode" is loaded, a number of buttons should be visible on the Guidance Item's Table (for example: 'Select All', 'Deselect All', 'Delete Guidance Items from Library'):
</div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
    <blockquote style="margin:0 0 0 40px; border:none; padding:0px">
      <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
        <img src="/Image/Edit%20Mode%20Buttons.jpg" />
      </div>
    </blockquote>
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
    <br />
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
    <br />
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; line-height:normal">
    <b>Editing an Article (via 'Edit Mode')</b>
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; line-height:normal">
    <b>
      <br />
    </b>
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
Double-clicking on articles in the list while in "Edit Mode" opens articles for editing in a pop-up window. The editing is done via a built-in WYSISWYG html editor.</div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
    <br />
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
The article list pane works the same way in "Edit Mode" as in regular mode - folders and views can be navigated via the navigation pane on the left; filters and search strings can be used to narrow down the list in the content list pane. The major difference
 is that double-clicking an article opens it for editing, rather than for viewing.</div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
    <br />
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
    <blockquote style="margin:0 0 0 40px; border:none; padding:0px">
      <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
        <img src="/Image/GuidanceItem%20Editor%20-%20In%20browser.jpg" />
      </div>
    </blockquote>
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
    <br />
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
    <br />
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
    <b>Editing an Article (outside 'Edit Mode')</b>
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; line-height:normal">
    <br />
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; line-height:normal">
When not in "Edit Mode", the Article editor can also be accessed via the 'Edit Guidance Item' link:</div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; line-height:normal">
    <br />
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; line-height:normal">
    <blockquote style="margin:0 0 0 40px; border:none; padding:0px">
      <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; line-height:normal">
        <img src="/Image/Link%20to%20Guidance%20Items%20Editor.jpg" />
      </div>
    </blockquote>
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; line-height:normal">
    <br />
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; line-height:normal">
Which when clicked will open the Html Editor in the same pop-up window:</div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; line-height:normal">
    <br />
  </div>
  <blockquote style="margin:0 0 0 40px; border:none; padding:0px">
    <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; line-height:normal">
      <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; line-height:normal">
        <img src="/Image/GuidanceItem%20Editor%20-%20popup%20window.jpg" />
      </div>
      <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; line-height:normal">
        <br />
      </div>
    </div>
  </blockquote>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; line-height:normal">
    <b>
      <br />
    </b>
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; line-height:normal">
    <b>Guidance Item article Metadata</b>
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
    <br />
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
Each article has the following meta-data:&amp;nbsp;</div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; line-height:normal">
    <ul>
      <li>
        <span style="font-size:10pt">
          <b>Title</b>:&amp;nbsp;</span> The title is the title that is displayed in the article list</li>
      <li>
        <span style="font-size:10pt">
          <b>Technology</b> tag:&amp;nbsp;</span> The technology tag reflects what technology the article applies to</li>
      <li>
        <span style="font-size:10pt">
          <b>Phase</b> tag:&amp;nbsp;</span> The phase tag signifies which phase of the software development life-cycle the article is relevant to</li>
      <li>
        <span style="font-size:10pt">
          <b>Type </b>tag:&amp;nbsp;</span> The type tag describes the type of the article</li>
      <li>
        <span style="font-size:10pt">
          <b>Category </b>tag:&amp;nbsp;</span> The category tag describes what kind of security control the article is about</li>
    </ul>
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
    <span style="font-size:10pt">The values of these fields creates the filters and a drop-down list items in the article editor.</span>
  </div>
  <div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
  </div>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1303187446" Content_Hash="623343503">
    <Metadata>
      <Id>00000000-0000-0000-0000-000000067e51</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Navigation Pane</Title>
      <Category>User Interface</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[The navigation pane gives an overview of content organized into libraries, folders, and views.&nbsp;This tree can be navigated in a manner similar to files and folders, which are familiar to most people.&nbsp;
<div><br>
</div>
<div>Browsing TeamMentor content via the navigation pane is similar to exploring files and folders, but there are some differences. All the articles are located in the library, rather than in the folders or views. Views are references to sub-sets of these files,
 like playlists in music players. Folders are a way to organize the views. An article may appear in multiple views and folders, but there is still only one copy of the article - the views and folders display references to it.</div>
<div><br>
</div>
<div>On top of the Navigation Pane is the &quot;Applied Filters&quot; control. This control shows the list of the current applied filters. These filters can be all removed at once by clicking the &quot;X&quot; icon next to the &quot;Applied Filters&quot; label. Each individual applied filter
 can be removed by clicking the &quot;X&quot; icon next to it.</div>
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="857244819" Content_Hash="-776895914">
    <Metadata>
      <Id>00000000-0000-0000-0000-0000000693a7</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Using the Control Panel</Title>
      <Category>User Interface</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[
<div>Administrators can manage TeamMentor users and perform various administrative operations via the Control Panel. The Control Panel can be accessed via the &quot;Control Panel&quot; link in the top right corner of the main user interface. The TeamMentor Control Panel
 is only available to Administrator users. The Control Panel has user management and back-end operations sections.</div>
<div><br>
</div>
<div>The user management section consists of the following links: &quot;My Account&quot;, &quot;Manage Users&quot;, and &quot;Create Multiple Users&quot;. The &quot;My Account&quot; link opens a window that allows changing the properties of the current user account. The &quot;Manage Users&quot; link opens
 a page that allows managing all the users of the application. The &quot;Create Multiple Users&quot; link opens a page that allows creating multiple user accounts.</div>
<div><br>
</div>
<div>The back-end operations section consists of the following links: &quot;Admin Tasks&quot; and &quot;TeamMentor Web Services&quot;. The &quot;Admin Tasks&quot; link opens a page that allows performing various administrative operations. The &quot;TeamMentor Web Services&quot; link opens a page
 that allows interacting with the web services back-end of TeamMentor directly.&nbsp;</div>
<div><br>
</div>
<div>The following administrative operations are available via the &quot;Admin Tasks&quot; page:&nbsp;</div>
<div>
<ul>
<li>Get time - this command gets the current server time.</li><li>View the configuration file - this command displays the contents of the configuration file.</li><li>Get library path - this command displays the location of the library files.</li><li>Set library path - this command allows setting the location of the library files during run-time. This command should not be used, rather the TMConfig.config file should be edited to set the location of the libraries.</li><li>Get library zips path - this command shows the location of the zip files, which contain the library files. TeamMentor is capable of unpacking zip files and loading libraries from them. However, it is recommended to unzip library files manually and set their
 location via the TMConfig.config file.</li><li>Set library zips path - this command allows setting the location of the zip files, which contain the library files, during run-time. TeamMentor is capable of unpacking zip files and loading libraries from them. However, it is recommended to unzip library
 files manually and set their location via the TMConfig.config file.</li><li>Get libraries - this command lists the currently available libraries.</li><li>Reload server cache - this command reloads the server cache, it is useful to make sure that changes to the libraries show up after doing things like changing library paths or installing new libraries.</li></ul>
</div>
<div><br>
</div>
<div>The web services exposed via the &quot;TeamMentor Web Services&quot; page should not be used during regular operation, but are provided to make modification of TeamMentor code simpler, if that is neccesary. There are far too many functions available via the &quot;TeamMentor
 Web Services&quot; page to list here.</div>
<div><br>
</div>
<div>The TeamMentor Control Panel provides controls for managing users and performing administrative tasks. In addition to the Control Panel, some settings can be changed via the TMConfig.config file in the &quot;Web Application&quot; directory.</div>
<div><br>
</div>
<div></div>
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1189242070" Content_Hash="1935070537">
    <Metadata>
      <Id>00000000-0000-0000-0000-0000000724b8</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Installing TeamMentor on IIS 6.0</Title>
      <Category>Administration</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[
<div><span style="font-family:Arial,Verdana; font-size:small">If you want to use the application locally only, use Cassini. If you want to expose the application
</span><span style="font-family:Arial,Verdana; font-size:small">on a web server to your team, use IIS.&nbsp;</span></div>
<div><span style="font-family:Arial,Verdana; font-size:small"><br>
</span></div>
<div><span style="font-family:Arial,Verdana; font-size:small">To install TeamMentor on IIS 6:</span></div>
<div><span style="font-family:Arial,Verdana; font-size:small"><br>
</span></div>
<div>
<ol>
<li><font face="Arial, Verdana" size="2">Copy TeamMentor files to local folder</font>
<ul>
<li><span style="font-family:Arial,Verdana; font-size:small"><b>Download&nbsp;the .zip</b> file of TeamMentor and extract it</span></li><li><span style="font-family:Arial,Verdana; font-size:small">You can also do a <b>
Git Clone</b> of the desired version of TeamMentor from GitHub</span></li></ul>
</li><li><span style="font-family:Arial,Verdana; font-size:small"><b>The&nbsp;</b></span><span style="font-family:Arial,Verdana; font-size:small"><b>TeamMentor root folder</b> should contain the following folders:</span>
<ul>
<li><span style="font-family:Arial,Verdana; font-size:small">Library_Data - this folder contains the library files.</span></li><li><span style="font-family:Arial,Verdana; font-size:small">Web Application - this folder contains the application files.</span></li></ul>
</li><li><span style="font-family:Arial,Verdana; font-size:small"><b>Add TeamMentor to IIS 6.0.</b> Open the &quot;Internet Information Services (IIS) Manager&quot;.&nbsp;</span>
<ul>
<li><span style="font-family:Arial,Verdana; font-size:small">Navigate to &quot;Web Sites&quot; in the tree on the left of the &quot;Internet Information Services (IIS) &nbsp;</span><span style="font-family:Arial,Verdana; font-size:small">Manager&quot; window.&nbsp;</span></li><li><span style="font-family:Arial,Verdana; font-size:small">Right-click on &quot;Web Sites&quot; and select &quot;New&quot; -&gt; &quot;Web Site...”&nbsp;</span></li><li><span style="font-family:Arial,Verdana; font-size:small">A&nbsp;</span><span style="font-family:Arial,Verdana; font-size:small">&quot;Web Site Creation Wizard&quot; should appear.&nbsp;</span></li><li><span style="font-family:Arial,Verdana; font-size:small">Click &quot;Next&quot;.&nbsp;</span></li><li><span style="font-family:Arial,Verdana; font-size:small">Enter a description for the web&nbsp;</span><span style="font-family:Arial,Verdana; font-size:small">site, something like &quot;TeamMentor 3&quot;.&nbsp;</span></li><li><span style="font-family:Arial,Verdana; font-size:small">Click &quot;Next&quot;.&nbsp;</span></li><li><span style="font-family:Arial,Verdana; font-size:small">Change the port setting, if necessary.&nbsp;</span></li><li><span style="font-family:Arial,Verdana; font-size:small">Click &quot;Next&quot;.&nbsp;</span></li><li><span style="font-family:Arial,Verdana; font-size:small">Click &quot;Browse...”&nbsp;</span></li><li><span style="font-family:Arial,Verdana; font-size:small">Select to the &quot;Web Applications\TM_Website&quot; folder&nbsp;</span><span style="font-family:Arial,Verdana; font-size:small">inside the TeamMentor root folder&nbsp;</span></li><li><span style="font-family:Arial,Verdana; font-size:small">Click &quot;Next&quot;.&nbsp;</span></li><li><span style="font-family:Arial,Verdana; font-size:small">Check&nbsp;</span><span style="font-family:Arial,Verdana; font-size:small">the checkbox next to &quot;Run scripts (such as ASP)&quot;.&nbsp;</span></li><li><span style="font-family:Arial,Verdana; font-size:small">Click &quot;Next&quot;.&nbsp;</span></li><li><span style="font-family:Arial,Verdana; font-size:small">Click &quot;Finish&quot;. <br>
<br>
A new&nbsp;</span><span style="font-family:Arial,Verdana; font-size:small">web site should appear in the tree structure on the left of the &quot;Internet Information&nbsp;</span><span style="font-family:Arial,Verdana; font-size:small">Services (IIS) Manager&quot; window.&nbsp;<br>
<br>
</span></li><li><span style="font-family:Arial,Verdana; font-size:small">Right-click on this new web site.&nbsp;</span></li><li><span style="font-family:Arial,Verdana; font-size:small">Select &quot;Properties&quot;. A&nbsp;</span><span style="font-family:Arial,Verdana; font-size:small">&quot;Properties&quot; window should appear.&nbsp;</span></li><li><span style="font-family:Arial,Verdana; font-size:small">Go to the &quot;ASP.NET&quot; tab in the &quot;Properties&quot;&nbsp;</span><span style="font-family:Arial,Verdana; font-size:small">window.&nbsp;</span></li><li><span style="font-family:Arial,Verdana; font-size:small">Set the .NET version to 2.0. Click &quot;OK&quot;.
<br>
<br>
TeamMentor 3 should now be&nbsp;</span><span style="font-family:Arial,Verdana; font-size:small">operational.<br>
<br>
</span></li></ul>
</li><li><span style="font-family:Arial,Verdana; font-size:small"><b>If content or user changes are desired,</b> the account used by IIS needs to have write privileges to the TeamMentor Root folder<br>
<br>
</span>
<ul>
<li><span style="font-family:Arial,Verdana; font-size:small"><b>Identify the application account.</b> which is the Windows user account used by the&nbsp;</span><span style="font-family:Arial,Verdana; font-size:small">IIS Application Pool configured on the TeamMentor
 website.</span>
<ul>
<li><span style="font-family:Arial,Verdana; font-size:small">On the &quot;Internet&nbsp;</span><span style="font-family:Arial,Verdana; font-size:small">Information Services (IIS) Manager&quot;.&nbsp;</span></li><li><span style="font-family:Arial,Verdana; font-size:small">Navigate to &quot;Application Pools&quot; in the tree on the&nbsp;</span><span style="font-family:Arial,Verdana; font-size:small">left.&nbsp;</span></li><li><span style="font-family:Arial,Verdana; font-size:small">Right-click on the &quot;Default App Pool&quot; and select &quot;Properties&quot;. A &quot;Properties&quot;&nbsp;</span><span style="font-family:Arial,Verdana; font-size:small">window should appear.&nbsp;</span></li><li><span style="font-family:Arial,Verdana; font-size:small">Go to the &quot;Identity&quot; tab in the &quot;Properties&quot; window. Take note of&nbsp;</span><span style="font-family:Arial,Verdana; font-size:small">the selected user-name. By default, it is &quot;Network Service&quot;.</span></li></ul>
</li><li><span style="font-family:Arial,Verdana; font-size:small"><b>Adjust the file-system permissions</b>. Give write permissions for the TeamMentor folder&nbsp;</span><span style="font-family:Arial,Verdana; font-size:small">to the Windows user account that is used
 to run TeamMentor. This is the username that&nbsp;</span><span style="font-family:Arial,Verdana; font-size:small">has been discovered in the previous step.&nbsp;</span>
<ul>
<li><span style="font-family:Arial,Verdana; font-size:small">Right click on the TeamMentor root folder</span></li><li><span style="font-family:Arial,Verdana; font-size:small">Select &quot;Properties&quot;. A &quot;Properties&quot; window&nbsp;</span><span style="font-family:Arial,Verdana; font-size:small">should appear.&nbsp;</span></li><li><span style="font-family:Arial,Verdana; font-size:small">Select the &quot;Security&quot; tab in the &quot;Properties&quot; window. Give &quot;Full Access&quot;&nbsp;</span><span style="font-family:Arial,Verdana; font-size:small">permissions to the Windows account that is used to run TeamMentor.&nbsp;</span></li><li><span style="font-family:Arial,Verdana; font-size:small">Click &quot;OK&quot;</span></li></ul>
</li></ul>
</li></ol>
</div>
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-531678571" Content_Hash="610153971">
    <Metadata>
      <Id>00000000-0000-0000-0000-00000008578b</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Signing Up for Regular Accounts</Title>
      <Category>User Interface</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[Users can create new TeamMentor accounts via the &quot;Sign Up&quot; window. The TeamMentor &quot;Sign Up&quot; window can be accessed via the &quot;Sign Up&quot; link in the top right corner of the main user interface. The window has input fields for the username, the password, the
 e-mail address, the first name, and the last name; the first three are mandatory to create an account. Clicking the &quot;Sign Up&quot; button submits the entered information. If the submitted information is valid, a new account is created and can be used to access
 the application.&nbsp;<br>
<div></div>
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-36913794" Content_Hash="912128074">
    <Metadata>
      <Id>00000000-0000-0000-0000-0000000c24d5</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Article List Pane</Title>
      <Category>User Interface</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[The article list pane displays the list of articles in the current library/folder/view in the navigation pane. The list of articles is filtered using the currently selected filters in the filters pane. The article list is the main control of the application.
 Selecting an article in the list updates the preview pane with the contents of the selected article. Double-clicking on an article opens it in a new window.]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1640453526" Content_Hash="-1154277700">
    <Metadata>
      <Id>00000000-0000-0000-0000-00000017c916</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Install TeamMentor from a GitHub Repository</Title>
      <Category>Version Control</Category>
      <Phase>Draft</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; line-height:normal; font-weight:normal; font-size:10pt">
<span style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; font-size:small">This article will explain how to install TeamTeamor in a local computer from an GitHub Repository, in this case the TeamMentor
 Evaluation version which contains the full TeamMentor Engine and an OWASP Top 10 Library&nbsp;</span>(<a href="https://github.com/TeamMentor-OWASP/Master">https://github.com/TeamMentor-OWASP/Master</a>&nbsp;)</div>
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; line-height:normal; font-weight:normal; font-size:10pt">
<br>
</div>
<div style="font-weight:normal; font-size:10pt; font-family:Arial,Verdana; font-style:normal; font-variant:normal; line-height:normal">
<font size="2"><b>Mode 1) Install from ZIP archive</b></font></div>
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; font-size:10pt">
<font face="Arial, Verdana" size="2"><br>
</font></div>
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; font-size:10pt">
<font face="Arial, Verdana" size="2">1) In the target machine windows 2003, IIS and TortoiseSVN installed</font></div>
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; font-size:10pt">
<font face="Arial, Verdana" size="2"><br>
</font></div>
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; font-size:10pt">
<font face="Arial, Verdana" size="2">2) create a folder to hold your GitHub Clones. In this example we are going to use: C:\TeamMentor_From_GitHub</font></div>
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; font-size:10pt">
<font face="Arial, Verdana" size="2"><br>
</font></div>
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; font-size:10pt">
<font face="Arial, Verdana" size="2">3) In the C:\TeamMentor_From_GitHub folder right-click inside it, and chose from the Context Menu the option 'Git Clone'</font></div>
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; font-size:10pt">
<font face="Arial, Verdana" size="2"><br>
</font></div>
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; font-size:10pt">
<font face="Arial, Verdana" size="2">4) in a browser open the page: https://github.com/TeamMentor/TeamMentor-Documentation, click on the 'Git Read-only'button and copy the url to its right (in this case git://github.com/TeamMentor/TeamMentor-Documentation.git).
 If you want to make commits from this version, you will need to use either th Http or SSH urls (and use an account with push privileges to this repository)</font></div>
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; font-size:10pt">
<font face="Arial, Verdana" size="2"><br>
</font></div>
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; font-size:10pt">
<font face="Arial, Verdana" size="2">5) back in the Git Clone Gui, put the Git url in the 'Url' TextBox (git://github.com/TeamMentor/TeamMentor-Documentation.git) and set the 'Directory' TextBox to 'C:\TeamMentor_From_GitHub\TeamMentor-Documentation). Click
 OK</font></div>
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; font-size:10pt">
<font face="Arial, Verdana" size="2"><br>
</font></div>
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; font-size:10pt">
<font face="Arial, Verdana" size="2">6) the 'C:\TeamMentor_From_GitHub\TeamMentor-Documentation' should now be populated with a number of files and folders</font></div>
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; font-size:10pt">
<font face="Arial, Verdana" size="2"><br>
</font></div>
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; font-size:10pt">
<font face="Arial, Verdana" size="2">7) if you just want to run the TeamMentor locally:</font></div>
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; font-size:10pt">
<font face="Arial, Verdana" size="2"><br>
</font></div>
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; font-size:10pt">
<b style="font-size:small">Mode 2) Install as Git repository</b></div>
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; line-height:normal">
<font size="2"><b><br>
</b></font></div>
<div style="font-weight:normal; font-size:10pt; font-family:Arial,Verdana; font-style:normal; font-variant:normal; line-height:normal">
<div></div>
</div>
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1350149324" Content_Hash="323197783">
    <Metadata>
      <Id>00000000-0000-0000-0000-00000018204d</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Using the Search Function</Title>
      <Category>Reading</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink>Using the Search Function</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<div style="font-size:10pt">The search function allows the user to find articles based on whether their titles or contents include a certain text string. The Search bar is located in the filter pane and acts as a filter based on the article title and article
 content. The applied search string shows up as a filter on top of the navigation pane, like the other filters. The search is applied to the list of articles displayed in the article list pane in the bottom center of the main user interface based on the currently
 selected library, folder, or view in the navigation pane on the left. Search string persists when different folder, view or library is selected and will automatically be applied to the newly selected article list.<br /><br /></div>
  <div style="font-size:10pt">Entering multiple words will search for the specific string that is entered. The search function currently does not support Boolean operations or regular expressions.<br /><br /><h1>Special Search Options</h1><p>By default, Team Mentor will search for text through all content of the articles displayed in the article list pane. However the following parameters will modify this behavior.</p><div><i>all: &lt;search string&gt;</i> - Will search through all content of all installed libraries.</div><div><i>title:&lt;search string&gt;</i> - Will search only in the titles of articles currently displayed in the article list pane.</div><p>Note: These modifiers cannot be used simultaneously.<br /></p></div>
  <div style="font-size:10pt">
  </div>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-93656796" Content_Hash="-1468932271">
    <Metadata>
      <Id>00000000-0000-0000-0000-0000001a9296</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Using the Filters</Title>
      <Category>Reading</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink>Using the Filters</DirectLink>
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<div style="font-size:10pt">Filters allow narrowing down the presented article list to help find the most relevant articles in the currently selected library, folder, or view in the navigation pane. The filters are located in the filters pane in the center
 of the main user interface. The currently active filters are displayed on top of the navigation pane on the left. The currently active filters may be cleared by clicking the respective "X" icons. Selecting filters narrows down the list of available articles
 and therefore the list of available filters. Filters that are no longer available are greyed out.</div>
  <div style="font-size:10pt">
    <br />
  </div>
  <div style="font-size:10pt">The following filters are available:</div>
  <div style="font-size:10pt">
    <ul>
      <li>The "Technology" filter - the technology filter allows the user to display only the articles that pertain to a specific technology.</li>
      <li>The "Phase" filter - the phase filter allows the user to select only the articles that apply to a specific software development life-cycle phase.</li>
      <li>The "Type" filter - the type filter allows the user to choose what types of articles to display. The most common types are "Checklists" and "Guidelines". "Guidelines" describe how to do something in general terms that should be applicable to most applications,
 but still specific enough to be implemented. A "Checklist" describes how to test if a specific security measure or control has been implemented correctly and how to implement it correctly. Checklists and guidance usually exist in pairs. Other types of articles
 include: "Attack", "Code Example", "How To", "Inspection Question", "Principle", and "Q&amp;A" - the names of these article types are self-explanatory.</li>
      <li>The "Category" filter - the category filter allows the user to filter the article list based on the type of security control that is being described.&amp;nbsp;</li>
    </ul>
  </div>
  <div style="font-size:10pt">
    <br />
  </div>
  <div style="font-size:10pt">The Search bar is located in the filter pane and acts as a filter based on the article title and article content. The applied search string shows up as a filter on top of the navigation pane, like the other filters.<br /><br /></div>
  <h1>Filtering by Library in the URL</h1>
  <p>Team Mentor provides capability to filter the library available for users to view based on the parameters passed in the URL.&amp;nbsp; This convenient feature allows narrowing down interactions with Team Mentor to a specific library. For example, when working on a Java project, the developer does not need to be distracted by articles from .NET library.&amp;nbsp; This feature works per user session. It is not a security feature and is not intended to limit access.&amp;nbsp; </p>
  <p>For example:</p>
  <p>
    <i>http://teammentor.mycompany.com/ </i>-&amp;nbsp; Opens Team Mentor&amp;nbsp; with all libraries available. <br /><i>http:// teammentor.mycompany.com/Library/Java&amp;nbsp;</i> - Opens Team Mentor only with the Java library<br /><i>http:// teammentor.mycompany.com/Library/.NET 3.5</i>&amp;nbsp; - Opens Team Mentor only with the .NET 3.5 library <br /><i>http:// teammentor.mycompany.com/Library</i> - Will re-set the filter to show ALL libraries&amp;nbsp;</p>
  <p>
    <br />
  </p>
  <h1>Pining Filters</h1>
  <p>Selected filters only apply to the article list currently selected for display in the navigation pane.&amp;nbsp; Clicking on another view, library or folder in the navigation pane will reset the filters. Sometimes this behavior&amp;nbsp; is not desirable.&amp;nbsp; Team Mentor offers the option of “pinning” the filter. </p>
  <p>&amp;nbsp;To pin the filter, first select the filter. The selected filter will show up in the “Applied Filters” section of the navigation pane.</p>
  <img height="256" src="/Image/filtering-img01.jpg" width="720" />
  <br />
  <br />
  <p>Then click the pin icon.&amp;nbsp; This will pin the filter. Now when navigating to a different folder, library or view, the selected filter will still be applied. To remove the filter, click the “X” next to the filter.&amp;nbsp; <br /></p>
  <img height="378" src="/Image/filtering-img02.jpg" width="720" />
  <br />
  <br />
  <p>Note: If there are no articles that match filter selection in a particular list of articles.&amp;nbsp;</p>
  <img height="394" src="/Image/filtering-img03.jpg" width="723" />
  <br />
  <br />
  <h1>Filtering by Meta-Data in the URL</h1>
  <p>Team Mentor also provides ability to narrow down or filter articles displayed to the user directly at URL level. This flexibility allows constructing a URL and accessing directly the type of Guidance Articles the user is looking for.&amp;nbsp; The URL will automatically construct and pin a filter, as if it was pinned by clicking on the pin icon. (as shown above)</p>
  <p>To use the feature, construct the URL to filter Team Mentor Articles. Articles can be filtered by any combination of <i>Technology</i>, Phase, Type or Category</p>
  <pre>http://localhost:12115/html_pages/Gui/TeamMentor.html#technology:[technolgy]&amp;phase:[phase]&amp;type: [type]&amp;category:[category]
</pre>
  <p>
For example, if the user is interested only in Java technology, he/she can type"
</p>
  <pre>http://127.0.0.1:12115/html_pages/Gui/TeamMentor.html#technology:Java
</pre>
  <p>In the URL window of the browser and the Java technology filter will be automatically selected. </p>
  <img height="394" src="/Image/filtering-img04.jpg" width="723" />
  <br />
  <br />
  <p>To filter by “Java” technology and look only for “Data Access” article categories construct the following link:</p>
  <pre>http://127.0.0.1:12115/html_pages/Gui/TeamMentor.html#technology:Java&amp;category:Data Access<br />&amp;nbsp;</pre>
  <img height="394" src="/Image/filtering-img05.jpg" width="723" />
  <br />
  <br />
  <p>Or to look only for Guidelines use: :</p>
  <pre>http://127.0.0.1:12115/html_pages/Gui/TeamMentor.html#type:Guideline<br />&amp;nbsp;</pre>
  <img height="394" src="/Image/filtering-img06.jpg" width="723" />]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1126743425" Content_Hash="-1131677681">
    <Metadata>
      <Id>00000000-0000-0000-0000-0000001c8add</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Managing Users</Title>
      <Category>Administration</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[
<div>Administrators can manage TeamMentor users via the Control Panel. The Control Panel can be accessed via the &quot;Control Panel&quot; link in the top right corner of the main user interface. The TeamMentor Control Panel is only available to Administrator users.&nbsp;</div>
<div><br>
</div>
<div>The user management section consists of the following links: &quot;My Account&quot;, &quot;Manage Users&quot;, and &quot;Create Multiple Users&quot;. The &quot;My Account&quot; link opens a window that allows changing the properties of the current user account. The &quot;Manage Users&quot; link opens
 a page that allows managing all the users of the application. The &quot;Create Multiple Users&quot; link opens a page that allows creating multiple user accounts.</div>
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>00000000-0000-0000-0000-0000001ecaec</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Changing Layout and Collaborating</Title>
      <Category>Editing</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink>Changing Layout and Collaborating</DirectLink>
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="false" DataType="html">
      <Data><![CDATA[<h1>Displaying a Link to a Particular View</h1>
  <p>Sometimes it is necessary to generate and send a link to a particular view. Team Mentor provides that capability for logged in users via the “Display Direct Link” feature. </p>
  <p>Navigate to a library view to be shared.</p>
  <img height="410" src="/Image/chlayout-img01.jpg" width="660" />
  <br />
  <br />
  <p>
Right click on that item to bring up the context menu and clicks on “Show Direct Link”
</p>
  <img src="/Image/chlayout-img02.jpg" />
  <br />
  <br />
  <p>The URL bar on the browser will change to indicate the link for this particular menu item.</p>
  <img src="/Image/chlayout-img03.jpg" />
  <br />
  <br />
  <p>Copy and send that URL to another user. The receiving user will open the link in their browser.</p>
  <img height="410" src="/Image/chlayout-img04.jpg" width="660" />
  <br />
  <br />
  <h1>Changing Layout</h1>
  <p>Team Mentor GUI is composed of 4 main panes. The navigator pane sows the list of available Libraries, Folders and Views.  Search and Filter pane shows the search bar and list of available metadata filters of Technology, Phase, Type and Category.   The article list pane shows the list of articles in a navigator selection.  Finally, the preview pane shows a preview of the article currently selected on the article list pane.  It is possible change the size of these panes by dragging the sides of each pane. It is also possible to close and open these panes by clicking on the dark blue ribbon on the side of each pane.  
</p>
  <img height="410" src="/Image/chlayout-img05.jpg" width="660" />
  <br />
  <br />
  <h1>Reading Layout</h1>
  <p>Sometimes it is convenient to have only the list of articles and their previews displayed.  This is called the Reading Layout.  Reading Layout is only available to logged-in users.  To access the Reading Layout:
In the Navigator pane, select the view (the list of articles) to be shown in the Reading Layout and right-click to bring up the context menu.
</p>
  <img src="/Image/chlayout-img06.jpg" />
  <p>Click on “Show Reading View” and the reading layout comes up.</p>
  <img height="410" src="/Image/chlayout-img08.jpg" width="660" />]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1136375728" Content_Hash="-1237407265">
    <Metadata>
      <Id>00000000-0000-0000-0000-00000024fdb5</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Opening an Article</Title>
      <Category>Reading</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[Articles can be opened from the article list pane. The article list pane is the main TeamMentor user interface component and is located in the bottom center by default. Browsing the navigation pane on the left and using the filters in the middle of the
 user interface changes the list that is displayed in the article list window. Once the desired article is in sight, it can be previewed by single-clicking on its title. To open the article in a new window, double-click on it in the list. Another option is
 to use the &quot;Open in New Window&quot; button to the right of the &quot;Selected Guidance Item&quot; text in the preview pane.
<br>
<br>
<div><font size="2"></font></div>
<div></div>
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>00000000-0000-0000-0000-00000025cc25</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>TeamMentor Technology</Title>
      <Category />
      <Phase />
      <Technology />
      <Type />
      <DirectLink>TeamMentor Technology</DirectLink>
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[<script>
document.location = '/xsl/Table_of_Contents';
</script>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="847660970" Content_Hash="-1130060843">
    <Metadata>
      <Id>00000000-0000-0000-0000-00000028dbbc</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Consuming TeamMentor Dat</Title>
      <Category>Customization</Category>
      <Phase>Draft</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[TeamMentor was designed from the ground up to facilitate the easy access and manipulation of its data.
<div><br>
</div>
<p style="margin-top:0px; margin-right:0px; margin-bottom:9px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; background-color:rgb(255,255,255)">
There are number of ways do it by:</p>
<ul style="margin-top:0px; margin-right:0px; margin-bottom:18px; margin-left:25px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; list-style-position:initial; background-color:rgb(255,255,255)">
<li style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial">
Accessing the Webservices directly</li><li style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial">
Using the webapp Control Panel WebServices GUI</li><li style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial">
Using the webapp Javascript API (which wraps the WebServices)</li><li style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial">
Directly consuming the server side DLLs (using or nor the WebServices methods)</li><li style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial">
Directly manipulating the XML files (either at the master XML Git repository or at a local install/fork/clone)</li><li style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial">
Using the O2 Platform and its multiple TeamMentor data manipulation and viewing GUIs</li></ul>
<h3 style="font-style:normal; font-variant:normal; font-weight:normal; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; font-size:18px; line-height:36px; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; color:rgb(64,64,64); background-color:rgb(255,255,255)">
Accessing the Webservices directly</h3>
<p style="font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; margin-top:0px; margin-right:0px; margin-bottom:9px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:18px; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; color:rgb(64,64,64); background-color:rgb(255,255,255)">
Although all data traffic goes though the WebServices layer, there is currenlty only one .NET WebService *.asmx file. This makes it easy to consume and centralizes all exposed methods in one location.</p>
<p style="font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; margin-top:0px; margin-right:0px; margin-bottom:9px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:18px; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; color:rgb(64,64,64); background-color:rgb(255,255,255)">
This file can be found at the&nbsp; /aspx_pages/TM_WebServices.asmx .For example on the current test servers you will find it at:</p>
<ul style="font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; margin-top:0px; margin-right:0px; margin-bottom:18px; margin-left:25px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:1; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; list-style-position:initial; color:rgb(64,64,64); background-color:rgb(255,255,255)">
<li style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:18px; font-family:inherit; color:rgb(128,128,128)">
<a href="http://50.18.82.146:8081/aspx_pages/TM_WebServices.asmx" style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:inherit; font-family:inherit; color:rgb(0,105,214); text-decoration:none">http://50.18.82.146:8081/aspx_pages/TM_WebServices.asmx</a>&nbsp;
 (OWASP Library)</li><li style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:18px; font-family:inherit; color:rgb(128,128,128)">
<a href="http://50.18.82.146:8082/aspx_pages/TM_WebServices.asmx" style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:inherit; font-family:inherit; color:rgb(0,105,214); text-decoration:none">http://50.18.82.146:8082/aspx_pages/TM_WebServices.asmx</a>&nbsp;
 (SI Library)</li></ul>
<p style="font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; margin-top:0px; margin-right:0px; margin-bottom:9px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:18px; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; color:rgb(64,64,64); background-color:rgb(255,255,255)">
To get the WSDL from this webservice just append ?wsdl to the url (i.e. /aspx_pages/TM_WebServices.asmx?wsdl)</p>
<h3 style="font-style:normal; font-variant:normal; font-weight:normal; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; font-size:18px; line-height:36px; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; color:rgb(64,64,64); background-color:rgb(255,255,255)">
Using the webapp Control Panel WebServices GUI</h3>
<p style="font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; margin-top:0px; margin-right:0px; margin-bottom:9px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:18px; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; color:rgb(64,64,64); background-color:rgb(255,255,255)">
...todo...</p>
<h3 style="font-style:normal; font-variant:normal; font-weight:normal; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; font-size:18px; line-height:36px; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; color:rgb(64,64,64); background-color:rgb(255,255,255)">
Using the webapp Javascript API</h3>
<p style="font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; margin-top:0px; margin-right:0px; margin-bottom:9px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:18px; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; color:rgb(64,64,64); background-color:rgb(255,255,255)">
<em style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:inherit; font-family:inherit">(which
 wraps the WebServices)</em></p>
<p style="font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; margin-top:0px; margin-right:0px; margin-bottom:9px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:18px; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; color:rgb(64,64,64); background-color:rgb(255,255,255)">
<em style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:inherit; font-family:inherit">...todo...</em></p>
<h3 style="font-style:normal; font-variant:normal; font-weight:normal; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; font-size:18px; line-height:36px; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; color:rgb(64,64,64); background-color:rgb(255,255,255)">
Directly consuming the server side .Net DLLs</h3>
<p style="font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; margin-top:0px; margin-right:0px; margin-bottom:9px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:18px; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; color:rgb(64,64,64); background-color:rgb(255,255,255)">
</p>
<p style="font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; margin-top:0px; margin-right:0px; margin-bottom:9px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:18px; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; color:rgb(64,64,64); background-color:rgb(255,255,255)">
<em style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:inherit; font-family:inherit">...todo...</em></p>
<h3 style="font-style:normal; font-variant:normal; font-weight:normal; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; font-size:18px; line-height:36px; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; color:rgb(64,64,64); background-color:rgb(255,255,255)">
Directly manipulating the XML files</h3>
<p style="font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; margin-top:0px; margin-right:0px; margin-bottom:9px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:18px; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; color:rgb(64,64,64); background-color:rgb(255,255,255)">
<em style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:inherit; font-family:inherit">(either
 at the master XML Git repository or at a local install/fork/clone)</em></p>
<p style="font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; margin-top:0px; margin-right:0px; margin-bottom:9px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:18px; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; color:rgb(64,64,64); background-color:rgb(255,255,255)">
<em style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:inherit; font-family:inherit">...todo...</em></p>
<h3 style="font-style:normal; font-variant:normal; font-weight:normal; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; font-size:18px; line-height:36px; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; color:rgb(64,64,64); background-color:rgb(255,255,255)">
Using the O2 Platform</h3>
<p style="font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; margin-top:0px; margin-right:0px; margin-bottom:9px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:18px; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; color:rgb(64,64,64); background-color:rgb(255,255,255)">
<em style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:inherit; font-family:inherit">...and
 its multiple TeamMentor data manipulation and viewing GUIs<br>
<br>
...todo...</em></p>
<h2 style="font-style:normal; font-variant:normal; font-weight:normal; margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; font-size:24px; line-height:36px; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; color:rgb(64,64,64); background-color:rgb(255,255,255)">
TeamMentor Architecture</h2>
<p style="font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; margin-top:0px; margin-right:0px; margin-bottom:9px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:18px; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; color:rgb(64,64,64); background-color:rgb(255,255,255)">
There are 3 key layers of TeamMentor</p>
<ul style="font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; margin-top:0px; margin-right:0px; margin-bottom:18px; margin-left:25px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:1; font-family:'Helvetica Neue',Helvetica,Arial,sans-serif; list-style-position:initial; color:rgb(64,64,64); background-color:rgb(255,255,255)">
<li style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:18px; font-family:inherit; color:rgb(128,128,128)">
The Xml Files</li><li style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:18px; font-family:inherit; color:rgb(128,128,128)">
The WebService layer</li><li style="margin-top:0px; margin-right:0px; margin-bottom:0px; margin-left:0px; padding-top:0px; padding-right:0px; padding-bottom:0px; padding-left:0px; border-top-width:0px; border-right-width:0px; border-bottom-width:0px; border-left-width:0px; border-style:initial; border-color:initial; line-height:18px; font-family:inherit; color:rgb(128,128,128)">
The Javascript driven GUI</li></ul>
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>00000000-0000-0000-0000-0000002b8175</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Team Mentor Wiki Markup</Title>
      <Category>Editing</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink>Team Mentor Wiki Markup</DirectLink>
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="false" DataType="html">
      <Data><![CDATA[<p>Team Mentor supports WikiCreole as its markup language for editing WikiText type articles. WikiCreole was developed by taking multiple wiki markup languages and choosing the best of the breed. &amp;nbsp;By using this easy to understand language, Team Mentor allows wider audiences, including users that don’t have explicit TeamMentor training, to contribute their knowledge.&amp;nbsp;</p>
  <p>
    <img src="/Image/tmwikimarkup-img01.jpg" />
  </p>
  <h1>Related Items&amp;nbsp;</h1>
  <div>
    <div>For more in-depth information on WikiCreole language see:</div>
    <div>
      <a href="http://wikicreole.org/wiki/Creole1.0">http://wikicreole.org/wiki/Creole1.0</a>
    </div>
  </div>
  <div>
    <br />
  </div>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>00000000-0000-0000-0000-0000002ccdf6</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Release Notes</Title>
      <Category>Administration</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink>Release Notes</DirectLink>
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="false" DataType="html">
      <Data><![CDATA[<h2>
    <span style="font-size: 10pt; ">3.1 RELEASE</span>
  </h2>
  <p style="font-size: 10pt; ">
    <span style="font-size: 10pt; ">The TeamMentor 3.1 release includes both new content and new application code. Major stability and usability improvements have been made to the application. A new content library has been added and numerous content fixes have been made based on feedback by a new editor - the TM content is periodically reviewed by different information security professionals.</span>
  </p>
  <p style="font-size: 10pt; ">
    <b>APPLICATION CHANGES</b>
    <br />The TM3.1 release includes the following changes:</p>
  <p style="font-size: 10pt; ">
  </p>
  <ul style="font-size: 10pt; ">
    <li>New article schema (with more metadata and better content formatting).</li>
    <li>Active Directory support.</li>
    <li>New Link structure.</li>
    <li>Xml and XSLT support (client and server side).</li>
    <li>REST API to access articles in multiple formats (raw, xml, jsonp) with ability to find article by GUID or title.</li>
    <li>New C# WebServices API.</li>
    <li>TM Technology pages providing technical details on TM APIs.</li>
    <li>New WebServices Methods that simplify the creation of TM Content.</li>
    <li>Multiple GUI and performance fixes.</li>
    <li>Gaug.es support.</li>
    <li>Upgrade to .NET 4.0.</li>
  </ul>
  <b style="font-size: 10pt; ">CONTENT CHANGES</b>
  <br />
  <font size="2">
The 2012Q1 TM content release has the following updates:</font>
  <br />
  <ul style="font-size: 10pt; ">
    <li>The new "CWE" library. A new library based on the CWE Top 25 Vulnerabilities list has been added. The articles are based heavily on the original CWE text. A few minor changes have been made to the original text by a team of reviewers. Additional material has been added in places where the original CWE content was too short. The CWE library is a stand-alone library and has 110 articles.</li>
    <li>The updated "PCI DSS Compliance" library. The PCI DSS library has been edited to be clearer and to improve the browsing experience. New articles have been added to have a one-to-one correspondence of Guideline and Checklist items. The content has been reviewed by one more editor and numerous minor fixes have been made. The meta-data tags have been edited to simplify navigation. The new PCI DSS library is a stand-alone library and includes 331 articles.</li>
  </ul>
  <b style="font-size: 10pt; ">REQUIREMENTS</b>
  <br />
  <ul style="font-size: 10pt; ">
    <li>Windows</li>
    <li>NET Framework 4.0</li>
  </ul>
  <b style="font-size: 10pt; ">DEFAULT ACCOUNTS</b>
  <br />
  <ul style="font-size: 10pt; ">
    <li>admin  : !!tmadmin</li>
    <li>editor : !!tmeditor</li>
    <li>reader : !!tmreader</li>
  </ul>
  <b style="font-size: 10pt; ">SUPPORT INFORMATION</b>
  <br />
  <font size="2">For more information about TeamMentor, please see "TeamMentor Documentation" at </font>
  <a href="http://docs.teammentor.net" style="font-size: 10pt; ">http://docs.teammentor.net</a>
  <p style="font-size: 10pt; " />]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>00000000-0000-0000-0000-0000002df883</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Edit Article Metadata</Title>
      <Category>Editing</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink>Edit Article Metadata</DirectLink>
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="false" DataType="WikiText">
      <Data><![CDATA[=Editing Article Metadata=
**Guidance Item article Metadata**

Each article has the following meta-data: 

* **Title**:  The title is the title that is displayed in the article list
* **Technology** tag:  The technology tag reflects what technology the article applies to
* **Phase** tag:  The phase tag signifies which phase of the software development life-cycle the article is relevant to
* **Type** tag:  The type tag describes the type of the article
* **Category** tag:  The category tag describes what kind of security control the article is about

The values of these fields create the filters and a drop-down list items in the article editor. These values can be change in the WYSIWING editor window. Use the drop downs to change the metadata of the articles. To add a new tag, enter the tag in the drop down field and click “Save Changes”

{{/Image/editmetadata-img1.jpg}}

=Related Items=
For more information on Article Metadata see:\\
[[Edit Article Metadata]]\\

For information on editing HTML articles see:\\
[[Editing HTML Articles]]\\

For information on editing WikiText articles see:\\
[[Editing WikiText Articles]]\\]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1264478444" Content_Hash="845973770">
    <Metadata>
      <Id>00000000-0000-0000-0000-0000003c1f66</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Article Editor Workflow Ideas</Title>
      <Category>Editing</Category>
      <Phase>Draft</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[Currently, the article editor has multiple limitations, among them:&nbsp;
<div>&#43; It doesn't handle copy and paste from Office documents well</div>
<div>&#43; The HTML code produced by the WYSIWYG editor is messy</div>
<div><br>
</div>
<div>Some idea to improve this situation are:</div>
<div>&#43; Add multiple editor packages in parallel</div>
<div>&#43; Let the users choose/enable/disable editors based on personal preferences</div>
<div>&#43; Add an html editor for power users</div>
<div>&#43; Add a JavaScript based converter to convert from plain-text to HTML based on TeamMentor-specific style guide and format</div>
<div>&#43; Provide access to editors without having to create an article first, similar to opening notepad, jotting down some notes, then saving only if it's worth-while. The saved text should be saved as a draft that's not published to the public site, but should
 be either visible to the user alone or shared with others. Making the draft a published article should be also an option.</div>
<div><br>
</div>
<div><br>
</div>
<div>TeamMentor Style Guide</div>
<div><br>
</div>
<div>To be documented when requested...</div>
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>00000000-0000-0000-0000-0000003ea057</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Editing HTML Articles </Title>
      <Category>Editing</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink>Editing HTML Articles </DirectLink>
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="false" DataType="WikiText">
      <Data><![CDATA[=Editing HTML Articles in Edit Mode=
Double clicking on an HTML article in “Edit Mode” brings up the built-in WYSIWYG HTML editor. You can click on the “view source icon”   to edit HTML source code. Article metadata, such as title, technology, phase, type and category etc. can also be modified in this editor. See Related Items for more details.

{{/Image/editinghtml-img1.jpg}}

=Editing HTML Articles in “View Mode”=
In “view mode”, article editing can be accomplished by clicking on ether the “Edit WYSIWYG” or “Edit Source” buttons.

{{/Image/editinghtml-img2.jpg}}
 
Clicking on “Edit WYSIWING” will bring up the already familiar WYSIWYG editor window. You can click on the “view source icon”   to edit HTML source code. Article metadata, such as title, technology, phase, type and category etc. can also be modified in this editor. See Related Items  for further details.
 Save changes to your edits by clicking the “Save Changes” Button. Clicking “View Article” will bring up the article in view mode, however, your changes will not be saved unless you go back to editing the article and click  on “Save Changes”

{{/Image/editinghtml-img3.jpg}}
 
Clicking on “Edit Source” will bring up a different HTML source view editor. Here you can modify HTML and change the article data type. Currently HTML and WikiText article data types are supported. 
 
{{/Image/editinghtml-img4.jpg}}

=Related Items=
For more information on Article Metadata see:\\
[[Edit Article Metadata]]\\

For information on editing HTML articles see:\\
[[Editing HTML Articles]]\\

For information on editing WikiText articles see:\\
[[Editing WikiText Articles]]\\]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="699175346" Content_Hash="-1341253325">
    <Metadata>
      <Id>00000000-0000-0000-0000-000000443637</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Using TM WebServices</Title>
      <Category> Customization</Category>
      <Phase>Draft</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1874290984" Content_Hash="623801499">
    <Metadata>
      <Id>00000000-0000-0000-0000-0000004541f9</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Script - Batch Creation of Users from CSV file</Title>
      <Category />
      <Phase>Draft</Phase>
      <Technology>TeamMentor</Technology>
      <Type />
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[
<div><font face="Arial, Verdana" size="2"><br>
</font></div>
<div><font face="Arial, Verdana" size="2"><br>
</font></div>
<div><font face="Arial, Verdana" size="2"><br>
</font></div>
<div><font face="Arial, Verdana" size="2"><br>
</font></div>
<div><font face="Arial, Verdana" size="2">//var tmSite= &quot;http://localhost.:12345&quot;;</font></div>
<div><font face="Arial, Verdana" size="2">//var adminPwd = &quot;....!&quot;;</font></div>
<div><font face="Arial, Verdana" size="2"><br>
</font></div>
<div><font face="Arial, Verdana" size="2">var tmSite = &quot;http://teammentor.securityinnovation.com&quot;;</font></div>
<div><font face="Arial, Verdana" size="2">var adminPwd = &quot;...&quot;;</font></div>
<div><font face="Arial, Verdana" size="2"><br>
</font></div>
<div><font face="Arial, Verdana" size="2">var tmWebServices = new API_TeamMentor_WebServices(tmSite); &nbsp; &nbsp; &nbsp;</font></div>
<div><font face="Arial, Verdana" size="2">tmWebServices.login(&quot;admin&quot;,adminPwd).str();</font></div>
<div><font face="Arial, Verdana" size="2"><br>
</font></div>
<div><font face="Arial, Verdana" size="2">var topPanel = panel.clear().add_Panel();&nbsp;</font></div>
<div><font face="Arial, Verdana" size="2">var dataGridView = topPanel.add_DataGridView();</font></div>
<div><font face="Arial, Verdana" size="2"><br>
</font></div>
<div><font face="Arial, Verdana" size="2">dataGridView.add_Columns(&quot;UserID&quot;,&quot;UserName&quot;,&quot;Password&quot;,&quot;email&quot;,&quot;FirstName&quot;,&quot;LastName&quot;,&quot;Role&quot;,&quot;Active&quot;,&quot;ExpirationDate&quot;,&quot;Title&quot;, &quot;Company&quot;);</font></div>
<div><font face="Arial, Verdana" size="2"><br>
</font></div>
<div><font face="Arial, Verdana" size="2">var csvFile1 = @&quot;{path to}\V2 version - web users\UsersWithNoExpirationDate.csv&quot;;</font></div>
<div><font face="Arial, Verdana" size="2">var csvFile2 = @&quot;</font> <span style="font-family:Arial,Verdana; font-size:small">
{path to}</span><font face="Arial, Verdana" size="2">\V2 version - web users\UsersWithFutureExpirationDate.csv&quot;;</font></div>
<div><font face="Arial, Verdana" size="2"><br>
</font></div>
<div><font face="Arial, Verdana" size="2">var csvContent = csvFile1.fileContents().line() &#43;&nbsp;</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>&nbsp; &nbsp; csvFile2.fileContents().line();<br>
<br>
</font></div>
<div><font face="Arial, Verdana" size="2">var lines = csvContent.split_onLines().removeEmpty();</font></div>
<div><font face="Arial, Verdana" size="2"><br>
</font></div>
<div><font face="Arial, Verdana" size="2">//var line = lines[0];</font></div>
<div><font face="Arial, Verdana" size="2">var max = 1000;</font></div>
<div><font face="Arial, Verdana" size="2">foreach(var line in lines)</font></div>
<div><font face="Arial, Verdana" size="2">{&nbsp;</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>var items = line.remove(&quot;NULL&quot;).split(&quot;,&quot;);</font></div>
<div><span class="x_Apple-tab-span" style="white-space:pre"><font face="Arial, Verdana" size="2"></font></span></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>//tmWebServices.delete_User(items[1]);</font></div>
<div><span class="x_Apple-tab-span" style="white-space:pre"><font face="Arial, Verdana" size="2"></font></span></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>var role = items[6].toInt() &#43; 1;&nbsp;</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>var note = &quot;CSV Import&quot;;</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>tmWebServices.add_User(items[1], items[2], items[3], items[4], items[5], role, items[9], items [10], &nbsp;note);</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>dataGridView.add_Row(items.ToArray());&nbsp;</font></div>
<div><span class="x_Apple-tab-span" style="white-space:pre"><font face="Arial, Verdana" size="2"></font></span></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>if (max-- == 0)</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>break;</font></div>
<div><font face="Arial, Verdana" size="2">}</font></div>
<div><font face="Arial, Verdana" size="2"><br>
</font></div>
<div><font face="Arial, Verdana" size="2">return tmWebServices.users().size();</font></div>
<div><font face="Arial, Verdana" size="2"><br>
</font></div>
<div><font face="Arial, Verdana" size="2">//O2File:API_TeamMentor_WebServices.cs</font></div>
<div><font face="Arial, Verdana" size="2">//using SecurityInnovation.TeamMentor</font></div>
<div><font face="Arial, Verdana" size="2">//O2Ref:System.Web.Services.dll</font></div>
<div><font face="Arial, Verdana" size="2">//O2Ref:O2_Misc_Microsoft_MPL_Libs.dll</font></div>
<div><font face="Arial, Verdana" size="2">//_O2Tag_DontAddExtraO2Files</font></div>
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>00000000-0000-0000-0000-000000481b9d</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Editing Overview</Title>
      <Category>Editing</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink>Editing Overview</DirectLink>
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="false" DataType="WikiText">
      <Data><![CDATA[=Editing in Team Mentor=
Team Mentor supports flexible update of content and customization based on user needs. Most editing operations in Team Mentor are done using the "Edit Mode". This mode is available to users with "Editor" or "Administrator" roles and allows editing of folders, libraries and views. Articles can be edited through "Edit Mode" as well.  

==Editing in View Mode==
Team Mentor offers the flexibility of editing articles without going in and out of "Edit Mode". If the logged in user is in "Administrator" or "Editor" role, articles can be edited by clicking on one of the edit buttons in the article view.  

=HTML and WikiText Article Formats=
Currently Team Mentor supports two article formats - HTML and WikiText. Steps for editing an article vary depending on article format. HTML Articles are edited using a WYSIWYG editor (optionally manipulating HTML content). WikiText articles are edited using the WikiCreole language with a WikiCreole Editor. It is recommended that all future articles are created using WikiText. This allows a wider audience to update and format the articles.

=Logging in=
Prior to editing an article it is necessary to log in. Click on the “Login” link in the upper right corner. The login dialog box will pop up. Enter your user credentials:

{{/Image/editingoverview-img1.jpg}}

=Accessing “Edit Mode”=
There are two ways to access the TeamMentor "Edit Mode":
1) Click the "Edit Mode" link in the top right of the main user interface:

{{/Image/editingoverview-img2.jpg}}
 
2) left-click on the library tree to open up the context menu, and choose the option 'Open Edit Mode':

{{/Image/editingoverview-img3.jpg}} 

Once the "Edit Mode" is loaded, a number of buttons should be visible on the Guidance Item's Table (for example: 'Select All', 'Deselect All', 'Delete Guidance Items from Library').  

{{/Image/editingoverview-img4.jpg}}

The article list pane works the same way in "Edit Mode" as in regular mode - folders and views can be navigated via the navigation pane on the left; filters and search strings can be used to narrow down the list in the content list pane. The major difference is that double-clicking an article opens it for editing, rather than for viewing.

=Related Items=
For more information on Article Metadata see:\\
[[Edit Article Metadata]]\\

For information on editing HTML articles see:\\
[[Editing HTML Articles]]\\

For information on editing WikiText articles see:\\
[[Editing WikiText Articles]]\\
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>00000000-0000-0000-0000-0000004866a5</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Team Mentor Plugin for Visual Studio</Title>
      <Category>Visual Studio Plugin</Category>
      <Phase>N/A</Phase>
      <Technology>Team Mentor</Technology>
      <Type>Documentation</Type>
      <DirectLink>Team Mentor Plugin for Visual Studio</DirectLink>
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="false" DataType="Html">
      <Data><![CDATA[<p>Team Mentor Plugin for Visual Studio integrates Team Mentor Guidance articles with the power of Cat.NET scanner, right into the integrated development environment. This combination allows the developer to identify security issues quickly and have information at their fingertips to find &amp;nbsp;the easiest and quickest resolution. &amp;nbsp;</p>
  <p>The core of this product is quick and easy access to security information that is accurate and relevant to specific code security questions. This reduces the number of security scan cycles that involve QA, infosec or other teams, as well as the total number of vulnerabilities found by security scans and penetration tests. Integrating security scanning and guidance into a development workflow ultimately results in quicker production of more secure and stable applications.</p>
  <h1>Workflow</h1>
  <ul>
    <li>Team Mentor integrates into the Visual Studio development workflow.</li>
    <li>Each time the solution is built, a scan is triggered.</li>
    <li>The results of the scan show up in the Visual Studio Error List. &amp;nbsp;</li>
    <li>Double clicking on the error will bring up the relevant information in the Team Mentor window.</li>
  </ul>
  <h1>Installation</h1>
  <p>Team Mentor installs as a Visual Studio plugin. &amp;nbsp;It requires Visual Studio 2010. (Evaluation Version is supported)</p>
  <ol>
    <li>Download the installation VSIX file. &amp;nbsp;</li>
    <li>Double click on the downloaded file. &amp;nbsp;This will trigger the installation process. &amp;nbsp;The plug-in will be installed into the logged-in user Visual Studio Extension folder.&amp;nbsp;</li>
    <li>
      <p>Click Install</p>
      <p>
        <img height="203" src="/Image/vsplugin-image001.jpg" width="291" />
      </p>
    </li>
    <li>
      <p>Close the installer after successful installation.</p>
      <p>
        <img height="203" src="/Image/vsplugin-image002.jpg" width="291" />
      </p>
    </li>
    <li>Restart Visual Studio. It will take some time for Team Mentor to initialize the first time. You will see the downloading various components, including Cat.NET Scanner.</li>
    <li>
      <p>After successful initialization. You will see Team Mentor Landing Page tab and the Team Mentor Menu.</p>
      <p>
        <img height="231" src="/Image/vsplugin-image003.jpg" width="560" />
      </p>
    </li>
    <li>
      <p>The plugin will show in Extension Manager. &amp;nbsp;Access the Visual Studio Extension Manager by clicking on <i>Tools -&gt; Extension Manager.</i> &amp;nbsp;Select “<i>All</i>” extensions if not already selected. This is also the place to go if for some strange reason you wanted to uninstall Team Mentor VS Plugin.</p>
      <p>
        <img height="232" src="/Image/vsplugin-image004.jpg" width="386" />
      </p>
    </li>
  </ol>
  <h1>Triggering a Scan</h1>
  <p>Building the solution will trigger a scan. The results of the scan will show in the Visual Studio Error List. Scans can also be triggered manually by accessing Team Mentor VS Plugin debug functions in<i> Team Mentor -&gt; Debug Tools (For this extension) -&gt; Trigger Scan</i></p>
  <p>
    <img height="238" src="/Image/vsplugin-image005.jpg" width="448" />
  </p>
  <h1>Sample Scan</h1>
  <p>Below is a workflow for a sample scan on sample code</p>
  <ol>
    <li>
      <p>Create a new C# Windows Class Library Project</p>
      <p>
        <img height="270" src="/Image/vsplugin-image006.jpg" width="400" />
      </p>
    </li>
    <li>
      <p>
In the Solution Explorer right click on “<i>References</i>” and click “<i>Add Reference</i>”. Add “<i>System.Web</i>” as a reference from <i>.NET Framework</i>.
</p>
      <p>
        <img height="268" src="/Image/vsplugin-image007.jpg" width="327" />
      </p>
    </li>
    <li>
      <p>
Cut and paste the following code into the newly created .cs file
</p>
      <pre>using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Data.SqlClient;
using System.Web.UI;

namespace ConsoleApplication2
{
  class VulnPage : Page
  {
    public void test()
    {
        var taint = Request["name"];
        Response.Write(taint);     // gives XSS
        File.OpenRead(taint);      // gives File Canonicalization
        new SqlCommand(taint);     // gives SQL injection            
     }
  }
}
</pre>
      <p>
        <img height="248" src="/Image/vsplugin-image008.jpg" width="497" />
      </p>
    </li>
    <li>
      <p>Build the Solution. You will see 3 errors in the Error List.</p>
      <p>
        <img height="118" src="/Image/vsplugin-image009.jpg" width="459" />
      </p>
    </li>
    <li>
      <p>Double clicking on one of the Errors, will bring up the relevant Team Mentor Guidance.</p>
      <p>
        <img height="232" src="/Image/vsplugin-image010.jpg" width="467" />
      </p>
    </li>
  </ol>
  <h1>Options and Tools</h1>
  <p>Team Mentor VS Plugin is highly configurable and customizable. Here are some of the options that can be changed to modify the user experience.</p>
  <h2>Main Configuration Options</h2>
  <p>Team Mentor VS Plugin exposes its configuration through a series of menus. <i>&amp;nbsp;Team Mentor -&gt; View Options</i> &amp;nbsp;allows configuration of available settings as they relate to the appearance and behavior of the plugin.&amp;nbsp;</p>
  <p>
    <img height="289" src="/Image/vsplugin-image011.jpg" width="291" />
  </p>
  <p>
    <i>AutoScanOnBuild</i> – Selects if the Team Mentor VS plugin will automatically initiate a scan when a solution is built.,<br /><i>DefaultPage</i> – Is the default Landing Page the user sees when the Team Mentor VS plugin loads.<br /><i>LandingPages_Browser &amp; LandingPages_Panel </i>– Allow the developer to control certain attributes of the Team Mentor pane.<br /><i>OpenLinksInNewTab</i> &amp;nbsp;- Specifies if links from the landing pages are opened in a new tab or in the existing tab.&amp;nbsp;<br /><i>TeamMentorServer</i> – Specifies the server where the Team Mentor content resides.</p>
  <h2>Content Mapping</h2>
  <p>Team Mentor uses Cat.NET scanning technology. &amp;nbsp;It maps each Vulnerability found by Cat.NET to a relevant Team Mentor Landing page. The Landing page in turn allows navigating to links with in depth information on the vulnerability and its resolution. Under the hood, all Team Mentor articles are associated with a Global Unique Identifier (GUID). &amp;nbsp;Team Mentor allows the user to set the mapping of a Cat.NET vulnerability to a GUID.&amp;nbsp;<i>Team Mentor -&gt; “Open Cat.NET -&gt; Team Mentor Mappings</i>”</p>
  <p>
    <img height="141" src="/Image/vsplugin-image012.jpg" width="578" />
  </p>
  <h2>Scripts Editor&amp;nbsp;</h2>
  <p>Under the hood, the Team Mentor VS Plugin uses a REPL script and a set of custom APIs. Scripts used by Team Mentor VS Plugin to configure the Visual Studio environment are available through the editor. An experienced user may modify these or create new scripts to customize the Team Mentor VS plugin. </p>
  <p>
    <img height="203" src="/Image/vsplugin-image013.jpg" width="291" />
  </p>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="550331741" Content_Hash="1815543162">
    <Metadata>
      <Id>00000000-0000-0000-0000-00000056909e</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Installing TeamMentor on IIS 7.0</Title>
      <Category>Administration</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[
<div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
If you want to use the application locally only, use Cassini. If you want to expose the application&nbsp;on a web server to your team, use IIS.&nbsp;</div>
<div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
<br>
</div>
<div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
To install TeamMentor on IIS 7.0:</div>
<div style="font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; font-family:'Times New Roman'; font-size:medium">
<span><br>
</span></div>
<div>
<ol>
<li>Copy TeamMentor files to local folder
<ul>
<li><b>Download&nbsp;the .zip</b>&nbsp;file of TeamMentor and extract it</li><li>You can also do a&nbsp;<b>Git Clone</b>&nbsp;of the desired version of TeamMentor from GitHub</li></ul>
</li><li><b>The&nbsp;TeamMentor root folder</b>&nbsp;should contain the following folders:
<ul>
<li>Library_Data - this folder contains the library files.</li><li>Web Application - this folder contains the application files.</li></ul>
</li><li><span style="font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; font-family:Arial,Verdana; font-size:small"><b>Add TeamMentor to IIS 7.0.</b></span>
<ul>
<li>Open the &quot;Internet Information Services (IIS) Manager&quot;.&nbsp;</li><li>Navigate to the &quot;Sites&quot; folder in the &quot;Connections&quot; tree on the left.&nbsp;</li><li>Right click on the&nbsp;&quot;Sites&quot; folder.</li><li>Select &quot;Add Web Site...” An &quot;Add Web Site&quot; window should appear.&nbsp;</li><li>Enter a name for the site in the &quot;Site name:&quot; text box.&nbsp;</li><li>Click the &quot;...&quot; next to the &quot;Physical&nbsp;path:&quot; text box to set the root of the web site.&nbsp;A &quot;Browse for Folder&quot; window should&nbsp;appear.&nbsp;</li><li>Select to the &quot;Web Applications\TM_Website&quot; folder&nbsp;inside the TeamMentor root folder&nbsp;&nbsp;</li><li>Click &quot;Ok&quot;. Set the port in the &quot;Port:&quot; text&nbsp;box, if necessary.&nbsp;</li><li>Click &quot;OK&quot;.</li><li>The &quot;Add Web Site&quot; window should close and a new web&nbsp;site should appear in the &quot;Sites&quot; folder in the tree on the left of the &quot;Internet Information&nbsp;Services (IIS) Manager&quot; window.</li><li>A new&nbsp;web site should appear in the tree structure on the left of the &quot;Internet Information&nbsp;Services (IIS) Manager&quot; window.&nbsp;<br>
<br>
TeamMentor 3 should now be&nbsp;operational.<br>
<br>
</li></ul>
</li><li style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
<b>If content or user changes are desired,</b><span>&nbsp;the account used by IIS needs to have write privileges to the TeamMentor Root folder</span><br>
<ul>
<li><span><b>Identify the application account.</b>&nbsp;which is the Windows user account used by the&nbsp;</span><span>IIS Application Pool configured on the TeamMentor website.</span></li></ul>
<ol>
<ul>
<li><span>On the &quot;Internet&nbsp;</span><span>Information Services (IIS) Manager&quot;.&nbsp;</span></li><li><span>Navigate to &quot;Application Pools&quot; in the tree on the&nbsp;left.&nbsp;</span></li><li><span>Right-click on the &quot;Default App Pool&quot; and select &quot;Advanced Settings...”&nbsp;</span></li><li><span>Take note&nbsp;of the user-name in the &quot;Identity&quot; row under &quot;Process Model&quot;</span></li><li><span>By default, it is&nbsp;&quot;NetworkService&quot;</span><br>
</li></ul>
</ol>
<ul>
<li><span><b>Adjust the file-system permissions</b>. Give write permissions for the TeamMentor folder&nbsp;</span><span>to the Windows user account that is used to run TeamMentor. This is the username that&nbsp;</span><span>has been discovered in the previous step.&nbsp;</span></li></ul>
<ol>
<ul>
<li><span>Right click on the TeamMentor root folder</span></li><li><span>Select &quot;Properties&quot;. A &quot;Properties&quot; window&nbsp;</span><span>should appear.&nbsp;</span></li><li><span>Select the &quot;Security&quot; tab in the &quot;Properties&quot; window. Give &quot;Full Access&quot;&nbsp;</span><span>permissions to the Windows account that is used to run TeamMentor.&nbsp;</span></li><li><span>Click &quot;OK&quot;</span></li></ul>
</ol>
</li></ol>
</div>
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1556045927" Content_Hash="-1467158474">
    <Metadata>
      <Id>00000000-0000-0000-0000-000000579bb9</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Editing Folders</Title>
      <Category>Editing</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[
<div>Editing content in TeamMentor is done via &quot;Edit Mode&quot;. &quot;Edit Mode&quot; is only available to Editors and Administrators. To access &quot;Edit Mode&quot;, login as either an Administrator or an Editor user and click the &quot;Edit Mode&quot; link in the top right of the main user
 interface.</div>
<div><br>
</div>
<div>The two main ways to edit folders in TeamMentor are via the right-click context menu and via drag &amp; drop operations. Right-click context menu operations allow managing the folders themselves, while drag &amp; drop operations allow placing content inside of
 folders.</div>
<div><br>
</div>
<div>The right-click content menu provides the following options: &quot;Add View&quot;, &quot;Add Folder&quot;, &quot;Rename Folder&quot;, &quot;Delete Folder&quot;, and &quot;Exit Edit Mode&quot;. &quot;Add View&quot; creates a new view in the selected folder. &quot;Add Folder&quot; creates a new folder inside the selected folder.
 &quot;Rename Folder&quot; allows renaming the current folder. &quot;Delete Folder&quot; deletes the clicked folder. &quot;Exit Edit Mode&quot; returns the user interface to regular mode.</div>
<div><br>
</div>
<div>Drag &amp; drop operations allow placing existing views inside a folder. To move a view into a folder, drag it into the destination folder. Items cannot be moved across libraries.</div>
<div><font size="2"></font></div>
<div></div>
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1877472877" Content_Hash="1515244028">
    <Metadata>
      <Id>00000000-0000-0000-0000-0000005b52c6</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Installing Libraries</Title>
      <Category>Administration</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[
<div>To install libraries, move them to the folder that is configured as the TeamMentor library folder. Libraries are distributed as zip archives. The zip archives can be extracted to the TeamMentor library folder. The TeamMentor library folder is &quot;Library_Data\XmlDatabase\TM_Libraries&quot;
 relative to the TeamMentor installation path by default.&nbsp;</div>
<div><br>
</div>
<div>The TeamMentor library path can be changed by editing the TMConfig.Config file in the &quot;Web Applications\TM_Website&quot; folder relative to the TeamMentor installation path. The XmlLibrariesPath setting in TMConfig.Config is responsible for the location of
 the TeamMentor library folder. The value of this property can be either an absolute path or a path relative to the &quot;\Library_Data\XmlDatabase&quot; folder.</div>
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-1535922535" Content_Hash="1513984744">
    <Metadata>
      <Id>00000000-0000-0000-0000-0000005d8802</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Editing the Configuration File</Title>
      <Category>Administration</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[
<div>The TeamMentor configuration file is called TMConfig.Config and it is located in the &quot;Web Applications\TM_Website&quot; folder relative to the TeamMentor installation path. The following settings are available in the TMConfig.Config file:</div>
<div><br>
</div>
<div>
<ul>
<li><b>Version</b>. This is the version information used for debugging and technical support purposes. It should probably be left alone.</li><li><b>WebSite_Port</b>. This is used by TeamMentor Unit Tests to know the location of TeamMentor. Note that this value is not used by the Web Server.</li><li><b>WebSite_IP</b>. This is used by TeamMentor Unit Tests to know the location of TeamMentor. Note that this value is not used by the Web Server.</li><li><b>XmlLibrariesPath</b>. This is the path to the library files. This is probably the most important option to edit, because it has to be set correctly for TM to load the library files. The value of this property can be either an absolute path or a path
 relative to the &quot;\Library_Data\XmlDatabase&quot; folder.&nbsp;</li><li><b>Libraries_Disabled</b>. This is a list that can be used to prevent one or more libraries from being loaded (even if they exist in the library folder).</li><li><b>DefaultAdminUserName</b>. Set this option to define the default administrator user name. This user name will be used to manage TeamMentor in the early stages of using it.</li><li><b>DefaultAdminPassword</b>. Set this option to define the default administrator password. This password, together with the default administrator user name, will be used to manage TeamMentor in the early stages of using it.</li><li><b>LibrariesZipsFolder</b>. This is the location to save the zip files that are downloaded from the 'Install/Upload Libraries' Control Panel item. This function is disabled on default installations.</li><li><b>ShowContentToAnonymousUsers</b>. This setting defines whether or not full articles will be displayed to unauthenticated users.</li></ul>
</div>
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="951276351" Content_Hash="278328890">
    <Metadata>
      <Id>00000000-0000-0000-0000-00000060462d</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Editing Libraries</Title>
      <Category>Editing</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[
<div>Editing content in TeamMentor is done via &quot;Edit Mode&quot;. &quot;Edit Mode&quot; is only available to Editors and Administrators. To access &quot;Edit Mode&quot;, login as either an Administrator or an Editor user and click the &quot;Edit Mode&quot; link in the top right of the main user
 interface.</div>
<div><br>
</div>
<div>The two main ways to edit libraries in TeamMentor are via the right-click context menu and via drag &amp; drop operations. Right-click context menu operations allow managing the libraries themselves and creating new items, while drag &amp; drop operations allow
 organizing the items inside the libraries.</div>
<div><br>
</div>
<div>The right-click context menu provides access to the operations: &quot;Add View&quot;, &quot;Add Folder&quot;, &quot;Add Guidance Item&quot;, &quot;Rename Library&quot;, &quot;Delete Library&quot;, &quot;New Library&quot;, and &quot;Exit Edit Mode&quot;. &quot;Add View&quot; creates a new view inside the current library. &quot;Add Folder&quot;
 creates a new folder inside the current library. &quot;Add Guidance Item&quot; creates a new article in the current library. &quot;Rename Library&quot; allows renaming the current library. &quot;Delete Library&quot; allows deleting the clicked library. &quot;New Library&quot; creates a new library.
 &quot;Exit Edit Mode&quot; returns the main user interface to regular mode.</div>
<div><br>
</div>
<div>Drag &amp; drop operations allow moving content around inside the library. A library should have a set of folders and views. Views can be moved into folders, but folders cannot be moved into other folders. The views are the important aspect of the library
 and folders are a supporting element to help organize the views. Therefore, articles can be dragged and dropped into views, but not into folders. &nbsp;The views contain links to articles. The same article can be located in multiple views, but a view can only be
 inside one folder. Selecting a folder in the navigation pane shows all the items in the views that are contained in that folder. Items cannot be moved between libraries.</div>
<div><font size="2"></font></div>
<div></div>
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="469737908" Content_Hash="1007085302">
    <Metadata>
      <Id>00000000-0000-0000-0000-00000060a93a</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Git Scripts</Title>
      <Category>Version Control</Category>
      <Phase>Draft</Phase>
      <Technology>GIT</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[<font face="Arial, Verdana" size="2" style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; font-size:10pt">Here are a number of useful Git Scripts</font>
<div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
<br>
</div>
<div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
Update an repository with the latest changes</div>
<div>
<ul style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; font-size:10pt">
<li><font face="Arial, Verdana" size="2">$git pull origin</font></li></ul>
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
<font size="2"><br>
</font></div>
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
<font size="2">References</font></div>
<div>
<ul>
<li><font face="Arial, Verdana" size="2">Git Stash:&nbsp;</font> <a href="http://book.git-scm.com/4_stashing.html">
http://book.git-scm.com/4_stashing.html</a></li></ul>
</div>
</div>
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1334847491" Content_Hash="-1188817129">
    <Metadata>
      <Id>00000000-0000-0000-0000-00000061eb3b</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>User Interface Overview</Title>
      <Category>User Interface</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[
<div>
<div>The main user interface window has five panes: the banner pane at the top, the navigation pane on the left, the filters pane in the middle, the preview pane on the right, and the article list pane on the bottom. The navigation, filters, and preview panes
 can be hidden by clicking the rectangles in the middle of the respective border-lines. Each pane performs a specific function.</div>
<div><br>
</div>
<div>The banner pane provides access to application controls, such as logging in, switching to edit mode, or opening the control panel.</div>
<div><br>
</div>
<div>The navigation pane gives an overview of content organized into libraries, folders, and views. Folders and views work differently than file system objects, although there are some similarities. The similarities are mostly in the way they are navigated
 - folders contain multiple other objects inside them. The difference is that TeamMentor folders contain views, not file system objects - the same article may appear in multiple folders and/or views.</div>
<div><br>
</div>
<div>The filters pane allows filtering content in the current library/folder/view based on applicable technology, development phase, article type, and subject matter category. Filters can be enabled or disabled by using the corresponding checkboxes.</div>
<div><br>
</div>
<div>The preview pane displays the content of the currently selected article in the list. The purpose of the preview pane is to give the user an idea of what's inside while browsing the list to help find the right article.&nbsp;</div>
<div><br>
</div>
<div>The article list pane displays the list of articles in the current library/folder/view in the navigation pane. The list of articles is filtered using the currently selected filters in the filters pane. The article list is the main control of the application.
 Selecting an article in the list updates the preview pane with the contents of the selected article. Double-clicking on an article opens it in a new window.</div>
<div><br>
</div>
<div>The TeamMentor interface is designed to be simple and intuitive. The main task of navigating the content to find specific articles should be familiar to most users, because it is similar to navigating file-system objects.<br>
</div>
</div>
<div></div>
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="646619446" Content_Hash="2118337598">
    <Metadata>
      <Id>00000000-0000-0000-0000-0000006647d6</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Running TeamMentor locally (using Cassini)</Title>
      <Category>Administration</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; line-height:normal; font-weight:normal; font-size:10pt">
If you want to use TeamMentor locally only, use Cassini. If you want to expose the TeamMentor on a web server to your team, use IIS.&nbsp;</div>
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; line-height:normal; font-weight:normal; font-size:10pt">
<br>
</div>
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; line-height:normal; font-weight:normal; font-size:10pt">
To run TeamMentor locally, there is no installation needed, once the TeamMentor files are available locally, the only step required is to start the Cassini web server using the provided batch file</div>
<div style="font-style:normal; font-variant:normal; line-height:normal; font-weight:normal; font-family:'Times New Roman'; font-size:medium">
<span><br>
</span></div>
<div>
<ol>
<li>Copy TeamMentor files to local folder
<ul>
<li><b>Download&nbsp;the .zip</b>&nbsp;file of TeamMentor and extract it</li><li>You can also do a&nbsp;<b>Git Clone</b>&nbsp;of the desired version of TeamMentor from GitHub<br>
<br>
</li></ul>
</li><li><b>The&nbsp;TeamMentor root folder&nbsp;</b>should contain the following folders:
<ul>
<li>Library_Data - this folder contains the library files.</li><li>Web Application - this folder contains the application files.<br>
<br>
</li></ul>
</li><li>(Optional)<b> Set the local TeamMentor port</b>
<ul style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
<li>Open the &quot;start webserver.bat&quot; file with a text editor.</li><li>Edit&nbsp;the &quot;/port&quot; argument in the following line:
<ul>
<li>start &quot;WebServer&quot; &quot;WebServer/CassiniDev.exe&quot; /port:<b>12345</b>&nbsp;/portMode:Specific /path:&quot;Web Applications\TM_Website&quot;</li></ul>
</li><li>Set same port on the next line
<ul>
<li>start http://127.0.0.1:<b>12345<br>
</b><br>
</li></ul>
</li></ul>
</li><li style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
<b>Start local WebServer</b> (using batch file)
<ul>
<li>Double-click on the &quot;start webserver.bat&quot; file to start the web server&nbsp;on the defined port</li><li>The default web browser should open&nbsp;automatically with the TeamMentor web site<br>
</li></ul>
</li></ol>
</div>
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-832308128" Content_Hash="818655323">
    <Metadata>
      <Id>00000000-0000-0000-0000-0000006c87b2</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Preview Pane</Title>
      <Category>User Interface</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[The preview pane displays the content of the currently selected article in the list. The purpose of the preview pane is to give the user an idea of what's inside while browsing the list to help find the right article.&nbsp;]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>00000000-0000-0000-0000-00000078b4c4</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Visual Studio Plugin FAQ</Title>
      <Category>Visual Studio Plugin</Category>
      <Phase>N/A</Phase>
      <Technology>Team Mentor</Technology>
      <Type>Documentation</Type>
      <DirectLink>Visual Studio Plugin FAQ</DirectLink>
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[====Is Cat.NET used behind the scenes of the Team Mentor Visual Studio Plugin?====
Yes the tool we integrated into Team Mentor Visual Studio Plug-in is Microsoft's Cat.NET v1 CTP which you can download from here [[http://www.microsoft.com/en-gb/download/details.aspx?id=19968]]

====What type of support is offered for Cat.NET tool?====
This is an official Microsoft tool and while Microsoft does not plan on releasing a new version soon, SI is now supporting the Team Mentor + Visual Studio + Cat.NET plug-in. Therefore SI is providing support for the Cat.NET portion of the Team Mentor Visual Studio Plugin.

====Is it true that Cat.NET will not work with .NET versions greater than 2.0?====
Cat.NET is able to scan all (currently released) versions of the .NET Framework (not just 2.0). Note that on the default install of the Cat.NET add-in, there is no support for Visual Studio 2010, but that is a configuration change (the Team Mentor Visual Studio Plugin automatically installs this Add-In and configures it accordingly)
This is a YouTube Video showing it in action: TM - Install and demo of Visual Studio Extension with Cat.NET integration v1.0 [[http://www.youtube.com/watch?v=QeI3POSpAvQ]] 

====Is there a plan to integrate SI content into other scanning engines?====
From SI's and Team Mentor point of view, Cat.NET is just one of the scanners that we will support. We have started the integration with CheckMarx and plan to add next support for: White Hat, Fortify, AppScan Development and Standard editions, and manual security engagements. 
Here is a couple videos of our PoC of integrating Team Mentor with CheckMarx [[http://diniscruz.blogspot.co.uk/2012/04/poc-of-integrating-teammentor-with.html]]

]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>00000000-0000-0000-0000-00000079da36</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Editing WikiText Articles</Title>
      <Category>Editing</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink>Editing WikiText Articles</DirectLink>
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="false" DataType="WikiText">
      <Data><![CDATA[=Editing WikiText Articles in Edit Mode=
Double clicking on a WikiText article in “Edit Mode” opens up the editor window. Here you can modify WikiText content using WikiCreole markup. See the WikiCreole markup cheat-sheet for syntax details. Article metadata, such as title, technology, phase, type and category etc. can also be modified in this editor.  See Related Items for further details. Save changes to your edits by clicking the “Save Changes” Button.  Clicking “View Article” will bring up the article in view mode, however, your changes will not be saved unless you go back to editing the article and click  on “Save Changes”

{{/Image/editingwikitext-img1.jpg}}

=Editing WikiText Articles in View Mode=
WikiText articles can be edited while viewing the article and clicking “Edit WikiText” or “Edit Source” buttons. 
 
{{/Image/editingwikitext-img2.jpg}}

Clicking the “Edit WikiText” button brings up the familiar WikiText editor. Here you can modify WikiText content using WikiCreole markup. See the WikiCreole markup cheat-sheet for syntax details. Article metadata, such as title, technology, phase, type and category etc. can also be modified in this editor. See Related Items for further details. Save changes to your edits by clicking the “Save Changes” Button. Clicking “View Article” will bring up the article in view mode, however, your changes will not be saved unless you go back to editing the article and click  on “Save Changes”
 
{{/Image/editingwikitext-img3.jpg}}

Clicking on the “Edit Source” button brings up the WikiText source view window. Here you can modify WikiText content using WikiCreole markup. Here you have the link to WikiCreole cheat-sheet. From this window you can also change the article data type. Currently HTML and WikiText article data types are supported. 

{{/Image/editingwikitext-img4.jpg}}


=Related Items=
For more information on Article Metadata see:\\
[[Edit Article Metadata]]\\

For information on editing HTML articles see:\\
[[Editing HTML Articles]]\\

For information on editing WikiText articles see:\\
[[Editing WikiText Articles]]\\]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="214964808" Content_Hash="1999839146">
    <Metadata>
      <Id>00000000-0000-0000-0000-000000803568</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Navigating</Title>
      <Category>Reading</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[
<div>The simplest way to navigate TeamMentor content is via the aptly named navigation pane on the left. The navigation pane shows a tree representation of the available libraries as folders and views. This tree can be navigated in a manner similar to playlists
 in a music player, such as iTunes.&nbsp;</div>
<div><br>
</div>
<div>TeamMentor content is organized in a manner similar to playlists. All the articles are located in the library. Views are references to sub-sets of these files, like playlists in music players. Folders are a way to organize the views. An article may appear
 in multiple views and folders, but there is still only one copy of the article - the views and folders display references to it.</div>
<div><br>
</div>
<div>Articles can be opened via the article list pane. Navigating the folders and views changes the list of articles presented in the article list pane. This list can be further narrowed down by using filters. Once the desired articles have been located, it
 can be previewed in the preview pane on the right by single-clicking on the article title in the list. To open the article in a new window, double-click on the article title in the list.</div>
<br>
<div><font size="2"></font></div>
<div></div>
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="960298912" Content_Hash="2121275616">
    <Metadata>
      <Id>00000000-0000-0000-0000-000000825831</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Removing Libraries</Title>
      <Category>Administration</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[Libraries can be removed by deleting the corresponding library folders. Library folders can be found in the location configured in TMConfig.Config or in the &quot;Library_Data\XmlDatabase\TM_Libraries&quot; folder relative to the TeamMentor installation path by
 default. The setting for the library location in the TMConfig.Config file is XmlLibrariesPath.]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-40857053" Content_Hash="2046686358">
    <Metadata>
      <Id>00000000-0000-0000-0000-00000087e538</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Filters Pane</Title>
      <Category>User Interface</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[The filters pane allows filtering content in the current library/folder/view based on applicable technology, development phase, article type, and subject matter category. Filters can be enabled or disabled by using the corresponding checkboxes.]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1190676509" Content_Hash="212821577">
    <Metadata>
      <Id>00000000-0000-0000-0000-0000008c5464</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>TeamMentor Documentation - Table of Contents</Title>
      <Category>Table of Contents</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[
<div><font face="Arial, Verdana" size="2" style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal"><br>
</font></div>
<font face="Arial, Verdana" size="2" style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">The TeamMentor Documentation is organized into the following areas:
</font>
<div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
<br>
</div>
<div style="font-weight:normal; font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; line-height:normal">
<b>01 - UI Elements</b></div>
<div>
<ul style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; font-size:10pt">
<li><a href="?#ruledisplay:00000000-0000-0000-0000-0000000693a7">Using the Control Panel</a></li><li><a href="?#ruledisplay:00000000-0000-0000-0000-00000061eb3b">Identifying Main User Interface Elements</a>
</li><li><a href="?#ruledisplay:00000000-0000-0000-0000-00000008578b">Signing Up for Regular Accounts</a></li></ul>
<div>
<div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
<font face="Arial, Verdana" size="2"><b>02 - Reading Guidance Items</b></font></div>
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; font-size:10pt">
<ul>
<li><a href="?#ruledisplay:00000000-0000-0000-0000-000000803568">Browsing the Folders and the Views in the Navigation Pane</a></li><li><a href="?#ruledisplay:00000000-0000-0000-0000-00000024fdb5">Opening an Article</a>
</li><li><a href="?#ruledisplay:00000000-0000-0000-0000-0000001a9296">Using the Filters</a>
</li><li><a href="?#ruledisplay:00000000-0000-0000-0000-00000018204d">Using the Search Function</a>
</li></ul>
</div>
<div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
<font face="Arial, Verdana" size="2"><br>
</font></div>
<div style="font-weight:normal; font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; line-height:normal">
<font face="Arial, Verdana" size="2"><b>03 - Editing Guidance Items</b></font></div>
<div style="font-family:Arial,Verdana; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal; font-size:10pt">
<ul>
<li><a href="?#ruledisplay:00000000-0000-0000-0000-00000001f6f7">Editing Articles</a>
</li><li><a href="?#ruledisplay:00000000-0000-0000-0000-000000579bb9">Editing Folders</a></li><li><a href="?#ruledisplay:00000000-0000-0000-0000-00000060462d">Editing Libraries</a></li><li><a href="?#ruledisplay:00000000-0000-0000-0000-0000008e9fb0">Editing Views</a></li></ul>
</div>
<div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; line-height:normal">
<font face="Arial, Verdana" size="2"><b>04 - Customizing TeamMentor</b></font></div>
<div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
<font face="Arial, Verdana" size="2"><br>
</font></div>
<div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; line-height:normal">
<font face="Arial, Verdana" size="2"><b>05 - Installing TeamMentor</b></font></div>
<div>
<ul>
<li><a href="?#ruledisplay:00000000-0000-0000-0000-00000017c916">Install TeamMentor from a GitHub Repository</a><font face="Arial, Verdana" size="2">
</font></li></ul>
</div>
</div>
<div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
<br>
</div>
<div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
<br>
</div>
</div>
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="76867994" Content_Hash="993384098">
    <Metadata>
      <Id>00000000-0000-0000-0000-0000008d8ed7</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Banner Pane</Title>
      <Category>User Interface</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[The banner pane provides access to application controls, such as logging in, switching to edit mode, or opening the control panel.]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="1332688535" Content_Hash="1440755112">
    <Metadata>
      <Id>00000000-0000-0000-0000-0000008e9fb0</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Editing Views</Title>
      <Category>Editing</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[
<div>Editing content in TeamMentor is done via &quot;Edit Mode&quot;. &quot;Edit Mode&quot; is only available to Editors and Administrators. To access &quot;Edit Mode&quot;, login as either an Administrator or an Editor user and click the &quot;Edit Mode&quot; link in the top right of the main user
 interface.</div>
<div><br>
</div>
<div>The three main ways to edit views in TeamMentor are via the right-click context menu, via drag &amp; drop operations, and via the content list buttons. Right-click menu context operations allow managing the views, drag &amp; drop operations allow moving articles
 into views, and content list buttons allow removing articles from views.</div>
<div><br>
</div>
<div>The right-click menu provides access to the following functions: &quot;Add Guidance Item&quot;, &quot;Rename View&quot;, &quot;Delete View&quot;, and &quot;Exit Edit Mode&quot;. &quot;Add Guidance Item&quot; creates a new article in the current view. &quot;Rename View&quot; allows renaming the current view. &quot;Delete
 View&quot; deletes the clicked view. &quot;Exit Edit Mode&quot; returns the main user interface to regular mode.</div>
<div><br>
</div>
<div>Drag &amp; drop operations allow moving the articles between views. Multiple articles can be selected by using the checkboxes next to the article names. The views are the important aspect of the library and folders are a supporting element to help organize
 the views. Therefore, articles can be dragged and dropped into views, but not into folders. &nbsp;The views contain links to articles. The same article can be located in multiple views, but a view can only be inside one folder. Selecting a folder in the navigation
 pane shows all the items in the views that are contained in that folder. Items cannot be moved between libraries.</div>
<div><br>
</div>
<div>Content list buttons include &quot;Select All&quot;, &quot;Deselect All&quot;, and &quot;Remove Guidance Items from View&quot;. &quot;Select All&quot; selects all the articles currently visible in the content list pane. &quot;Deselect All&quot; clears the selection. &quot;Remove Guidance Items from View&quot; removes
 the selected articles from the current view.&nbsp;</div>
<div><font size="2"></font></div>
<div></div>
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="-377927615" Content_Hash="-379906202">
    <Metadata>
      <Id>00000000-0000-0000-0000-000000919e51</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Script - Creating TM Library based on CWE files</Title>
      <Category />
      <Phase>Draft</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Script</Type>
      <DirectLink />
      <Tag />
      <Security_Demand />
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="true" DataType="Html">
      <Data><![CDATA[
<div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
<br>
</div>
<div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
<br>
</div>
<h3>File 1</h3>
<div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
<br>
</div>
<div>
<div><font face="Arial, Verdana" size="2">var xmlFile = @&quot;C:\O2\_tempDir\2-23-2012\tmp26D7_cwec_v2.1.xml\cwec_v2.1.xml&quot;;</font></div>
<div><font face="Arial, Verdana" size="2">var xmlData = Weakness_Catalog.Load(xmlFile);&nbsp;</font></div>
<div><font face="Arial, Verdana" size="2"><br>
</font></div>
<div><font face="Arial, Verdana" size="2">var targetFile = @&quot;C:\O2\_tempDir\2-28-2012\cweData.xml&quot;;</font></div>
<div><font face="Arial, Verdana" size="2">var cweData= new CWE_Data();</font></div>
<div><font face="Arial, Verdana" size="2"><br>
</font></div>
<div><font face="Arial, Verdana" size="2">var maxItems = 5000;</font></div>
<div><font face="Arial, Verdana" size="2">foreach(var weakness in xmlData.Weaknesses.Weakness)</font></div>
<div><font face="Arial, Verdana" size="2">{</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>var cweWeakness = new CWE_Weakness();</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>cweWeakness.Content = weakness.Description.str();</font></div>
<div><span class="x_Apple-tab-span" style="white-space:pre"><font face="Arial, Verdana" size="2"></font></span></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>if (weakness.Applicable_Platforms.isNull() || weakness.Applicable_Platforms.Languages.isNull())<span class="x_Apple-tab-span" style="white-space:pre">
</span></font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>cweWeakness.Technology = &quot;NA&quot;;<span class="x_Apple-tab-span" style="white-space:pre">
</span></font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>else</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>{&nbsp;</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>//return weakness;</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>var languages = weakness.Applicable_Platforms.Languages;</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>if (languages.Language_Class.size() &gt;0)</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>cweWeakness.Technology = languages.Language_Class[0].Language_Class_Description;</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>else</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>cweWeakness.Technology = languages.Language[0].Language_Name;</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>}</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>//cweWeakness.Phase = weakness.Causal_Nature;</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>//if (cweWeakness.Phase.inValid())</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>//return weakness;</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>cweWeakness.Title = &quot;CWE:{0} - {1}&quot;.format(weakness.ID, weakness.Name);</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>&nbsp;</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>cweWeakness.Phase = (weakness.Time_of_Introduction.isNull())</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>? &quot;&quot;</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>: weakness.Time_of_Introduction.Introductory_Phase.toList().join(&quot;,&quot;);</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>//&quot;phase: {0}&quot;.info(cweWeakness.Phase);<span class="x_Apple-tab-span" style="white-space:pre">
</span></font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>cweWeakness.Type = weakness.Status;</font></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>cweWeakness.Category = &quot;CWE&quot;;</font></div>
<div><span class="x_Apple-tab-span" style="white-space:pre"><font face="Arial, Verdana" size="2"></font></span></div>
<div><font face="Arial, Verdana" size="2"><span class="x_Apple-tab-span" style="white-space:pre"></span>cweData.Weaknesses.Add(cweWeakness);</font></div>
<div><span class="x_Apple-tab-span" style="white-space:pre"><font face="Arial, Verdana" size="2"></font></span></div>
<div><font face="Arial, Verdana" size="2">}</font></div>
<div><font face="Arial, Verdana" size="2">cweData.saveAs(targetFile);</font></div>
<div><font face="Arial, Verdana" size="2"><br>
</font></div>
<div><font face="Arial, Verdana" size="2"><br>
</font></div>
<div><font face="Arial, Verdana" size="2">return cweData.Weaknesses.size();</font></div>
<div><font face="Arial, Verdana" size="2"><br>
</font></div>
<div><font face="Arial, Verdana" size="2"><br>
</font></div>
<div><font face="Arial, Verdana" size="2"><br>
</font></div>
<div><font face="Arial, Verdana" size="2">//O2File:CWE_Data.cs</font></div>
<div><font face="Arial, Verdana" size="2">//O2File:cwe_schema_v5.1.cs</font></div>
<div><font face="Arial, Verdana" size="2">//O2Ref:O2_Misc_Microsoft_MPL_Libs.dll</font></div>
</div>
<div><font face="Arial, Verdana" size="2"><br>
</font></div>
<div><font face="Arial, Verdana" size="2"><br>
</font></div>
<h2><font face="Arial, Verdana" size="2">File 2</font></h2>
<div><font face="Arial, Verdana" size="2"><br>
</font></div>
<div><font face="Arial, Verdana" size="2">
<div>var topPanel = panel.clear().add_Panel(); &nbsp;&nbsp;</div>
<div>var tmSite= &quot;http://localhost.:12348&quot;;</div>
<div>//tmSite = &quot;http://localhost.:12347&quot;;</div>
<div>//tmSite = &quot;http://localhost.:3186&quot;; &nbsp;&nbsp;</div>
<div>tmSite = &quot;http://50.19.221.68:92&quot;;</div>
<div>var libraryName = &quot;CWE Library&quot;;</div>
<div><br>
</div>
<div>var tmWebServices = new API_TeamMentor_WebServices(tmSite); &nbsp; &nbsp; &nbsp;</div>
<div><br>
</div>
<div>tmWebServices.login(&quot;admin&quot;,&quot;!!tmbeta&quot;).str();</div>
<div>&nbsp; &nbsp;</div>
<div>var library = tmWebServices.library(libraryName)</div>
<div><span class="x_Apple-tab-span" style="white-space:pre"></span>.delete()</div>
<div><span class="x_Apple-tab-span" style="white-space:pre"></span>.library(libraryName);&nbsp;</div>
<div>&nbsp;</div>
<div>var targetFile = @&quot;C:\O2\_tempDir\2-28-2012\cweData.xml&quot;; &nbsp;</div>
<div>var cweData = targetFile.load&lt;CWE_Data&gt;();</div>
<div>&nbsp;</div>
<div>var folderName = &quot;Weakness Folder&quot;;&nbsp;</div>
<div>var viewName = &quot;Weakness&quot;; &nbsp;</div>
<div><br>
</div>
<div>var view = library.folder(folderName)</div>
<div><span class="x_Apple-tab-span" style="white-space:pre"></span>&nbsp;<span class="x_Apple-tab-span" style="white-space:pre">
</span>&nbsp;.view(viewName); &nbsp;</div>
<div>&nbsp;</div>
<div>var max = 1000; &nbsp;</div>
<div>var itemsAddded = 0;</div>
<div>var o2Timer = new O2Timer(&quot;created {0} in &quot;.format(max)).start();&nbsp;</div>
<div><br>
</div>
<div>foreach(var weakness in cweData.Weaknesses)</div>
<div>{ <span class="x_Apple-tab-span" style="white-space:pre"></span></div>
<div><span class="x_Apple-tab-span" style="white-space:pre"></span>var title = weakness.Title; &nbsp;&nbsp;</div>
<div><span class="x_Apple-tab-span" style="white-space:pre"></span>var content = weakness.Content;</div>
<div><span class="x_Apple-tab-span" style="white-space:pre"></span>var technology = weakness.Technology;</div>
<div><span class="x_Apple-tab-span" style="white-space:pre"></span>var phase = weakness.Phase;&nbsp;</div>
<div><span class="x_Apple-tab-span" style="white-space:pre"></span>var type = weakness.Type; &nbsp;&nbsp;</div>
<div><span class="x_Apple-tab-span" style="white-space:pre"></span>var category = weakness.Category; &nbsp;&nbsp;</div>
<div><span class="x_Apple-tab-span" style="white-space:pre"></span></div>
<div><span class="x_Apple-tab-span" style="white-space:pre"></span>view.add_Article(title, content, technology, phase, type, category);</div>
<div><span class="x_Apple-tab-span" style="white-space:pre"></span></div>
<div><span class="x_Apple-tab-span" style="white-space:pre"></span>if (itemsAddded&#43;&#43; % 10 == 0)&nbsp;</div>
<div><span class="x_Apple-tab-span" style="white-space:pre"></span>&quot;[{0}/{1}] - {2}&quot;.info(itemsAddded, cweData.Weaknesses.size(), title);</div>
<div><span class="x_Apple-tab-span" style="white-space:pre"></span>if (itemsAddded &gt; max)</div>
<div><span class="x_Apple-tab-span" style="white-space:pre"></span>break;</div>
<div>}</div>
<div>&nbsp;o2Timer.stop();</div>
<div>return view.articles();</div>
<div>&nbsp;</div>
<div>//O2File:CWE_Data.cs &nbsp;</div>
<div>//O2File:API_TeamMentor_WebServices.cs</div>
<div>//using SecurityInnovation.TeamMentor</div>
<div><br>
</div>
<div>//O2Ref:System.Web.Services.dll</div>
<div>//O2Ref:O2_Misc_Microsoft_MPL_Libs.dll</div>
<div><br>
</div>
<div>//O2Tag_DontAddExtraO2Files</div>
</font></div>
<div style="font-family:Arial,Verdana; font-size:10pt; font-style:normal; font-variant:normal; font-weight:normal; line-height:normal">
<br>
</div>
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>00000000-0000-0000-0000-000000982619</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Linking Articles in WikiText</Title>
      <Category>Editing</Category>
      <Phase>NA</Phase>
      <Technology>TeamMentor</Technology>
      <Type>Documentation</Type>
      <DirectLink>Linking Articles in WikiText</DirectLink>
      <Author />
      <Priority />
      <Status />
    </Metadata>
    <Content Sanitized="false" DataType="WikiText">
      <Data><![CDATA[=Linking using GUID=
\\
==Synopsis:==

**URL Access:**

{{/Image/wikilinks-img1.jpg}} 

**WikiText Link:**

{{/Image/wikilinks-img2.jpg}} 

==Description:==
Team Mentor supports a number of methods to insert links to other articles. It is important to note that all articles are associated internally with GUIDs (Global Unique Identifiers).  Therefore the simplest way of accessing an article is by:
{{{
http://tm.mycompany.com/article/8b8b0ec3-7ad7-4c0f-bcaf-ce30b56b4e50
}}}


Team Mentor supports standard WikiText notation for links. The title of this example article above happens to be “Assume All Input Is Malicious”. Linking to this article from WikiText would look something like this:
{{{
==Related Items==
Please see [[http://tm.mycompany.com/article/8b8b0ec3-7ad7-4c0f-bcaf-ce30b56b4e50|Assume All Input Is Malicious]] for additional information.
}}}

Note that in all links, "//http:~/~/tm.mycompany.com~/article//" prefix is necessary only if you are linking to content hosted on a different system, for example "//http:~/~/tmnew.mysistercompany.com~/article~/8b8b0ec3-7ad7-4c0f-bcaf-ce30b56b4e50//". If all content is hosted on a single system it is acceptable to omit the "//http:~/~/tm.mycompany.com~/article prefix//". This looks like:

{{{
==Related Items==
Please see [[8b8b0ec3-7ad7-4c0f-bcaf-ce30b56b4e50|Assume All Input Is Malicious]] for additional information.
}}}

The //“|”//symbol is used to separate the actual link from the description that is seen by the reader. The links above would look to the reader like:

{{/Image/wikilinks-img3.jpg}} 

In WikiText notation it is possible to omit the description seen by the reader (the //“|”// symbol and anything following it. In this case the link in WikiText would look like:

{{{
==Related Items==
Please see [[8b8b0ec3-7ad7-4c0f-bcaf-ce30b56b4e50]] for additional information.
}}}

The link will still work and the reader would see: 

{{/Image/wikilinks-img4.jpg}}

=Linking using Title=
\\
==Synopsis:==

**URL Access:**

{{/Image/wikilinks-img5.jpg}}
 
**WikiText Links:**

{{/Image/wikilinks-img6.jpg}} 

==Description:==
Linking to existing articles using GUID is not always practical or manageable. Team Mentor supports access to articles using the article Title. 
{{{
http://tm.mycompany.com/article/Assume All Input Is Malicious
}}}
Note: spaces are OK in the title name and resulting URL as browser automatically converts space to %20 for link to look like: 
{{{
http://tm.mycompany.com /article/Assume%20All%20Input%20Is%20Malicious.
}}}

Linking to this article from WikiText would look something like:
{{{
==Related Items==
Please see [[Assume All Input Is Malicious|Assume All Input Is Malicious]] for additional information.
}}}

Or the shorter form: 

{{{
==Related Items==
Please see [[Assume All Input Is Malicious]] for additional information.
}}}
\\
==Same Title Articles:==
Team Mentor allows having multiple articles with the same title. For example two different articles with the title: //“Deny All Access by Default”// exist, one in Java and one in .NET 4.0 libraries.

Articles with the same name can also exist in the same library but associated with different Technology, Phase, Type or Category. For example in the Java library there are 2 articles with the title //“Back Up And Analyze Log Files Regularly”//.  One applies to //“Web Application”// technology, //“Design”// phase, is a //“Principle”// type, and is in //“Auditing and Logging”// category. The other applies to //“Any”// technology, //“Design”// phase, is a //“Guideline”// type, and is in the //“Auditing and Logging”// category. 

Team Mentor allows to specify which Library the article should be retrieved from as well as to drill down on which Technology, Phase, Type or Category the article should belong to. 
Use the “^” separator after the title to specify the Library, Technology, Phase, Type or Category.  It is acceptable to omit the more granular identifications of the article if no duplicates exist. For example:
To access the article “Deny All Access by Default” from the Java library use:
{{{
http://tm.mycompany.com/article/Deny All Access by Default^java
}}}
{{{
Linking to this article from WikiText would look like:
==Related Items==
Please see [[Deny All Access by Default^java|Assume All Input Is Malicious]] for additional information.
}}}
To access the article //“Back Up And Analyze Log Files Regularly”// from the Java library, that is a //"Guideline"// and applies to the //“Web Application”// technology use:
{{{
http://tm.mycompany.com/article/Back Up And Analyze Log Files Regularly^java^web application^design^guideline
}}}

Linking to this article from WikiText would look like:
{{{
==Related Items==
Please see [[Back Up And Analyze Log Files Regularly^java^web application^design^guideline|Back Up And Analyze Log Files Regularly]] for additional information.
}}}
Please note, that category //"Any"// has an implicit space in front of it. Therefore accessing //“Back Up And Analyze Log Files Regularly”// that is in the //"Java"// library and applies to //"Any"// technology using: 
{{{
 [[Back Up And Analyze Log Files Regularly^java^Any|Back Up And Analyze Log Files Regularly]]
}}}
will fail. To properly specify articles with //"Any"// in the //"Technology"// field put a space before //"Any"//. This way will work:
{{{
 [[Back Up And Analyze Log Files Regularly^java^ Any|Back Up And Analyze Log Files Regularly]]
}}}
Note the space between //"^"// and //"Any"//]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>0335cbcd-9f38-4db6-8265-8588d9467646</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>TeamMentor Release Checklist</Title>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[Checklist for TeamMentor Releases

**Before final sign-off from QA**
* Update GitHub site
* Update Test Servers

**After final sign-off**
* Upload Zip-files to download GitHub site
* Update live servers
* Migrate user accounts]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>0c8ba335-dc29-4117-8e13-299b725e922a</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Case Study - Creating a PCI Library from other Libraries</Title>
      <Category />
      <Phase />
      <Technology />
      <Type />
      <DirectLink>Case Study - Creating a PCI Library from other Libraries</DirectLink>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[This article will show how to transfer content from one TeamMentor Library into another using scripts that consume the available WebServices API

**Requirements**: Windows with .NET 4.0, [[https://github.com/o2platform/O2_Install | O2 Platform]], [[https://github.com/TeamMentor/UnitTests | TeamMentor Unit Tests]] GitHub Repository

===Creating PCI Library from other Libraries===
This script will create a TeamMentor library called "PCI DSS Compliance" with a view per PCI DSS area

{{{

var topPanel = panel.clear().add_Panel();
//var tm_Source = new API_TeamMentor_WebServices("http://tm-pci-dss.apphb.com");

var tm_Source = new API_TeamMentor_WebServices("http://127.0.0.1:12201");
var tm_Target = new API_TeamMentor_WebServices("http://127.0.0.1:12200"); 
tm_Source.login("reader", readerPwd);
tm_Target.login("admin",adminPwd);

var pciAny_Library = tm_Target.library("PCI - Any Technology");
var pciLibrary = tm_Source.library("PCI DSS Compliance");

foreach(var library in tm_Source.libraries())
{
	var pciAny_folder = pciAny_Library.folder(library.Name);
	foreach(var folder in library.folders())
	{	
		"creating folder: {0}".info(folder.Name);
		var pciAny_View = pciAny_folder.view(folder.Name);
		var filteredArticles = new Dictionary&lt; string, Article_WS&gt;();
		foreach(var article in folder.articles())
		if (article.Technology == " Any")
			filteredArticles.add(article.Name, article);
		foreach(var article in filteredArticles.Values)
			pciAny_View.add_Article(article);
	}
	//return folder;
}

return "ok";
//using SecurityInnovation.TeamMentor
//O2File:..\TeamMentor_UnitTests\APIs\API_TeamMentor_WebServices.cs

}}}
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>14b9105d-68d6-4865-8b9e-84eebc33a9a5</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Dinis_Tests</Title>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[this is a [[new page]]]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>1da6050d-3521-4c13-93c2-49ce93b8583f</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Case Study - Direct XML File Manipulation to Fix Double Encoding Issue</Title>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[This Script shows how the Article's XML file can be edited directly (useful for large/batch changes/fixes).

In this case there was a double encoding issue on the Article's Schema update from version 3.0 to 3.1


===Fixing the Double Encode issue in one file===
{{{
var topPanel = panel.clear().add_Panel();
var sourceFiles = @"C:\_WorkDir\TeamMentor\TM - Libraries\SI_Library\Java\Java";

var target = @"...\TeamMentor\TM - Libraries\SI_Library\Java\Java\Checklist Item\c88e1b49-357d-4202-aafc-86ce0de485bd.xml";

topPanel.add_SourceCodeViewer()
		.open(target);
						
var tmArticle = target.load< TeamMentor_Article>();
tmArticle.Content.Data.Value = tmArticle.Content.Data.Value.replace("&","&");
tmArticle.saveAs(target);
 
return target;
//using SecurityInnovation.TeamMentor.WebClient
//O2File:...\Web Applications\TeamMentor.CoreLib\TM_AppCode\Schemas\TeamMentor_Article.cs
}}}

===Fixing the double encoding for all files===
{{{
var topPanel = panel.clear().add_Panel();
var sourceFiles = @"C:\_WorkDir\TeamMentor\TM - Libraries\SI_Library";

foreach (var file in sourceFiles.files("*.xml",true))
{	
	if(file.fileName_WithoutExtension().isGuid().isFalse())
		continue;
	var tmArticle = file.load< TeamMentor_Article>();
	if (tmArticle.Content.Data.Value.contains("&"))
	{
		"fixing: {0}".debug(file);	
		tmArticle.Content.Data.Value = tmArticle.Content.Data.Value.replace("&","&");
		tmArticle.saveAs(file);
	}
	else
		"Skipping: {0}".info(file);	
  } 

//using SecurityInnovation.TeamMentor.WebClient
//O2File:...\Web Applications\TeamMentor.CoreLib\TM_AppCode\Schemas\TeamMentor_Article.cs
}}}

===Upgrading 1 file from 3.0 schema to 3.1===
{{{
var target = @"...\TeamMentor\TM - Libraries\SI_Library\Java\Java\Code Example\18ac74df-602b-4a58-8998-52f638f3a045.xml";
return target.load< Guidance_Item_Import>().transform().saveAs(target);
}}}

]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>29ea4f8a-7761-4fb3-8745-bf23b9f6a580</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Research Areas</Title>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[Find out the root-cause for
* IE layout problems in http://docs.teammentor.net/xml/Eval
* Why 'Back' button doesn't work in the breadcrumbs mode ]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>2b6088c7-d5ea-4ce3-94d8-2be9c2f7d045</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>KnowledgeBase Articles</Title>
    </Metadata>
    <Content Sanitized="false" DataType="Html">
      <Data><![CDATA[List of TeamMentor Related KnowledgeBase Articles

* [[TM 0001 - aaaaaa]]]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>2d4ea170-b4e1-41c4-9710-02f8345ac820</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Content Research</Title>
      <Category />
      <Phase />
      <Technology />
      <Type />
      <DirectLink>Content Research</DirectLink>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[This page contains links to TM articles currently under development

* [[How to automatically redirect from HTTP to HTTPS in ASP.Net]]]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>31f1db88-d20b-4538-9624-848668914147</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>TeamMentor Artifacts</Title>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[==Definitions==

* Library

* Folder

* View

* Article


==FAQ== 
* What is an  "Attack" article? 

This is an article that describes what an attack is, how it is carried out, and often provides an example of an attack. This is the most basic type of guidance in TeamMentor. You will frequently find links to more advanced (and related) articles at the bottom of an Attack article. 

* How is it different from a "Guideline"? 

*What is a "Checklist" article? etc.]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>32a7e94c-5a14-4619-82aa-be368502f0dc</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Case Study - Fix Duplicate Article GUIDs created by Library split</Title>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[This article shows a script that was used on the 3.0 release to fix the 'duplicate libraries issue' found after importing multiple libraries that have multiple Article with the same GUID.

The first code samples show how to access the WebServices via the C# file created from the WebServices WSDL

===Get guidanceItems and list them on a treeview===
{{{
var tmWebServices = new TM_WebServices();

var libraryName = ".NET 3.5";

var library = tmWebServices.GetLibraryByName(libraryName);
var guidanceItems = tmWebServices.GetGuidanceItemsInLibrary(library.id.guid());

var mappedItems = new Dictionary< string, List< TM_GuidanceItem>>();

foreach(var guidanceItem in guidanceItems)
	mappedItems.add(guidanceItem.Title, guidanceItem);
	
var treeView = panel.clear().add_TreeView_with_PropertyGrid(false).sort();
foreach(var mappedItem in mappedItems)
	treeView.add_Node(mappedItem.Key)
			 .add_Nodes(mappedItem.Value);
	
//return mappedItems;

//using O2.SecurityInnovation.TeamMentor
//O2File:TM_WebServices.cs
//O2File:Test_TM_Config.cs
//O2Ref:System.Web.Services.dll
}}}

===Get all views that belong a particular library===
{{{
var tmWebServices = new TM_WebServices();

var libraryName = ".NET 3.5";
var libraryId = "92718d53-36b2-47bc-b6f5-e60994385f46".guid();
 
var library = tmWebServices.GetLibraryByName(libraryName);

var guidanceItems = tmWebServices.GetGuidanceItemsInLibrary(library.id.guid());

var views = tmWebServices.GetAllViews();
var viewsByLibrary = new Dictionary< Guid,List< View_V3>>();
foreach(var view in views)
	viewsByLibrary.add(view.libraryId, view);

return viewsByLibrary[libraryId];

//using O2.SecurityInnovation.TeamMentor
//O2File:TM_WebServices.cs
//O2File:Test_TM_Config.cs
//O2Ref:System.Web.Services.dll
}}}

===Complete script (to fix duplicate GUIDs===
{{{
var tmWebServices = new TM_WebServices();

Action< string,string> login_as_user = 
	(username, passwordHash)=>{		
					tmWebServices.CookieContainer = new System.Net.CookieContainer();
					tmWebServices.Url 			 = Test_TM.tmWebServices;															
					var sessionID  				 =  tmWebServices.Login(username, passwordHash);
				};

login_as_user("editor", Test_TM.passwordHash_Editor);    


//var libraryName = ".NET 3.5";
//var libraryId = "92718d53-36b2-47bc-b6f5-e60994385f46".guid();
 
//var library = tmWebServices.GetLibraryByName(libraryName);

var views = tmWebServices.GetAllViews();
var viewsByLibrary = new Dictionary< Guid,List< View_V3>>();
foreach(var view in views)
	viewsByLibrary.add(view.libraryId, view);

foreach(var library in tmWebServices.GetLibraries())
{
	"> Mapping Library: {0} ".info(library.Caption);	
	
	var guidanceItemsInLibrary = tmWebServices.GetGuidanceItemsInLibrary(library.Id).toList(); 
	
	var guidanceItemsById = new Dictionary< Guid,TM_GuidanceItem>();
	foreach(var guidanceItem in guidanceItemsInLibrary)
		guidanceItemsById.Add(guidanceItem.Id,guidanceItem);
	
	var guidanceItems_Original_ById = new Dictionary< Guid,Guid>();
	foreach(var guidanceItem in guidanceItemsInLibrary)
		if (guidanceItem.Id_Original != Guid.Empty)
			guidanceItems_Original_ById.Add(guidanceItem.Id_Original,guidanceItem.Id); 
	
	var viewsInLibrary = viewsByLibrary[library.Id]; 
	
	foreach(var viewInLibrary in  viewsInLibrary)
	{
		"Mapping view: {0} ".info(viewInLibrary.caption);	
		
		var guidanceItemsToAdd = new List< Guid>();
		var guidanceItemsToRemove = new List< Guid>();
		
		foreach(var guid in viewInLibrary.guidanceItems.toList())
			if(guidanceItemsById.hasKey(guid).isFalse())		
			{
				if (guidanceItems_Original_ById.hasKey(guid))
				{
					var originalGuid = guidanceItems_Original_ById[guid];
		//			"***** guidanceItem OK via Original found: {0} -> {1}".debug(guid, originalGuid);
					guidanceItemsToAdd.Add(originalGuid);
					guidanceItemsToRemove.Add(guid);			
				}
				else 
		
					"******guidanceItem not found: {0}".error(guid);
			}
			
		if (guidanceItemsToAdd.size() > 0)
		{
			var result1 = tmWebServices.RemoveGuidanceItemsFromView(	viewInLibrary.viewId, guidanceItemsToRemove.ToArray());
			var result2 = tmWebServices.AddGuidanceItemsToView(	viewInLibrary.viewId, guidanceItemsToAdd.ToArray()); 	 
			"   save result: {0} , {1} , removed: {2}, added: {3}".debug(result1, result2, guidanceItemsToRemove.size(), guidanceItemsToAdd.size());
		}
	}	
 }
 return "all Done";

//using O2.SecurityInnovation.TeamMentor
//O2File:TM_WebServices.cs
//O2File:Test_TM_Config.cs
//O2Ref:System.Web.Services.dll
}}}

]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>36778567-966a-4b86-9952-8bb984d384f6</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>How to - Control TeamMentor via IE Automation</Title>
      <Category />
      <Phase />
      <Technology />
      <Type />
      <DirectLink>How to - Control TeamMentor via IE Automation</DirectLink>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[It is also possible to control the TeamMentor Web Interface from via IE Automation (in this case using O2's WatiN support)


===Consuming TM API from the IE===
{{{
var ie = "ie_HJYAB".o2Cache&lt; WatiN_IE&gt;(()=&gt; panel.clear().add_IE()).silent(true)
Test_TM.tmServer = "http://127.0.0.1:3187/"; 
var teamMentor = new API_TeamMentor_IE(ie); 
teamMentor.login("admin",adminPwd);

//using SecurityInnovation.TeamMentor
//O2File:.._TeamMentor\TeamMentor-UnitTests\APIs\API_TeamMentor_IE.cs
//O2File:WatiN_IE_ExtensionMethods.cs 
//O2Ref:WatiN.Core.1x.dll
}}}

===Login in via the edit url===
{{{
Test_TM.tmServer = "http://127.0.0.1:3187/"; 
var teamMentor = new API_TeamMentor_IE(ie);
teamMentor.open("/logout");
teamMentor.open("/edit/asd");
ie.waitForLink("login").click();
ie.waitForField("UsernameBox").value(username);
ie.field("PasswordBox").value(password);
ie.button("login").click();
}}}]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>4c2c621d-40c4-4305-a817-4e69985c2c1b</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>TeamMentor with Text Support</Title>
      <Category />
      <Phase />
      <Technology />
      <Type />
      <DirectLink>TeamMentor with Text Support</DirectLink>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[test<div><br></div><div>this is another test</div>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>4d72e436-f295-4a54-b1a8-0a69d087c952</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>WikiText Support</Title>
      <Category>Editor</Category>
      <Phase>Content</Phase>
      <Technology>TeamMentor</Technology>
      <Type>WiiText</Type>
      <DirectLink>WikiText Support</DirectLink>
    </Metadata>
    <Content Sanitized="false" DataType="html">
      <Data><![CDATA[It is possible to use WikiText instead of HTML for the Article's content.<div><br /></div><div>The version used is the one from&amp;nbsp;<a style="font-size: 10pt; " href="http://www.wikicreole.org/" target="_blank">http://www.wikicreole.org/</a>&amp;nbsp; and the parsing is done using this <a href="https://github.com/codeholic/jscreole" target="_blank">jsCreole Javascript API</a></div><div><br /></div><div>See this <a href="http://www.wikicreole.org/wiki/CheatSheet">CheatSheet </a>to see the syntax available</div><div><br /></div><div>As an example look at the code of the <a href="/notepad/Table_of_Contents">Table of Contents</a> page</div>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>4f236f52-24f7-46a0-a8bd-09789baa8a43</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>How to - Upload Files or Images</Title>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[This article shows how to programatically uploading files or images to an TeamMentor instance via its WebServices

**Requirements**: Windows with .NET 4.0, [[https://github.com/o2platform/O2_Install | O2 Platform]], [[https://github.com/TeamMentor/UnitTests | TeamMentor Unit Tests]] GitHub Repository

===Config target TM instance===
{{{
var teamMentor = new API_TeamMentor_WebServices("localhost",3187);
return teamMentor.ping(); 

//using SecurityInnovation.TeamMentor
//O2File:...l\_TeamMentor\TeamMentor-UnitTests\APIs\API_TeamMentor_WebServices.cs
//O2Ref:System.Web.Services.dll
}}}

===Login ===
{{{
var adminPwd = "*****";
var teamMentor = new API_TeamMentor_WebServices("localhost",3187);
teamMentor.login("admin",adminPwd);
return teamMentor.loggedIn();
}}}

===Get Upload Token===
{{{
var teamMentor = new API_TeamMentor_WebServices("localhost",3187);
teamMentor.login("admin",adminPwd);
var uploadToken = teamMentor.webServices.GetUploadToken();
return uploadToken.str();
}}}

===Upload/create a text file===
{{{
var teamMentor = new API_TeamMentor_WebServices("localhost.",3187);
teamMentor.login("admin",adminPwd);

var uploadToken = teamMentor.webServices.GetUploadToken();
var targetFile = "filename.txt";
var fileContents = "This is the file contents";

var requestParams = "/Aspx_Pages/File_Upload.ashx?uploadToken={0}&qqfile={1}".format(uploadToken, targetFile);
var uploadHandler = teamMentor.WebSite_Url.append(requestParams);

return uploadHandler.POST(fileContents);
}}}

===Uploading an Image===
{{{
var teamMentor = new API_TeamMentor_WebServices("localhost.",3187);
teamMentor.login("admin",adminPwd); 

var uploadToken = teamMentor.webServices.GetUploadToken(); 
var targetFile = "O2_Logo.gif";
var fileContents = targetFile.local().fileContents_AsByteArray();

var requestParams = "/Aspx_Pages/File_Upload.ashx?uploadToken={0}&qqfile={1}".format(uploadToken, targetFile);
var uploadHandler = teamMentor.WebSite_Url.append(requestParams);

return uploadHandler.POST(fileContents);

return uploadToken.str();
}}}

===Simpler version of upload file===
{{{
var teamMentor = new API_TeamMentor_WebServices("localhost.",3187);
teamMentor.login("admin",adminPwd); 

var targetFile = "O2_Logo.gif";
var fileContents = targetFile.local().fileContents_AsByteArray();
			
return teamMentor.uploadFile(targetFile, fileContents);
}}}

===Upload files that can then be retrieved via urls===
{{{
var teamMentor = new API_TeamMentor_WebServices("localhost.",3187);
teamMentor.login("admin",adminPwd); 
 
var filename = "O2_Logo.gif";
var fileContents = filename.local().fileContents_AsByteArray();			
var libraryId = "daa1ebc4-d488-46ba-81cf-32e280b5d885".guid();

return teamMentor.webServices.Upload_File_To_Library(libraryId ,filename , fileContents );
}}}

===Upload to a specific directory===
{{{
var teamMentor = new API_TeamMentor_WebServices("localhost.",3187);
teamMentor.login("admin",adminPwd); 
 
var filename = "O2_Logo.gif";
var fileContents = filename.local().fileContents_AsByteArray();			

var library = teamMentor.library("OWASP");

teamMentor.webServices.Upload_File_To_Library(library.Id ,filename , fileContents );

var imageUrl = teamMentor.WebSite_Url.append("/Image/{0}/{1}".format(library.Id, filename));
}}}

===Uploading an Image and viewing it===
{{{
var teamMentor = new API_TeamMentor_WebServices("localhost.",3187);
teamMentor.login("admin",adminPwd); 
 
var filename = "O2_Logo.gif";
var fileContents = filename.local().fileContents_AsByteArray();			
var libraryId = "daa1ebc4-d488-46ba-81cf-32e280b5d885".guid();

teamMentor.webServices.Upload_File_To_Library(libraryId ,filename , fileContents );

var imageUrl = teamMentor.WebSite_Url.append("/Image/{0}/{1}".format(libraryId, filename));
panel.clear().add_WebBrowser_Control().open(imageUrl.str());

return imageUrl;
}}}

===Uploading an image from the Clipboard===
{{{
var teamMentor = new API_TeamMentor_WebServices("localhost.",3187);
teamMentor.login("admin",adminPwd); 
 
var tmpFolder= "_tmpImages".tempDir();

var image = tmpFolder.saveImageFromClipboardToFolder(); 

var filename = image.fileName();
var fileContents = image.fileContents_AsByteArray();			

var library = teamMentor.library("OWASP");

teamMentor.webServices.Upload_File_To_Library(library.Id ,filename , fileContents );

var imageUrl = teamMentor.WebSite_Url.append("/Image/{0}/{1}".format(library.Id, filename));
panel.clear().add_WebBrowser_Control().open(imageUrl.str());
}}}
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>5d82524c-3414-4c4a-a71c-5304ac8ff3d8</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>QA Action Plan</Title>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[This is the current TeamMentor testing/QA plan:

*for a number of TM repositories  (TM +SI , TM +OWASP, TM + TM Docs, TM + AD Support  )
** download, run locally, run on IIS, open in Visual Studio, run from Visual Studio (using .git distribution)
** run through the scenarios in [[User Scenario Matrix]]
** run available Unit Test (both .NET and JS)
** create a custom Library based on test content (via GUI)
** create a custom Library using the WebServices Interfaces and TM APIs      
** create a custom version of TM's GUI (change logos, add extra text, etc..)

* Update/Improve [[User Scenario Matrix]] as much as possible
** Review TM Documentation: http:docs.teammentor.net (update/improve them as much as possible)
** Perform Security review on TM WebServices and TM GUI Javascripts
** Provide recommendations on TM usability and customizability]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>5de001d7-8c21-487d-b7ab-7fd19345aac3</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>TM SourceCode</Title>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[TeamMentor uses [[http://git-scm.com/ | Git]] and [[https://github.com | GitHub]] as its Source-Code Version system/solution.

The latest version of TeamMentor is available on the public GitHub repositories of TeamMentor. There are a number of private repositories (forked from the public ones) that are used for the main TeamMentor customer release and its multiple customizations.

===Test/Eval version===
If you are looking to test or evaluate team mentor and just want to get your hands on its code, then grab a clone/fork of one of these repositories:

* [[https://github.com/TeamMentor-Owasp/Master]] - Latest stable release with OWASP Library
* [[https://github.com/TeamMentor/TeamMentor-Documentation]] - Latest stable release with TeamMentor's documentation library (i.e. this website)

===Development version===
If you want the latest development version this is the one to clone:

* [[https://github.com/DinisCruz/TeamMentor-3.0-Release]]

===Master version===
If you want to fork TeamMentor and manage your own libraries, the best one to use is the Master version:
* [[https://github.com/TeamMentor/Master]]
Note that it is this version that the other TeamMentor Forks use. New versions will always be pushed here, and then pulled into the other repositories (like the TeamMentor+SI_Library , TeamMentor+OWASP or TeamMentor+Documentation)

==Bug tracking==
The current list of Bugs/Issues is at  [[https://github.com/TeamMentor/Master/issues]] (note that there is a large number of issues still need to be moved from the legacy repository: [[https://github.com/DinisCruz/TeamMentor-v3.0/issues]])]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>630fe1e1-9f65-4f36-9161-1c792cc26659</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>User Scenario Matrix</Title>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[===TeamMentor 3.1 User Scenarios===

* **UI/General (Universal)**
** GUI Rendering is created using jQuery
** UI/Navigation Page (Main Page)				
** User can collapse and expand folders
** User can click on folder to see all items in views under folder
** User can view sub-folders with items (work the same as parent folders e.g. expand/collapse and viewing sub-items)
** Users can collapse the article preview pane to save space
** Users can search from the navigation page
** Editors can create new articles
** Editors can create new views
** An editor can create a new library and copy items to it
** Editors can edit views
** Editors can edit libraries
** Editors can delete items

* **Article View** 
** Users can view articles in a new tab/window

* **Article Edit** 
** Editors can edit articles on-line
** Editors can make links between articles
** Editors can view a history of changes
** Editors can delete articles from the article view
** Edit capabilities:
*** Change Title
*** Change Metadata
*** Add Image
*** Format Html Content (via WYSIWYG)
*** Format Html Content (via HTML editing)

* **UI/Control Panel (Dashboard)**
** Users can see version information
** Admin can open a control panel/dashboard
** Admin can edit user accounts
** Admin can set and change user passwords
** Admin can create a normal user
** Admin can create an editor user
** Admin can create an admin user
** Admin can open a page for creating multiple accounts
** Admin can paste information from csv into a page for creating multiple accounts
** Admin can delete user accounts

* **UI/Advanced Search**
** Search for Articles by Title
** Searching the Body of the Articles

* **Authentication**
** Users can login as normal users
** Users can login as editor users
** Users can login as admin users
** Users have to be authenticated to view content
** Users have to be authenticated to make changes to content
** Users can authenticate using LDAP/AD
** Users can log out

* **Authorization	**
** Users can view articles
** Only editors can edit items
** Only admins can edit items and system settings

* **TM Deployment**
** The customer can roll out libraries as XML files
** The customer can roll out user credential stores as XML files
** The customer can update libraries by updating the XML files
** The customer can update application code without disturbing the libraries, the settings, and the credential store
** Editors can edit articles in the XML files
** Administrators can run a tool to update content that automatically resolves collisions
** GitHub Users can trigger Syncs from web

* **Past Issues/Bugs**
** Check for double encoding text

]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>68f667ab-29fa-4fa3-8d00-542d880d7e73</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Creating Library, Folder, Views and Articles</Title>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[The TeamMentor client API provides a simple way to create Libraries, Folders, Views and Articles

The API_TeamMentor_Local.cs is a C# file that simplifies the consumption of TeamMentor WebServices (for example it automates the set-up of the CSRF token and provides a fluent API to TeamMentor exposed Web Methods)

**Requirements**: Windows with .NET 4.0, [[https://github.com/o2platform/O2_Install | O2 Platform]], [[https://github.com/TeamMentor/UnitTests | TeamMentor Unit Tests]] GitHub Repository

===Get libraries list:===
{{{
var tmLocal = new API_TeamMentor_Local(); 
return tmLocal.libraries();
}}}

===get Library details (using name)===
{{{
var tmLocal = new API_TeamMentor_Local(); 
return tmLocal.library("OWASP");  
}}}

===get Library details (using GUID)===
{{{
var tmLocal = new API_TeamMentor_Local(); 
return tmLocal.library("4738d445-bc9b-456c-8b35-a35057596c16".guid());  
}}}

===Get Library's Folders===
{{{
var tmLocal = new API_TeamMentor_Local(); 
var library = tmLocal.library("OWASP");  
var folders = library.folders();
return folders;
}}}

===get folder views:===
{{{
var tmLocal = new API_TeamMentor_Local(); 
var library = tmLocal.library("OWASP");  
var folders = library.folders();
return folders[0].views();
}}}

===Get folder and view by name===
{{{
var library = tmLocal.library("OWASP");   
var folders = library.folders();    
var folder = library.folder("OWASP Top 10 -  2010"); 
return folder.view("A01: Injection");
}}}

===Get articles:===
{{{
var library = tmLocal.library("OWASP");    
var folder = library.folder("OWASP Top 10 -  2010");   
return folder.view("A01: Injection").Articles;
}}}]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>6c3b1f1b-fe70-441a-be4d-23c9b5426f33</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Unit Tests</Title>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[There are a number of TeamMentor UnitTests which cover a wide range of use cases.

The Javascript/QUnit tests are part of TM source code and can be accessed via the 'extra' features of the control panel (available if you go to [[http://{tm server}/admin_extra]] )

The C#/NUnit based unit tests are hosted on this GitHub Repository: https://github.com/TeamMentor/UnitTests (the helper tools need the [[http://o2platform.com | O2 Platform.com]] to run]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>6e3221bf-08b8-4de1-bb3b-4edacc85fab6</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Active Directory Support</Title>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[By default TeamMentor uses its Xml-based User Store, but it is possible to use Active Directory to authenticate users.

===Set-up==

These are the steps required to set it up

**Step 1: Configure web.config file **

In this file (which you will find in the Web Root '\Web Applications\TM_Website') you need to make one change: Set the impersonate value of the system.web identity element

By default the impersonate value is set to false, so you will need to set it to true
{{{
	<system.web>
		...
		<identity impersonate="false"/> <!-- for TeamMentor ActiveDirectory support set to true-->
	</system.web>
}}}

Due to changes in .Net 4 and IIS, the following setting must also be set when impersonate="true" (note that the default value is already set to false)
{{{
	<system.webServer>
	    <validation  validateIntegratedModeConfiguration="false"/> <!-- for TeamMentor ActiveDirectory support-->
		...	
	</system.webServer>
}}}

**Step 2: Configure TMConfig.Config file **

In this file (which you will find in the Web Root '\Web Applications\TM_Website') you need to make two changes: Enable Windows Authentication and set the relevant security groups.

By default WindowsAuthentication is set to false, so you will need to set the Enabled element to true and change the ReaderGroup, EditorGroup, AdminGroup values to match your Active Directory settings
{{{
	<TMConfig>
		<WindowsAuthentication>
			<Enabled>false</Enabled>
			<ReaderGroup>TEAMMENTOR\TeamMentor Readers</ReaderGroup>
			<EditorGroup>TEAMMENTOR\TeamMentor Editors</EditorGroup>
			<AdminGroup>TEAMMENTOR\TeamMentor Admins</AdminGroup>
		</WindowsAuthentication>
	</TMConfig>
}}}


== Troubleshoot ==


**Q: You get a 401 error when connecting to the IIS server from a remote computer, but it works locally**

**A: ** See this Microsoft KB for a workaround [[http://support.microsoft.com/kb/871179]]

**Q: You get this error when running TeamMentor on a fresh IIS installation: //"Handler'"WebServiceHandlerFactory-Integrated' has a bad module 'ManagedPipelineHandler' in its module list."//**

**A: ** Try running //aspnet_regiis.exe -i// from the .Net 4.0 folder. See this post for more details: http://forums.iis.net/p/1149449/1869918.aspx


==References==
* on why need to set validateIntegratedModeConfiguration=false
** [[http://forums.iis.net/t/1187993.aspx]]]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>726f9f42-9b10-428e-970e-04523c4853a0</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>TeamMentor REST API</Title>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[TeamMentor currently support a number of RESTfull APIs calls, which can be used to access its data in a variety of different formats.

Using as a an example the '[[Html Test]]' article (here are the multiple ways it article can be accessed:

* **article**: [[/article/Html Test]]
* **xsl**:  [[/xsl/Html Test]]
* **html**:  [[/html/Html Test]]
* **edit**:  [[/edit/Html Test]]
* **notepad**:  [[/notepad/Html Test]]
* **jsonp**:  [[/jsonp/Html Test]]]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>72b385a0-9dfd-40db-ad32-81a1099e4f5f</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Sandbox</Title>
    </Metadata>
    <Content Sanitized="false" DataType="html">
      <Data><![CDATA[This is a test page (to try html and wikitext markup)

<img src="/_customizations/Images/GuidanceItem%20Editor%20-%20In%20browser.jpg" /><br /><img src="/Image/GuidanceItem%20Editor%20-%20In%20browser.jpg" /><br /><img src="/Image/GuidanceItem_Editor_-_In_browser.jpg" />]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>74102e10-efa4-4d8e-ba21-685c5b59fffa</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Table of Contents</Title>
      <Category />
      <Phase />
      <Technology />
      <Type />
      <DirectLink>Table of Contents</DirectLink>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[=TeamMentor Technology=

This section contains technical details on how TeamMentor works, its architecture and how to consume/manipulate its data.

Note: We are currently updating this content for the forthcoming TeamMentor 3.1 release. If you see something wrong please contact [[mailto:dcruz@securityinnovation.com | Dinis Cruz]]
===Features===

* [[Consuming TeamMentor Data]]
** [[Web_Services_API]]
* [[TeamMentor Article Schema]]
* [[TeamMentor REST API]]
* [[WikiText Support]]
* [[Active Directory Support]]

===Script Examples===
* [[Creating Library, Folder, Views and Articles]]
* [[Case Study - Creating a CWE Library from CheckMarx data]]
* [[Case Study - Creating a CWE Library from CWE raw XML]]
* [[Case Study - Creating a PCI Library from other Libraries]]
* [[Case Study - Direct XML File Manipulation to Fix Double Encoding Issue]]
* [[Case Study - Fix Duplicate Article GUIDs created by Library split]]
* [[Case Study - Fix Intra-Article Broken Links]]
* [[How to - Upload Files or Images]]
* [[How to - Control TeamMentor via IE Automation]]


===TeamMentor Testing/QA===
* [[Set-up Environment]]
* [[Unit Tests]]
* [[User Scenario Matrix]]
* [[QA Action Plan]]
* [[Security Testing]]

===TeamMentor Development===
* [[TM SourceCode]]
* [[3.2 Development]]

This site is powered by a TeamMentor website, which can be [[/html_pages/Gui/TeamMentor.html | accessed here]]]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>95b853d1-8484-48f8-b321-a367443ddeec</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>TeamMentor Article Schema</Title>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[TeamMentor's article data are stored in XML files with the following schema:

{{{
<teammentor_article metadata_hash="1136375728" content_hash="-1237407265">

	<metadata>	
			<id>00000000-0000-0000-0000-00000024fdb5</id>
			<library_id>eb39d862-f752-4d1c-ab6e-14ed697397c0</library_id>
			<title>Opening an Article</title>
			<category>Reading</category>
			<phase>NA</phase>
			<technology>TeamMentor</technology>
			<type>Documentation</type>
			<directlink></directlink>
			<tag></tag>
			<security_demand></security_demand>
			<author></author>
			<priority></priority>
			<status></status>
	</metadata>
	<content datatype="Html" sanitized="true">
		<data>
			<b>some title in bold</b>
	        	 Articles can be opened from the article list pane. The article list pane is the main TeamMentor user interface component and is located in the bottom center by default. Browsing the navigation pane on the left and using the filters in the middle of the user interface changes the list that is displayed in the article list window. Once the desired article is in sight, it can be previewed by single-clicking on its title. To open the article in a new window, double-click on it in the list. Another option is to use the "Open in New Window" button to the right of the "Selected Guidance Item" text in the preview pane.
	       			]]
		</data>
	</content>
</teammentor_article>
}}}


You can see the current schema file by using the a simple [[TeamMentor REST API]] call. For example, the schema shown above was taken from the [[/raw/Opening an Article]] page]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>a62c6e34-d725-41f2-9f61-1815dae985ae</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Control Panel WebServices GUI</Title>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[On the TeamMentor ControlPanel, there are two special Web Interface that allows the direct invocation of TM WebServices:

== Admin Tasks ==

{{/Image/4_10_2012_4_01_51_PM.jpg}}

==TeamMentor Web Services ==

{{/Image/4_10_2012_4_01_00_PM.jpg}}]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>ae0943af-2671-4d5b-98e4-169554e84279</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Web Services API</Title>
      <Category />
      <Phase />
      <Technology />
      <Type />
      <DirectLink>Web Services API</DirectLink>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[TeamMentor has an extensive WebServices API which exposes the entire backend functionality. There 1 main .NET ASCX WebService file, which is the single point of contact for the TeamMentor backend.

This ASMX file is located at the [[/aspx_pages/TM_WebServices.asmx]] location and its WSDL can be easily generated by calling [[/aspx_pages/TM_WebServices.asmx?wsdl]]

Although there are a large number of WebMethods, there is only a small subset that tend to be used when consuming TeamMentor Data:

* GetAllLibraryIds
* GetAllViews
* GetFolders 
* GetGuidanceItemsInLibrary
* GetGuidanceItemsInFolder
* GetGuidanceItemsInView
* GetGuidanceItemById
* GetFolderStructure_Library

These ones tend to be used when manipulating TeamMentor data:
* CreateArticle 
* CreateArticle_Simple
* UpdateGuidanceItem
* CreateFolder
* RenameFolder
* CreateLibrary 
* RenameLibrary
* CreateView
* UpdateView

Note: we are currenly in the process of migrating all references to 'GuidanceItem' to Article']]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>b2a202b5-8026-47a2-a4c5-7a72c47486b2</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Security Testing</Title>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[This page contains the areas of focus for TeamMentor Security Testing

**WebServices Authorization**

Make sure is that the Authorization mappings are working as expected

* admin functions can only be invoked by admins
* edit funtions by editor
* view functions by readers
* non security functions by anonymous]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>b7ad782a-270d-45c5-8504-84a844f621bd</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>How to automatically redirect from HTTP to HTTPS in ASP.Net</Title>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[**Article Status**: Draft 
===Introduction===

In an ASP.NET website hosted in IIS with a valid SSL Certificate, the requirement is direct HTTP traffic to its HTTPS equivalent

===Solution: Using Global.asax in IIS 7.0===

A fast way to implement this is to made set all redirects in web.config to go through managed modules:

{{{
<system.webServer>
....
	<modules runAllManagedModulesForAllRequests="true">
	....
	</modules>
</system.webServer>

}}}

and to add the redirect capture on the global.asax.cs **Application_BeginRequest** method:

{{{
       protected void Application_BeginRequest(object sender, EventArgs e)
        {		
		if (!Request.IsLocal && !Request.IsSecureConnection)
		{
		    string redirectUrl = Request.Url.ToString().Replace("http:", "https:");
		    Response.Redirect(redirectUrl);
		}
        }
}}}

===Solution: Use Javascript redirect===
Another solution is to detect the use of http in JavaScript and do the redirection there. This solution has the side effect of needing to be executed on all the locations where a redirection is needed (which in some cases could actually be a feature)

{{{
	if(top.location.protocol=="http:"){
		if (location.replace){ 
	 		top.location.replace("https:"+top.location.href.substr(5));
		} else {
			top.location="https:"+top.location.href.substr(5);
		}
	}
}}}

===Research Links===

An initial research received these relevant articles

* [[http://stackoverflow.com/questions/7307600/how-to-configure-a-site-to-redirect-automatically-from-http-to-https-in-c-sharp | How to configure a site to redirect automatically from HTTP to HTTPS in C#]]
* [[http://stackoverflow.com/questions/5305443/asp-net-c-sharp-redirecting-from-http-to-https | asp.net c# redirecting from http to https]]
* [[http://stackoverflow.com/questions/2560615/redirect-away-from-https-with-asp-net-mvc-ap| Redirect away from HTTPS with ASP.NET MVC App]]
* [[http://stackoverflow.com/questions/4098013/transfer-from-http-to-https-asp-net-c-sharp | transfer from http to https asp.net c#]]
* [[http://www.sslshopper.com/iis7-redirect-http-to-https.html | IIS7 Redirect HTTP to HTTPS]]
* [[http://www.jppinto.com/2010/03/automatically-redirect-http-requests-to-https-on-iis7-using-url-rewrite-2-0 Automatically | Redirect HTTP requests to HTTPS on IIS 7 using URL Rewrite 2.0]]
* [[http://stackoverflow.com/questions/3823874/asp-net-http-to-https-redirect-with-www-prefix | ASP.NET HTTP to HTTPS redirect with www prefix]]
* [[http://www.hardcode.nl/subcategory_1/article_533-detect-or-enforce-http-or-https-with-javascript.htm | Detect or enforce http or https with Javascript]]

....

back to [[Content_Research]]]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>b815f0fa-861c-46a1-bfe4-41f8f5eaff8b</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Case Study - Creating a CWE Library from CheckMarx data</Title>
      <Category />
      <Phase />
      <Technology />
      <Type />
      <DirectLink>Case Study - Creating a CWE Library from CheckMarx data</DirectLink>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[This article shows an script example on how a custom CWE Library was created using TeamMentor's WebServices API, using as source material the CWE HTML files distributed with Checkmarx

**Requirements**: Windows with .NET 4.0, [[https://github.com/o2platform/O2_Install | O2 Platform]], [[https://github.com/TeamMentor/UnitTests | TeamMentor Unit Tests]] GitHub Repository

===Connect to a instance of TeamMentor and and login===

{{{
var teamMentor = new API_TeamMentor_WebServices("http://localhost:3186/"); 
teamMentor.login("admin", adminPwd);
return teamMentor.loggedIn();
//using SecurityInnovation.TeamMentor;
//O2File:..\TeamMentor-UnitTests\APIs\API_TeamMentor_WebServices.cs
}}}

===Connect to a instance of TeamMentor and and login===

{{{
var teamMentor = new API_TeamMentor_WebServices("http://localhost:3186/"); 
teamMentor.login("admin", adminPwd);
return teamMentor.loggedIn();
}}}

===Create Checkmarx library===
{{{
var teamMentor = new API_TeamMentor_WebServices("http://localhost:3186/"); 
teamMentor.login("admin", adminPwd);
var library = teamMentor.library("Checkmarx");
return library;
}}}

===Create/Get View:===
{{{
var teamMentor = new API_TeamMentor_WebServices("http://localhost:3186/"); 
teamMentor.login("admin", adminPwd);
var library = teamMentor.library("Checkmarx");
return library.view("CWE Data");
}}}

===Create/Get Article===
{{{
teamMentor.login("admin", adminPwd); 
var library = teamMentor.library("Checkmarx"); 
var view = library.view("CWE Data");
return view.article("test article 3");
}}}

===Create Article with Metadata===
{{{
var library = teamMentor.library("Checkmarx"); 

var view = library.view("CWE Data");
 
var title = "XYZ topic";
var content = "<h1>Article on XYZ</h1>With some content here";
var technology  = "Any";
var phase = "Design";
var type = "Principle";
var category = "AppSec";

return view.add_Article(title, content, technology, phase, type, category);
}}}

===Add one article===
{{{
var teamMentor = new API_TeamMentor_WebServices("http://localhost.:3186/");  
teamMentor.login("admin", adminPwd); 

var library = teamMentor.library("Checkmarx").delete().library("Checkmarx");
var view = library.view("CWE Data");

//load Checkmarx CWE data
var checkMark_XmlDumps = "_CheckMark_XmlDumps".tempDir(false); 
var xRoot = "cweData".o2Cache[XElement](()=] checkMark_XmlDumps.pathCombine("CWE.xml").xRoot());

var cweEntry = xRoot.elements().second();

//add entry as TM article
var cweId = cweEntry.elements().first().value();
var cweHtml = cweEntry.elements().second().value();
 
 
var title = cweId;
var content = cweHtml;
var technology  = "Any"; 
var phase = "Report"; 
var type = "Chexkmarx";
var category  = "CWE";

return view.add_Article(title, content, technology, phase, type, category);
}}}



===Add all articles===
{{{
var teamMentor = new API_TeamMentor_WebServices(tmSite);  
teamMentor.login("admin", adminPwd); 

var library = teamMentor.library("Checkmarx").delete().library("Checkmarx");
var view = library.view("CWE Data");

//load Checkmarx CWE data
var checkMark_XmlDumps = "_CheckMark_XmlDumps".tempDir(false); 
var xRoot = "cweData".o2Cache[XElement](()=] checkMark_XmlDumps.pathCombine("CWE.xml").xRoot());

var count = 0;

var cweEntries = xRoot.elements().toList();
foreach(var cweEntry in cweEntries)
{
	//add entry as TM article
	var cweId = cweEntry.elements().first().value();
	var cweHtml = cweEntry.elements().second().value();
	var technology  = "Any"; 
	var phase = "Report"; 
	var type = "CWE";
	var category  = "CheckMarx DB";
	var title = cweId;
	var content = cweHtml;
	if (cweId=="-1") 	// handle special case where they embeded the css on the item with id -1
	{
		type = "css";
		title = "main.css";
		cweHtml =  cweHtml.subString_After("[style]").trim();
	}
	view.add_Article(title, content, technology, phase, type, category);
	if (count++.mod0(20))
		"[{0} / {1}]".debug(count, cweEntries.size());
}
return "Created {0} TeamMentor articles".format(count).info();

}}}

===Script to mass change Checkmark CWE table to point into TM content:===

{{{
var vistaDb = new API_VistaDB();
var serverIp = "xx.xx.xx.xx";
var htmlRedirectTemplate = "&lt;" + @"html&gt;<meta http-equiv="" refresh""="" content="" 0;="" url="http://{0}/html/{1}&quot;&quot;">";

"starting update".info();
var rows = vistaDb.table("CWE").dataTable().Rows;
var count = 0;
foreach(DataRow row in rows) 
{
	var cweId = row.ItemArray[0].str().info(); 
	var htmlRedirect = htmlRedirectTemplate.format(serverIp, cweId);
	vistaDb.executeScalar("UPDATE CWE SET Description = '{1}' where CweId ='{0}'".format(cweId, htmlRedirect)); 
	vistaDb.executeScalar("select Description from CWE where CweId ='{0}'".format(cweId));
	if (count++.mod0(25))
		"[{0}/{1}".debug(count, rows.size());
 }
"update complete".info();
return vistaDb;
}}}
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>bfb6ca19-fbe5-47c2-9f73-183d52047877</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>TeamMentor Landing Page</Title>
      <Category />
      <Phase />
      <Technology />
      <Type />
      <DirectLink>TeamMentor Landing Page</DirectLink>
    </Metadata>
    <Content Sanitized="false" DataType="html">
      <Data><![CDATA[<font face="Arial, Verdana" style="font-size: 10pt; ">Welcome to TeamMentor integrated into Visual Studio and CAT.NET.</font>
  <div style="font-size: 10pt; font-family: Arial, Verdana; ">
    <br />
  </div>
  <div style="font-size: 10pt; font-family: Arial, Verdana; ">CAT.NET is a binary analysis tool that finds vulnerabilites in your code that can result in some of the most common attacks, such as Cross-Site Scripting, SQL Injection, Format String, XPath Injection and more.</div>
  <div style="font-size: 10pt; font-family: Arial, Verdana; ">
    <br />
  </div>
  <div style="font-size: 10pt; font-family: Arial, Verdana; ">TeamMentor provides the guidance you need to understand and fix these vulnerabilities.</div>
  <div style="font-size: 10pt; font-family: Arial, Verdana; ">
    <br />
  </div>
  <div style="font-size: 10pt; font-family: Arial, Verdana; ">To use TeamMentor, build your code and a CAT.NET scan will be started automatically. If vulnerabilities are found in your code, you will see them in the error list within Visual Studio. Double click on an error and you will see information on the vulnerability in this page. Click on any of the links to review best practice guidelines for fixing the problem as well as checklists for checking your own code.</div>
  <div style="font-size: 10pt; font-family: Arial, Verdana; ">
    <br />
  </div>
  <div>
    <span class="Apple-style-span" style="border-collapse: separate; border-spacing: 0px; ">
      <font size="2" face="Arial">
        <p class="MsoNormal" style="margin: 0in 0in 0.0001pt; ">Use the following resources to help you familiarize yourself with TeamMentor’s capabilities and use cases:</p>
        <p class="MsoNormal" style="margin: 0in 0in 0.0001pt; ">&amp;nbsp;</p>
        <ul type="disc" style="margin-bottom: 0in; margin-top: 0in; ">
          <li class="MsoNormal" style="margin: 0in 0in 0.0001pt; ">To view a video tutorial to accompany the attached reference guide on how to get the VS-integrated solution installed and running,&amp;nbsp;<a href="http://www.youtube.com/watch?v=QeI3POSpAvQ&amp;noredirect=1">click here</a>.</li>
          <li class="MsoNormal" style="margin: 0in 0in 0.0001pt; ">To read more on the downloadable components that power TeamMentor’s new static analysis integration,&amp;nbsp;<a href="http://www.reddit.com/r/teammentor/comments/xn651/teammentor_32_powertools_beta/">click here</a>.</li>
          <li class="MsoNormal" style="margin: 0in 0in 0.0001pt; ">Read up on the latest functional test and use cases with TeamMentor by Principal Architect Dinis Cruz on his&amp;nbsp;<a href="http://diniscruz.blogspot.com/">blog</a>.</li>
          <li class="MsoNormal" style="margin: 0in 0in 0.0001pt; ">To see and vote on conversations around various TeamMentor topics,&amp;nbsp;<a href="http://www.reddit.com/r/teammentor/">visit our community page on Reddit</a>.</li>
          <li class="MsoNormal" style="margin: 0in 0in 0.0001pt; ">For internal development notes and details, visit&amp;nbsp;<a href="http://teammentordevelopment.wordpress.com/">The TeamMentor Development Blog</a>.</li>
          <li class="MsoNormal" style="margin: 0in 0in 0.0001pt; ">Take a look at full product documentation information on the&amp;nbsp;<a href="http://docs.teammentor.net/">TeamMentor documentation page</a>.</li>
          <li class="MsoNormal" style="margin: 0in 0in 0.0001pt; ">See what our lead content developer Serge Truth is posting on his&amp;nbsp;<a href="http://sergesecurity.wordpress.com/">Serge Security Blog</a>.</li>
          <li class="MsoNormal" style="margin: 0in 0in 0.0001pt; ">
            <a href="http://docs.teammentor.net/xsl/Table_of_Contents">TeamMentor: How it Works</a>
          </li>
          <li class="MsoNormal" style="margin: 0in 0in 0.0001pt; ">For more videos on how to use TeamMentor, pull up the&amp;nbsp;<a href="http://www.youtube.com/user/SITeamMentor?feature=watch">TeamMentor YouTube Page</a>.</li>
        </ul>
      </font>
    </span>
  </div>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>c3d5f7a0-ccd2-4386-ad5d-2280c22f80e5</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>3.2 Development</Title>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[This page contains details about some of the development efforts that are happening as par of the next (3.2) release.

===Move/Copy Scenarios===
Improve support to Copy/Move, namely:

* Move folder within a library
* Move view to another library
* Move folder to another library
* Move article to another library
* Move article to a view in another library
* Copy from one server to another server]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>c5f8177f-e6cd-46db-a108-d4736120afa5</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Case Study - Creating a CWE Library from CWE raw XML</Title>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[After  we have a normalized CWE XML file lets create the TeamMentor project


**Logging in into teamMentor:**
{{{
var teamMentor = new API_TeamMentor_WebServices("http://localhost:12115");

teamMentor.login("editor",editorPwd).str();
return teamMentor.isLoggedIn();
//using SecurityInnovation.TeamMentor 
//O2File:...\TM_UnitTests\APIs\API_TeamMentor_WebServices.cs
//O2Ref:System.Web.Services.dll
}}}

**Get Current User roles:**
{{{
var teamMentor = new API_TeamMentor_WebServices("http://127.0.0.1:12115"); 

teamMentor.login("editor",editorPwd).str();
return teamMentor.currentUser_Roles();
get Current Libraries
var teamMentor = new API_TeamMentor_WebServices("http://127.0.0.1:12115"); 
teamMentor.login("editor",editorPwd).str();

return teamMentor.libraries();
}}}

**Create/Get CWE Library**
{{{
var teamMentor = new API_TeamMentor_WebServices("http://127.0.0.1:12115"); 
teamMentor.login("editor",editorPwd).str();

var cweLibrary = teamMentor.library("CWE");

return cweLibrary;
Get -> Delete -> Create CWE library
var cweLibrary = teamMentor.library("CWE")
						   .delete()
						   .library("CWE");

return cweLibrary;
Create View:
var cweLibrary = teamMentor.library("CWE").delete().library("CWE");
var cweWeakness = cweLibrary.add_View("Weaknesses");
return cweWeakness;
}}}

**Loading CWE Data (from XML file)**
{{{
var editorPwd = "123qwe";

var targetDir = "_CWE_Data".tempDir(false);
var mappedXml = targetDir.pathCombine("Cwe_data.xml");
var cweData = mappedXml.load<CWE_Data>();


var teamMentor = new API_TeamMentor_WebServices("http://localhost:12115");
teamMentor.login("editor",editorPwd).str();

//using SecurityInnovation.TeamMentor 
//O2File:...\TM_UnitTests\APIs\API_TeamMentor_WebServices.cs
//O2File:CWE_Data.cs
//O2Ref:System.Web.Services.dll
}}}

**Creating 10 articles in Weaknesses View**
{{{

var cweData = mappedXml.load<CWE_Data>();

var teamMentor = new API_TeamMentor_WebServices("http://localhost:12115");
teamMentor.login("editor",editorPwd).str();

var tmLibrary = teamMentor.library("CWE").delete().library("CWE");
var tmView = tmLibrary.add_View("Weaknesses");

foreach(var weakness in cweData.Weaknesses.Take(10))
{
	tmView.add_Article(weakness.Title, weakness.Content);
}
return "done";
testing populating metadata fields and viewing TM site in browser window
foreach(var weakness in cweData.Weaknesses.Take(10))
{
	tmView.add_Article(weakness.Title,weakness.Content, "1","2","3","4");
}
panel.clear().add_WebBrowser_Control().open(tmSite);
}}}

**Populating metadata**
{{{
foreach(var weakness in cweData.Weaknesses.Take(10))
{
	tmView.add_Article(weakness.Title,weakness.Content, weakness.Technology,weakness.Phase, weakness.Type, weakness.Category);
}

**Adding all articles**
{{{
var tmLibrary = teamMentor.library("CWE").delete().library("CWE");
var tmView = tmLibrary.add_View("Weaknesses");
var itemsProcessed = 0;
foreach(var weakness in cweData.Weaknesses)
{
	tmView.add_Article(weakness.Title,weakness.Content, weakness.Technology,weakness.Phase, weakness.Type, weakness.Category);
	if (itemsProcessed++.mod0(30))
		"[{0}/{1}]".info(itemsProcessed, cweData.Weaknesses.size()); 
}
}}}

**Creating a Folder mapped by Phase: **

Start by creating a filtered view of the data:

{{{
var tmLibrary = teamMentor.library("CWE").delete().library("CWE");
var weakness_By_Phase = new Dictionary<string,List<CWE_Weakness>>();
foreach(var weakness in cweData.Weaknesses)
{
	foreach(var phase in weakness.Phase.split(","))
		weakness_By_Phase.add(phase.trim(), weakness);
}

return weakness_By_Phase;
}}}

**Create a folder to hold a view per phase:**
{{{
foreach(var item in weakness_By_Phase)
{
	var tmView = tmFolder.add_View(item.Key);
	foreach(var weakness in item.Value)
		tmView.add_Article(weakness.Title,weakness.Content, weakness.Technology, item.Key, weakness.Type, weakness.Category);
		
	if (itemsProcessed++.mod0(30))
		"[{0}/{1}]".info(itemsProcessed, cweData.Weaknesses.size()); 
	
 }

panel.clear().add_WebBrowser_Control().open(tmSite); 
}}}

**Complete script which creates two libraries:**

{{{

var targetDir = "_CWE_Data".tempDir(false);
var mappedXml = targetDir.pathCombine("Cwe_data.xml");
var cweData = mappedXml.load<CWE_Data>();

var tmSite = "http://localhost.:12115";
var teamMentor = new API_TeamMentor_WebServices(tmSite);


teamMentor.login("editor",editorPwd).str(); 
 
var tmLibrary = teamMentor.library("CWE_by_Phase").delete().library("CWE_by_Phase");

var weakness_By_Phase = new Dictionary<string,List<CWE_Weakness>>();
foreach(var weakness in cweData.Weaknesses)
{
	foreach(var phase in weakness.Phase.split(","))
		weakness_By_Phase.add(phase.trim(), weakness);
}
var tmFolder = tmLibrary.add_Folder("Weakness by Phase");

var itemsProcessed = 0;

foreach(var item in weakness_By_Phase)
{
	var tmView = tmFolder.add_View(item.Key);
	foreach(var weakness in item.Value)
		tmView.add_Article(weakness.Title,weakness.Content, weakness.Technology, item.Key, weakness.Type, weakness.Category);
		
	if (itemsProcessed++.mod0(30))
		"[{0}/{1}]".info(itemsProcessed, cweData.Weaknesses.size()); 
	
 }
 
//Creating a view with all Items
tmLibrary = teamMentor.library("CWE_All").delete().library("CWE_All");
var _tmView = tmLibrary.add_View("Weaknesses");
itemsProcessed = 0;
foreach(var weakness in cweData.Weaknesses)
{
	_tmView.add_Article(weakness.Title,weakness.Content, weakness.Technology,weakness.Phase, weakness.Type, weakness.Category);
	if (itemsProcessed++.mod0(30))
		"[{0}/{1}]".info(itemsProcessed, cweData.Weaknesses.size()); 
}

panel.clear().add_WebBrowser_Control().open(tmSite); 



return "done";
//using SecurityInnovation.TeamMentor 
//O2File:..\TM_UnitTests\APIs\API_TeamMentor_WebServices.cs
//O2File:CWE_Data.cs
//O2Ref:System.Web.Services.dll
}}}

]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>d1c43a7b-00e5-4c0f-90ec-40bc1bfc82c5</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Set-up Environment</Title>
    </Metadata>
    <Content Sanitized="false" DataType="WikiText">
      <Data><![CDATA[Here is the recommended set-up for TeamMentor QA and Development activities

==Windows==

* Git (msysgit): http://code.google.com/p/msysgit/downloads/list?q=full+installer+official+git
* TortoiseGit: http://code.google.com/p/tortoisegit/downloads/list
* O2 Platform: https://github.com/o2platform/O2_Install
* Test version of TeamMentor: https://github.com/TeamMentor-OWASP/Master

]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>d5b19213-d399-4c31-a91f-231775749619</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Case Study - Fix Intra-Article Broken Links</Title>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[This script was used to fix a number of broken links that existed between articles (caused by GUID remapping)

{{{

var tmSite = "http://localhost.:12121/";
var adminPwd= "..."; 
  
var topPanel = panel.clear().add_Panel();
var tree1 = topPanel.add_GroupBox("OK").add_TreeView().sort().afterSelect<string>((text)=> text.clipboardText_Set());
var tree2 = tree1.insert_Right().add_GroupBox("NOT OK").add_TreeView().sort().afterSelect<string>((text)=> text.clipboardText_Set());
var teamMentor = new API_TeamMentor_WebServices(tmSite);  
teamMentor.login("admin", adminPwd); 

//return teamMentor.loggedIn();
//var library = teamMentor.library("Java"); 
var okList = new List<string>();
var notokList = new List<string>();

var count =1;
var linksFixed = 0;
foreach(var library in teamMentor.libraries())
{
	var tmArticles = library.tmWebServices.webServices.GetGuidanceItemsInLibrary(library.Id);
	
	
	foreach(var tmArticle in tmArticles)
	{
		//"{0} : {1}".info(tmArticle.Metadata.Title, tmArticle.Metadata.Id);
		try
		{
			var htmlCode = tmArticle.Content.Data.Value;
			var htmlDocument = htmlCode.htmlDocument();		
			var linkFixes = false;
			foreach(var link in htmlDocument.links()) 
			{
				var href = link.attribute("href");
				if(href.notNull())  
				{
					var splittedHref = href.Value.split("/");									
					if (splittedHref.size()==3 &&  splittedHref[1].contains("article") && splittedHref[2].isGuid())
					{									
						var guid = splittedHref[2].guid(); 				
						var guidanceItem = library.tmWebServices.webServices.GetGuidanceItemById(guid.str());
						if (guidanceItem.notNull())
							okList.add_If_Not_There(href.Value);	  
						else
						{
							var mapping = link.InnerText.split(":").last().trim(); 
							
							guid = library.tmWebServices.webServices.getGuidForMapping(mapping);
							
							if (guid == Guid.Empty)		
							{
								"no ok : {0}  -  {1}".error(link.InnerText, mapping);
								notokList.add_If_Not_There(href.Value);	  
							}
							else
							{
								"fixed: {0} -> {1}".debug(guid , mapping);
								href.Value =  "/article/{0}".format(guid);			
								linkFixes = true;
								linksFixed++;
							}							
						}	
					}
				}			
			}	
			if (linkFixes)
			{
				"Saving: {0}".info(tmArticle.Metadata.Id);
				
				tmArticle.Content.Data.Value = htmlDocument.tidyHtml();					
				library.tmWebServices.webServices.UpdateGuidanceItem(tmArticle);				
				linkFixes = false;
			}
			
			//return tmArticle.Content.Data.Value;
		}
		catch(Exception ex)
		{
			"error: {0}".error(ex.Message);
		} 
		if (count++.mod0(150))
		{
			"[{0}/{1}]".info(count, tmArticles.size());			
		}		
	}
	"okList: {0}".info(okList.size());
	"notokList: {0}".info(notokList.size());
}
tree1.add_Nodes(okList);
tree2.add_Nodes(notokList);


return "links fixed: {0}".info(linksFixed);
//return library.articles();


//using SecurityInnovation.TeamMentor;
//O2File:HtmlAgilityPack_ExtensionMethods.cs
//O2File:...\TeamMentor-UnitTests\APIs\API_TeamMentor_WebServices.cs
//O2Ref:System.Web.Services.dll
//O2Ref:O2_Misc_Microsoft_MPL_Libs.dll
//O2Tag_DontAddExtraO2Files
}}}
]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>e14b4d0b-5968-40af-9090-9ea1379cb569</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Consuming TeamMentor Data</Title>
      <Category />
      <Phase />
      <Technology />
      <Type />
      <DirectLink>Consuming TeamMentor Data</DirectLink>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[TeamMentor was designed from the ground up to facilitate the easy access and manipulation of its data.

There are number of ways do it by:

* Using the **Control Panel WebServices GUI**
* Accessing the [[Web Services API]] directly
* Using the **Javascript API** (which wraps the WebServices)
* **Manipulating the XML files** (either at the master XML Git repository or at a local install/fork/clone)
* Consuming the **Server-side TeamMentor.CoreLib.Dll** (using or nor the WebServices methods)
* Using the O2 Platform and its multiple TeamMentor data manipulation and viewing GUIs]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>e5af52bb-7b25-41bf-8ef8-e6a2ecb49b13</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Html Test</Title>
    </Metadata>
    <Content Sanitized="false" DataType="html">
      <Data><![CDATA[this is a simple Html based <b>TeamMentor article</b>]]></Data>
    </Content>
  </TeamMentor_Article>
  <TeamMentor_Article Metadata_Hash="0" Content_Hash="0">
    <Metadata>
      <Id>f62b23af-b964-499d-833f-87190803fcc0</Id>
      <Library_Id>eb39d862-f752-4d1c-ab6e-14ed697397c0</Library_Id>
      <Title>Ed working Pages</Title>
    </Metadata>
    <Content Sanitized="false" DataType="wikitext">
      <Data><![CDATA[Pages Ed is currently working on:

* [[TeamMentor Artifacts]]]]></Data>
    </Content>
  </TeamMentor_Article>
</ArrayOfTeamMentor_Article>